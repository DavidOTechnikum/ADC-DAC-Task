
adc-dac-task-oberleitner.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005620  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080057b0  080057b0  000157b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005838  08005838  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08005838  08005838  00015838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005840  08005840  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005840  08005840  00015840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005844  08005844  00015844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08005848  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b8  2000005c  080058a4  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000314  080058a4  00020314  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013bfb  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000282a  00000000  00000000  00033cca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001238  00000000  00000000  000364f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e28  00000000  00000000  00037730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022cb6  00000000  00000000  00038558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014882  00000000  00000000  0005b20e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000db8f4  00000000  00000000  0006fa90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000052a4  00000000  00000000  0014b384  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00150628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005798 	.word	0x08005798

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08005798 	.word	0x08005798

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000570:	f000 fc31 	bl	8000dd6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000574:	f000 f816 	bl	80005a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000578:	f000 f972 	bl	8000860 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800057c:	f000 f940 	bl	8000800 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8000580:	f000 f908 	bl	8000794 <MX_TIM6_Init>
  MX_DAC1_Init();
 8000584:	f000 f8d4 	bl	8000730 <MX_DAC1_Init>
  MX_ADC1_Init();
 8000588:	f000 f86e 	bl	8000668 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  //char uart_buf[50];
 // int uart_buf_len;

   HAL_ADC_Start(&hadc1);
 800058c:	4803      	ldr	r0, [pc, #12]	; (800059c <main+0x30>)
 800058e:	f000 ffff 	bl	8001590 <HAL_ADC_Start>
   HAL_TIM_Base_Start_IT(&htim6);
 8000592:	4803      	ldr	r0, [pc, #12]	; (80005a0 <main+0x34>)
 8000594:	f003 fcdc 	bl	8003f50 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000598:	e7fe      	b.n	8000598 <main+0x2c>
 800059a:	bf00      	nop
 800059c:	20000078 	.word	0x20000078
 80005a0:	200000f0 	.word	0x200000f0

080005a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b096      	sub	sp, #88	; 0x58
 80005a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005aa:	f107 0314 	add.w	r3, r7, #20
 80005ae:	2244      	movs	r2, #68	; 0x44
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f004 fc6c 	bl	8004e90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b8:	463b      	mov	r3, r7
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
 80005be:	605a      	str	r2, [r3, #4]
 80005c0:	609a      	str	r2, [r3, #8]
 80005c2:	60da      	str	r2, [r3, #12]
 80005c4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005c6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005ca:	f002 fae3 	bl	8002b94 <HAL_PWREx_ControlVoltageScaling>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005d4:	f000 f9f2 	bl	80009bc <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005d8:	f002 fabe 	bl	8002b58 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005dc:	4b21      	ldr	r3, [pc, #132]	; (8000664 <SystemClock_Config+0xc0>)
 80005de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80005e2:	4a20      	ldr	r2, [pc, #128]	; (8000664 <SystemClock_Config+0xc0>)
 80005e4:	f023 0318 	bic.w	r3, r3, #24
 80005e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80005ec:	2314      	movs	r3, #20
 80005ee:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005f0:	2301      	movs	r3, #1
 80005f2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005f4:	2301      	movs	r3, #1
 80005f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005fc:	2360      	movs	r3, #96	; 0x60
 80005fe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000600:	2302      	movs	r3, #2
 8000602:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000604:	2301      	movs	r3, #1
 8000606:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000608:	2301      	movs	r3, #1
 800060a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 800060c:	2310      	movs	r3, #16
 800060e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000610:	2307      	movs	r3, #7
 8000612:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000614:	2302      	movs	r3, #2
 8000616:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000618:	2302      	movs	r3, #2
 800061a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800061c:	f107 0314 	add.w	r3, r7, #20
 8000620:	4618      	mov	r0, r3
 8000622:	f002 fb0d 	bl	8002c40 <HAL_RCC_OscConfig>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800062c:	f000 f9c6 	bl	80009bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000630:	230f      	movs	r3, #15
 8000632:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000634:	2303      	movs	r3, #3
 8000636:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000638:	2300      	movs	r3, #0
 800063a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800063c:	2300      	movs	r3, #0
 800063e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000640:	2300      	movs	r3, #0
 8000642:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000644:	463b      	mov	r3, r7
 8000646:	2101      	movs	r1, #1
 8000648:	4618      	mov	r0, r3
 800064a:	f002 ff0d 	bl	8003468 <HAL_RCC_ClockConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000654:	f000 f9b2 	bl	80009bc <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000658:	f003 fb20 	bl	8003c9c <HAL_RCCEx_EnableMSIPLLMode>
}
 800065c:	bf00      	nop
 800065e:	3758      	adds	r7, #88	; 0x58
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	40021000 	.word	0x40021000

08000668 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b086      	sub	sp, #24
 800066c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800066e:	463b      	mov	r3, r7
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
 800067a:	611a      	str	r2, [r3, #16]
 800067c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800067e:	4b29      	ldr	r3, [pc, #164]	; (8000724 <MX_ADC1_Init+0xbc>)
 8000680:	4a29      	ldr	r2, [pc, #164]	; (8000728 <MX_ADC1_Init+0xc0>)
 8000682:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000684:	4b27      	ldr	r3, [pc, #156]	; (8000724 <MX_ADC1_Init+0xbc>)
 8000686:	2200      	movs	r2, #0
 8000688:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800068a:	4b26      	ldr	r3, [pc, #152]	; (8000724 <MX_ADC1_Init+0xbc>)
 800068c:	2200      	movs	r2, #0
 800068e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000690:	4b24      	ldr	r3, [pc, #144]	; (8000724 <MX_ADC1_Init+0xbc>)
 8000692:	2200      	movs	r2, #0
 8000694:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000696:	4b23      	ldr	r3, [pc, #140]	; (8000724 <MX_ADC1_Init+0xbc>)
 8000698:	2200      	movs	r2, #0
 800069a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800069c:	4b21      	ldr	r3, [pc, #132]	; (8000724 <MX_ADC1_Init+0xbc>)
 800069e:	2204      	movs	r2, #4
 80006a0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006a2:	4b20      	ldr	r3, [pc, #128]	; (8000724 <MX_ADC1_Init+0xbc>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80006a8:	4b1e      	ldr	r3, [pc, #120]	; (8000724 <MX_ADC1_Init+0xbc>)
 80006aa:	2201      	movs	r2, #1
 80006ac:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80006ae:	4b1d      	ldr	r3, [pc, #116]	; (8000724 <MX_ADC1_Init+0xbc>)
 80006b0:	2201      	movs	r2, #1
 80006b2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006b4:	4b1b      	ldr	r3, [pc, #108]	; (8000724 <MX_ADC1_Init+0xbc>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006bc:	4b19      	ldr	r3, [pc, #100]	; (8000724 <MX_ADC1_Init+0xbc>)
 80006be:	2200      	movs	r2, #0
 80006c0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006c2:	4b18      	ldr	r3, [pc, #96]	; (8000724 <MX_ADC1_Init+0xbc>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006c8:	4b16      	ldr	r3, [pc, #88]	; (8000724 <MX_ADC1_Init+0xbc>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006d0:	4b14      	ldr	r3, [pc, #80]	; (8000724 <MX_ADC1_Init+0xbc>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80006d6:	4b13      	ldr	r3, [pc, #76]	; (8000724 <MX_ADC1_Init+0xbc>)
 80006d8:	2200      	movs	r2, #0
 80006da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006de:	4811      	ldr	r0, [pc, #68]	; (8000724 <MX_ADC1_Init+0xbc>)
 80006e0:	f000 fe14 	bl	800130c <HAL_ADC_Init>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80006ea:	f000 f967 	bl	80009bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80006ee:	4b0f      	ldr	r3, [pc, #60]	; (800072c <MX_ADC1_Init+0xc4>)
 80006f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006f2:	2306      	movs	r3, #6
 80006f4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006f6:	2300      	movs	r3, #0
 80006f8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006fa:	237f      	movs	r3, #127	; 0x7f
 80006fc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006fe:	2304      	movs	r3, #4
 8000700:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000702:	2300      	movs	r3, #0
 8000704:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000706:	463b      	mov	r3, r7
 8000708:	4619      	mov	r1, r3
 800070a:	4806      	ldr	r0, [pc, #24]	; (8000724 <MX_ADC1_Init+0xbc>)
 800070c:	f000 ffe4 	bl	80016d8 <HAL_ADC_ConfigChannel>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000716:	f000 f951 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800071a:	bf00      	nop
 800071c:	3718      	adds	r7, #24
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	20000078 	.word	0x20000078
 8000728:	50040000 	.word	0x50040000
 800072c:	32601000 	.word	0x32601000

08000730 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b08a      	sub	sp, #40	; 0x28
 8000734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000736:	1d3b      	adds	r3, r7, #4
 8000738:	2224      	movs	r2, #36	; 0x24
 800073a:	2100      	movs	r1, #0
 800073c:	4618      	mov	r0, r3
 800073e:	f004 fba7 	bl	8004e90 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000742:	4b12      	ldr	r3, [pc, #72]	; (800078c <MX_DAC1_Init+0x5c>)
 8000744:	4a12      	ldr	r2, [pc, #72]	; (8000790 <MX_DAC1_Init+0x60>)
 8000746:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000748:	4810      	ldr	r0, [pc, #64]	; (800078c <MX_DAC1_Init+0x5c>)
 800074a:	f001 fe5a 	bl	8002402 <HAL_DAC_Init>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000754:	f000 f932 	bl	80009bc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000758:	2300      	movs	r3, #0
 800075a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800075c:	2300      	movs	r3, #0
 800075e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000760:	2300      	movs	r3, #0
 8000762:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000764:	2300      	movs	r3, #0
 8000766:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000768:	2300      	movs	r3, #0
 800076a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800076c:	1d3b      	adds	r3, r7, #4
 800076e:	2200      	movs	r2, #0
 8000770:	4619      	mov	r1, r3
 8000772:	4806      	ldr	r0, [pc, #24]	; (800078c <MX_DAC1_Init+0x5c>)
 8000774:	f001 ff3d 	bl	80025f2 <HAL_DAC_ConfigChannel>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800077e:	f000 f91d 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000782:	bf00      	nop
 8000784:	3728      	adds	r7, #40	; 0x28
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	200000dc 	.word	0x200000dc
 8000790:	40007400 	.word	0x40007400

08000794 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b084      	sub	sp, #16
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800079a:	1d3b      	adds	r3, r7, #4
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80007a4:	4b14      	ldr	r3, [pc, #80]	; (80007f8 <MX_TIM6_Init+0x64>)
 80007a6:	4a15      	ldr	r2, [pc, #84]	; (80007fc <MX_TIM6_Init+0x68>)
 80007a8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 5;
 80007aa:	4b13      	ldr	r3, [pc, #76]	; (80007f8 <MX_TIM6_Init+0x64>)
 80007ac:	2205      	movs	r2, #5
 80007ae:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007b0:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <MX_TIM6_Init+0x64>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80007b6:	4b10      	ldr	r3, [pc, #64]	; (80007f8 <MX_TIM6_Init+0x64>)
 80007b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007bc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007be:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <MX_TIM6_Init+0x64>)
 80007c0:	2280      	movs	r2, #128	; 0x80
 80007c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80007c4:	480c      	ldr	r0, [pc, #48]	; (80007f8 <MX_TIM6_Init+0x64>)
 80007c6:	f003 fb6b 	bl	8003ea0 <HAL_TIM_Base_Init>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80007d0:	f000 f8f4 	bl	80009bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007d4:	2300      	movs	r3, #0
 80007d6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007d8:	2300      	movs	r3, #0
 80007da:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80007dc:	1d3b      	adds	r3, r7, #4
 80007de:	4619      	mov	r1, r3
 80007e0:	4805      	ldr	r0, [pc, #20]	; (80007f8 <MX_TIM6_Init+0x64>)
 80007e2:	f003 fd97 	bl	8004314 <HAL_TIMEx_MasterConfigSynchronization>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80007ec:	f000 f8e6 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80007f0:	bf00      	nop
 80007f2:	3710      	adds	r7, #16
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	200000f0 	.word	0x200000f0
 80007fc:	40001000 	.word	0x40001000

08000800 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000804:	4b14      	ldr	r3, [pc, #80]	; (8000858 <MX_USART2_UART_Init+0x58>)
 8000806:	4a15      	ldr	r2, [pc, #84]	; (800085c <MX_USART2_UART_Init+0x5c>)
 8000808:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800080a:	4b13      	ldr	r3, [pc, #76]	; (8000858 <MX_USART2_UART_Init+0x58>)
 800080c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000810:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000812:	4b11      	ldr	r3, [pc, #68]	; (8000858 <MX_USART2_UART_Init+0x58>)
 8000814:	2200      	movs	r2, #0
 8000816:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000818:	4b0f      	ldr	r3, [pc, #60]	; (8000858 <MX_USART2_UART_Init+0x58>)
 800081a:	2200      	movs	r2, #0
 800081c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800081e:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <MX_USART2_UART_Init+0x58>)
 8000820:	2200      	movs	r2, #0
 8000822:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000824:	4b0c      	ldr	r3, [pc, #48]	; (8000858 <MX_USART2_UART_Init+0x58>)
 8000826:	220c      	movs	r2, #12
 8000828:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800082a:	4b0b      	ldr	r3, [pc, #44]	; (8000858 <MX_USART2_UART_Init+0x58>)
 800082c:	2200      	movs	r2, #0
 800082e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000830:	4b09      	ldr	r3, [pc, #36]	; (8000858 <MX_USART2_UART_Init+0x58>)
 8000832:	2200      	movs	r2, #0
 8000834:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000836:	4b08      	ldr	r3, [pc, #32]	; (8000858 <MX_USART2_UART_Init+0x58>)
 8000838:	2200      	movs	r2, #0
 800083a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800083c:	4b06      	ldr	r3, [pc, #24]	; (8000858 <MX_USART2_UART_Init+0x58>)
 800083e:	2200      	movs	r2, #0
 8000840:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000842:	4805      	ldr	r0, [pc, #20]	; (8000858 <MX_USART2_UART_Init+0x58>)
 8000844:	f003 fdea 	bl	800441c <HAL_UART_Init>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800084e:	f000 f8b5 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	2000013c 	.word	0x2000013c
 800085c:	40004400 	.word	0x40004400

08000860 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b088      	sub	sp, #32
 8000864:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000866:	f107 030c 	add.w	r3, r7, #12
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	609a      	str	r2, [r3, #8]
 8000872:	60da      	str	r2, [r3, #12]
 8000874:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000876:	4b1d      	ldr	r3, [pc, #116]	; (80008ec <MX_GPIO_Init+0x8c>)
 8000878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087a:	4a1c      	ldr	r2, [pc, #112]	; (80008ec <MX_GPIO_Init+0x8c>)
 800087c:	f043 0304 	orr.w	r3, r3, #4
 8000880:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000882:	4b1a      	ldr	r3, [pc, #104]	; (80008ec <MX_GPIO_Init+0x8c>)
 8000884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000886:	f003 0304 	and.w	r3, r3, #4
 800088a:	60bb      	str	r3, [r7, #8]
 800088c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088e:	4b17      	ldr	r3, [pc, #92]	; (80008ec <MX_GPIO_Init+0x8c>)
 8000890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000892:	4a16      	ldr	r2, [pc, #88]	; (80008ec <MX_GPIO_Init+0x8c>)
 8000894:	f043 0301 	orr.w	r3, r3, #1
 8000898:	64d3      	str	r3, [r2, #76]	; 0x4c
 800089a:	4b14      	ldr	r3, [pc, #80]	; (80008ec <MX_GPIO_Init+0x8c>)
 800089c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089e:	f003 0301 	and.w	r3, r3, #1
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a6:	4b11      	ldr	r3, [pc, #68]	; (80008ec <MX_GPIO_Init+0x8c>)
 80008a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008aa:	4a10      	ldr	r2, [pc, #64]	; (80008ec <MX_GPIO_Init+0x8c>)
 80008ac:	f043 0302 	orr.w	r3, r3, #2
 80008b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008b2:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <MX_GPIO_Init+0x8c>)
 80008b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b6:	f003 0302 	and.w	r3, r3, #2
 80008ba:	603b      	str	r3, [r7, #0]
 80008bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80008be:	2200      	movs	r2, #0
 80008c0:	2108      	movs	r1, #8
 80008c2:	480b      	ldr	r0, [pc, #44]	; (80008f0 <MX_GPIO_Init+0x90>)
 80008c4:	f002 f930 	bl	8002b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80008c8:	2308      	movs	r3, #8
 80008ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008cc:	2301      	movs	r3, #1
 80008ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d4:	2300      	movs	r3, #0
 80008d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80008d8:	f107 030c 	add.w	r3, r7, #12
 80008dc:	4619      	mov	r1, r3
 80008de:	4804      	ldr	r0, [pc, #16]	; (80008f0 <MX_GPIO_Init+0x90>)
 80008e0:	f001 ffb8 	bl	8002854 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008e4:	bf00      	nop
 80008e6:	3720      	adds	r7, #32
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	40021000 	.word	0x40021000
 80008f0:	48000400 	.word	0x48000400

080008f4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b08e      	sub	sp, #56	; 0x38
 80008f8:	af02      	add	r7, sp, #8
 80008fa:	6078      	str	r0, [r7, #4]

	char uart_adc[30];
	int uart_adc_len;
	if (htim == &htim6) {
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	4a1c      	ldr	r2, [pc, #112]	; (8000970 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000900:	4293      	cmp	r3, r2
 8000902:	d130      	bne.n	8000966 <HAL_TIM_PeriodElapsedCallback+0x72>
		HAL_ADC_Start(&hadc1);
 8000904:	481b      	ldr	r0, [pc, #108]	; (8000974 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000906:	f000 fe43 	bl	8001590 <HAL_ADC_Start>
		int value = HAL_ADC_GetValue(&hadc1);
 800090a:	481a      	ldr	r0, [pc, #104]	; (8000974 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800090c:	f000 fed6 	bl	80016bc <HAL_ADC_GetValue>
 8000910:	4603      	mov	r3, r0
 8000912:	62fb      	str	r3, [r7, #44]	; 0x2c
		uart_adc_len = sprintf(uart_adc, "ADC: %d\r\n", (int) value);
 8000914:	f107 0308 	add.w	r3, r7, #8
 8000918:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800091a:	4917      	ldr	r1, [pc, #92]	; (8000978 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800091c:	4618      	mov	r0, r3
 800091e:	f004 fa97 	bl	8004e50 <siprintf>
 8000922:	62b8      	str	r0, [r7, #40]	; 0x28
		HAL_UART_Transmit(&huart2, (uint8_t *) uart_adc, uart_adc_len, 100);
 8000924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000926:	b29a      	uxth	r2, r3
 8000928:	f107 0108 	add.w	r1, r7, #8
 800092c:	2364      	movs	r3, #100	; 0x64
 800092e:	4813      	ldr	r0, [pc, #76]	; (800097c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000930:	f003 fdc2 	bl	80044b8 <HAL_UART_Transmit>
		value = map(value, 0, 4095, 700, 1400);
 8000934:	f44f 63af 	mov.w	r3, #1400	; 0x578
 8000938:	9300      	str	r3, [sp, #0]
 800093a:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 800093e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000942:	2100      	movs	r1, #0
 8000944:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000946:	f000 f81d 	bl	8000984 <map>
 800094a:	62f8      	str	r0, [r7, #44]	; 0x2c
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, value);
 800094c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800094e:	2200      	movs	r2, #0
 8000950:	2100      	movs	r1, #0
 8000952:	480b      	ldr	r0, [pc, #44]	; (8000980 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000954:	f001 fe1e 	bl	8002594 <HAL_DAC_SetValue>
		HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000958:	2100      	movs	r1, #0
 800095a:	4809      	ldr	r0, [pc, #36]	; (8000980 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800095c:	f001 fd73 	bl	8002446 <HAL_DAC_Start>
		HAL_ADC_Stop(&hadc1);
 8000960:	4804      	ldr	r0, [pc, #16]	; (8000974 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000962:	f000 fe78 	bl	8001656 <HAL_ADC_Stop>
		//HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, value);
		// Error Handling: != HAL_OK
		//HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
		 */

}
 8000966:	bf00      	nop
 8000968:	3730      	adds	r7, #48	; 0x30
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	200000f0 	.word	0x200000f0
 8000974:	20000078 	.word	0x20000078
 8000978:	080057b0 	.word	0x080057b0
 800097c:	2000013c 	.word	0x2000013c
 8000980:	200000dc 	.word	0x200000dc

08000984 <map>:

int map(int x, int in_min, int in_max, int out_min, int out_max) {
 8000984:	b480      	push	{r7}
 8000986:	b085      	sub	sp, #20
 8000988:	af00      	add	r7, sp, #0
 800098a:	60f8      	str	r0, [r7, #12]
 800098c:	60b9      	str	r1, [r7, #8]
 800098e:	607a      	str	r2, [r7, #4]
 8000990:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000992:	68fa      	ldr	r2, [r7, #12]
 8000994:	68bb      	ldr	r3, [r7, #8]
 8000996:	1ad3      	subs	r3, r2, r3
 8000998:	69b9      	ldr	r1, [r7, #24]
 800099a:	683a      	ldr	r2, [r7, #0]
 800099c:	1a8a      	subs	r2, r1, r2
 800099e:	fb03 f202 	mul.w	r2, r3, r2
 80009a2:	6879      	ldr	r1, [r7, #4]
 80009a4:	68bb      	ldr	r3, [r7, #8]
 80009a6:	1acb      	subs	r3, r1, r3
 80009a8:	fb92 f2f3 	sdiv	r2, r2, r3
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	4413      	add	r3, r2
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	3714      	adds	r7, #20
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr

080009bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c0:	b672      	cpsid	i
}
 80009c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009c4:	e7fe      	b.n	80009c4 <Error_Handler+0x8>
	...

080009c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ce:	4b0f      	ldr	r3, [pc, #60]	; (8000a0c <HAL_MspInit+0x44>)
 80009d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009d2:	4a0e      	ldr	r2, [pc, #56]	; (8000a0c <HAL_MspInit+0x44>)
 80009d4:	f043 0301 	orr.w	r3, r3, #1
 80009d8:	6613      	str	r3, [r2, #96]	; 0x60
 80009da:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <HAL_MspInit+0x44>)
 80009dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009de:	f003 0301 	and.w	r3, r3, #1
 80009e2:	607b      	str	r3, [r7, #4]
 80009e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e6:	4b09      	ldr	r3, [pc, #36]	; (8000a0c <HAL_MspInit+0x44>)
 80009e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ea:	4a08      	ldr	r2, [pc, #32]	; (8000a0c <HAL_MspInit+0x44>)
 80009ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f0:	6593      	str	r3, [r2, #88]	; 0x58
 80009f2:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <HAL_MspInit+0x44>)
 80009f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009fa:	603b      	str	r3, [r7, #0]
 80009fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009fe:	bf00      	nop
 8000a00:	370c      	adds	r7, #12
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	40021000 	.word	0x40021000

08000a10 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b09e      	sub	sp, #120	; 0x78
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a18:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a28:	f107 0310 	add.w	r3, r7, #16
 8000a2c:	2254      	movs	r2, #84	; 0x54
 8000a2e:	2100      	movs	r1, #0
 8000a30:	4618      	mov	r0, r3
 8000a32:	f004 fa2d 	bl	8004e90 <memset>
  if(hadc->Instance==ADC1)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4a25      	ldr	r2, [pc, #148]	; (8000ad0 <HAL_ADC_MspInit+0xc0>)
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d143      	bne.n	8000ac8 <HAL_ADC_MspInit+0xb8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a40:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a44:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000a46:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a4a:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000a50:	2301      	movs	r3, #1
 8000a52:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000a54:	2310      	movs	r3, #16
 8000a56:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000a58:	2307      	movs	r3, #7
 8000a5a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000a60:	2302      	movs	r3, #2
 8000a62:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000a64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a68:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a6a:	f107 0310 	add.w	r3, r7, #16
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f002 ff1e 	bl	80038b0 <HAL_RCCEx_PeriphCLKConfig>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8000a7a:	f7ff ff9f 	bl	80009bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000a7e:	4b15      	ldr	r3, [pc, #84]	; (8000ad4 <HAL_ADC_MspInit+0xc4>)
 8000a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a82:	4a14      	ldr	r2, [pc, #80]	; (8000ad4 <HAL_ADC_MspInit+0xc4>)
 8000a84:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a8a:	4b12      	ldr	r3, [pc, #72]	; (8000ad4 <HAL_ADC_MspInit+0xc4>)
 8000a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a92:	60fb      	str	r3, [r7, #12]
 8000a94:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a96:	4b0f      	ldr	r3, [pc, #60]	; (8000ad4 <HAL_ADC_MspInit+0xc4>)
 8000a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9a:	4a0e      	ldr	r2, [pc, #56]	; (8000ad4 <HAL_ADC_MspInit+0xc4>)
 8000a9c:	f043 0301 	orr.w	r3, r3, #1
 8000aa0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aa2:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <HAL_ADC_MspInit+0xc4>)
 8000aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa6:	f003 0301 	and.w	r3, r3, #1
 8000aaa:	60bb      	str	r3, [r7, #8]
 8000aac:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000aae:	2380      	movs	r3, #128	; 0x80
 8000ab0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ab2:	230b      	movs	r3, #11
 8000ab4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aba:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000abe:	4619      	mov	r1, r3
 8000ac0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ac4:	f001 fec6 	bl	8002854 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ac8:	bf00      	nop
 8000aca:	3778      	adds	r7, #120	; 0x78
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	50040000 	.word	0x50040000
 8000ad4:	40021000 	.word	0x40021000

08000ad8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b08a      	sub	sp, #40	; 0x28
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae0:	f107 0314 	add.w	r3, r7, #20
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
 8000aee:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a19      	ldr	r2, [pc, #100]	; (8000b5c <HAL_DAC_MspInit+0x84>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d12c      	bne.n	8000b54 <HAL_DAC_MspInit+0x7c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000afa:	4b19      	ldr	r3, [pc, #100]	; (8000b60 <HAL_DAC_MspInit+0x88>)
 8000afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000afe:	4a18      	ldr	r2, [pc, #96]	; (8000b60 <HAL_DAC_MspInit+0x88>)
 8000b00:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000b04:	6593      	str	r3, [r2, #88]	; 0x58
 8000b06:	4b16      	ldr	r3, [pc, #88]	; (8000b60 <HAL_DAC_MspInit+0x88>)
 8000b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000b0e:	613b      	str	r3, [r7, #16]
 8000b10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b12:	4b13      	ldr	r3, [pc, #76]	; (8000b60 <HAL_DAC_MspInit+0x88>)
 8000b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b16:	4a12      	ldr	r2, [pc, #72]	; (8000b60 <HAL_DAC_MspInit+0x88>)
 8000b18:	f043 0301 	orr.w	r3, r3, #1
 8000b1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b1e:	4b10      	ldr	r3, [pc, #64]	; (8000b60 <HAL_DAC_MspInit+0x88>)
 8000b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000b2a:	2310      	movs	r3, #16
 8000b2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b2e:	2303      	movs	r3, #3
 8000b30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b36:	f107 0314 	add.w	r3, r7, #20
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b40:	f001 fe88 	bl	8002854 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000b44:	2200      	movs	r2, #0
 8000b46:	2100      	movs	r1, #0
 8000b48:	2036      	movs	r0, #54	; 0x36
 8000b4a:	f001 fc24 	bl	8002396 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b4e:	2036      	movs	r0, #54	; 0x36
 8000b50:	f001 fc3d 	bl	80023ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000b54:	bf00      	nop
 8000b56:	3728      	adds	r7, #40	; 0x28
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	40007400 	.word	0x40007400
 8000b60:	40021000 	.word	0x40021000

08000b64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a0d      	ldr	r2, [pc, #52]	; (8000ba8 <HAL_TIM_Base_MspInit+0x44>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d113      	bne.n	8000b9e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000b76:	4b0d      	ldr	r3, [pc, #52]	; (8000bac <HAL_TIM_Base_MspInit+0x48>)
 8000b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b7a:	4a0c      	ldr	r2, [pc, #48]	; (8000bac <HAL_TIM_Base_MspInit+0x48>)
 8000b7c:	f043 0310 	orr.w	r3, r3, #16
 8000b80:	6593      	str	r3, [r2, #88]	; 0x58
 8000b82:	4b0a      	ldr	r3, [pc, #40]	; (8000bac <HAL_TIM_Base_MspInit+0x48>)
 8000b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b86:	f003 0310 	and.w	r3, r3, #16
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	2100      	movs	r1, #0
 8000b92:	2036      	movs	r0, #54	; 0x36
 8000b94:	f001 fbff 	bl	8002396 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b98:	2036      	movs	r0, #54	; 0x36
 8000b9a:	f001 fc18 	bl	80023ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000b9e:	bf00      	nop
 8000ba0:	3710      	adds	r7, #16
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40001000 	.word	0x40001000
 8000bac:	40021000 	.word	0x40021000

08000bb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b09e      	sub	sp, #120	; 0x78
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]
 8000bc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bc8:	f107 0310 	add.w	r3, r7, #16
 8000bcc:	2254      	movs	r2, #84	; 0x54
 8000bce:	2100      	movs	r1, #0
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f004 f95d 	bl	8004e90 <memset>
  if(huart->Instance==USART2)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4a28      	ldr	r2, [pc, #160]	; (8000c7c <HAL_UART_MspInit+0xcc>)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d148      	bne.n	8000c72 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000be0:	2302      	movs	r3, #2
 8000be2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000be4:	2300      	movs	r3, #0
 8000be6:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000be8:	f107 0310 	add.w	r3, r7, #16
 8000bec:	4618      	mov	r0, r3
 8000bee:	f002 fe5f 	bl	80038b0 <HAL_RCCEx_PeriphCLKConfig>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000bf8:	f7ff fee0 	bl	80009bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bfc:	4b20      	ldr	r3, [pc, #128]	; (8000c80 <HAL_UART_MspInit+0xd0>)
 8000bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c00:	4a1f      	ldr	r2, [pc, #124]	; (8000c80 <HAL_UART_MspInit+0xd0>)
 8000c02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c06:	6593      	str	r3, [r2, #88]	; 0x58
 8000c08:	4b1d      	ldr	r3, [pc, #116]	; (8000c80 <HAL_UART_MspInit+0xd0>)
 8000c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c10:	60fb      	str	r3, [r7, #12]
 8000c12:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c14:	4b1a      	ldr	r3, [pc, #104]	; (8000c80 <HAL_UART_MspInit+0xd0>)
 8000c16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c18:	4a19      	ldr	r2, [pc, #100]	; (8000c80 <HAL_UART_MspInit+0xd0>)
 8000c1a:	f043 0301 	orr.w	r3, r3, #1
 8000c1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c20:	4b17      	ldr	r3, [pc, #92]	; (8000c80 <HAL_UART_MspInit+0xd0>)
 8000c22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c24:	f003 0301 	and.w	r3, r3, #1
 8000c28:	60bb      	str	r3, [r7, #8]
 8000c2a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000c2c:	2304      	movs	r3, #4
 8000c2e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c30:	2302      	movs	r3, #2
 8000c32:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c38:	2303      	movs	r3, #3
 8000c3a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c3c:	2307      	movs	r3, #7
 8000c3e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000c40:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000c44:	4619      	mov	r1, r3
 8000c46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c4a:	f001 fe03 	bl	8002854 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000c4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c52:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c54:	2302      	movs	r3, #2
 8000c56:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5c:	2303      	movs	r3, #3
 8000c5e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000c60:	2303      	movs	r3, #3
 8000c62:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000c64:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000c68:	4619      	mov	r1, r3
 8000c6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c6e:	f001 fdf1 	bl	8002854 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c72:	bf00      	nop
 8000c74:	3778      	adds	r7, #120	; 0x78
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40004400 	.word	0x40004400
 8000c80:	40021000 	.word	0x40021000

08000c84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c88:	e7fe      	b.n	8000c88 <NMI_Handler+0x4>

08000c8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c8e:	e7fe      	b.n	8000c8e <HardFault_Handler+0x4>

08000c90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c94:	e7fe      	b.n	8000c94 <MemManage_Handler+0x4>

08000c96 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c9a:	e7fe      	b.n	8000c9a <BusFault_Handler+0x4>

08000c9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca0:	e7fe      	b.n	8000ca0 <UsageFault_Handler+0x4>

08000ca2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr

08000cb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr

08000cbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr

08000ccc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd0:	f000 f8d6 	bl	8000e80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cd4:	bf00      	nop
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000cdc:	4803      	ldr	r0, [pc, #12]	; (8000cec <TIM6_DAC_IRQHandler+0x14>)
 8000cde:	f003 f98b 	bl	8003ff8 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8000ce2:	4803      	ldr	r0, [pc, #12]	; (8000cf0 <TIM6_DAC_IRQHandler+0x18>)
 8000ce4:	f001 fbfc 	bl	80024e0 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ce8:	bf00      	nop
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	200000f0 	.word	0x200000f0
 8000cf0:	200000dc 	.word	0x200000dc

08000cf4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b086      	sub	sp, #24
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cfc:	4a14      	ldr	r2, [pc, #80]	; (8000d50 <_sbrk+0x5c>)
 8000cfe:	4b15      	ldr	r3, [pc, #84]	; (8000d54 <_sbrk+0x60>)
 8000d00:	1ad3      	subs	r3, r2, r3
 8000d02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d08:	4b13      	ldr	r3, [pc, #76]	; (8000d58 <_sbrk+0x64>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d102      	bne.n	8000d16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d10:	4b11      	ldr	r3, [pc, #68]	; (8000d58 <_sbrk+0x64>)
 8000d12:	4a12      	ldr	r2, [pc, #72]	; (8000d5c <_sbrk+0x68>)
 8000d14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d16:	4b10      	ldr	r3, [pc, #64]	; (8000d58 <_sbrk+0x64>)
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4413      	add	r3, r2
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	429a      	cmp	r2, r3
 8000d22:	d207      	bcs.n	8000d34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d24:	f004 f8bc 	bl	8004ea0 <__errno>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	220c      	movs	r2, #12
 8000d2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d32:	e009      	b.n	8000d48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d34:	4b08      	ldr	r3, [pc, #32]	; (8000d58 <_sbrk+0x64>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d3a:	4b07      	ldr	r3, [pc, #28]	; (8000d58 <_sbrk+0x64>)
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4413      	add	r3, r2
 8000d42:	4a05      	ldr	r2, [pc, #20]	; (8000d58 <_sbrk+0x64>)
 8000d44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d46:	68fb      	ldr	r3, [r7, #12]
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3718      	adds	r7, #24
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	20010000 	.word	0x20010000
 8000d54:	00000400 	.word	0x00000400
 8000d58:	200001c4 	.word	0x200001c4
 8000d5c:	20000318 	.word	0x20000318

08000d60 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d64:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <SystemInit+0x20>)
 8000d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d6a:	4a05      	ldr	r2, [pc, #20]	; (8000d80 <SystemInit+0x20>)
 8000d6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	e000ed00 	.word	0xe000ed00

08000d84 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dbc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d88:	f7ff ffea 	bl	8000d60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d8c:	480c      	ldr	r0, [pc, #48]	; (8000dc0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d8e:	490d      	ldr	r1, [pc, #52]	; (8000dc4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d90:	4a0d      	ldr	r2, [pc, #52]	; (8000dc8 <LoopForever+0xe>)
  movs r3, #0
 8000d92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d94:	e002      	b.n	8000d9c <LoopCopyDataInit>

08000d96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d9a:	3304      	adds	r3, #4

08000d9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000da0:	d3f9      	bcc.n	8000d96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000da2:	4a0a      	ldr	r2, [pc, #40]	; (8000dcc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000da4:	4c0a      	ldr	r4, [pc, #40]	; (8000dd0 <LoopForever+0x16>)
  movs r3, #0
 8000da6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000da8:	e001      	b.n	8000dae <LoopFillZerobss>

08000daa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000daa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dac:	3204      	adds	r2, #4

08000dae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000db0:	d3fb      	bcc.n	8000daa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000db2:	f004 f87b 	bl	8004eac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000db6:	f7ff fbd9 	bl	800056c <main>

08000dba <LoopForever>:

LoopForever:
    b LoopForever
 8000dba:	e7fe      	b.n	8000dba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000dbc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000dc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dc4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000dc8:	08005848 	.word	0x08005848
  ldr r2, =_sbss
 8000dcc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000dd0:	20000314 	.word	0x20000314

08000dd4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000dd4:	e7fe      	b.n	8000dd4 <ADC1_IRQHandler>

08000dd6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	b082      	sub	sp, #8
 8000dda:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de0:	2003      	movs	r0, #3
 8000de2:	f001 facd 	bl	8002380 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000de6:	2000      	movs	r0, #0
 8000de8:	f000 f80e 	bl	8000e08 <HAL_InitTick>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d002      	beq.n	8000df8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
 8000df4:	71fb      	strb	r3, [r7, #7]
 8000df6:	e001      	b.n	8000dfc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000df8:	f7ff fde6 	bl	80009c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000dfc:	79fb      	ldrb	r3, [r7, #7]
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
	...

08000e08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e10:	2300      	movs	r3, #0
 8000e12:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e14:	4b17      	ldr	r3, [pc, #92]	; (8000e74 <HAL_InitTick+0x6c>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d023      	beq.n	8000e64 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e1c:	4b16      	ldr	r3, [pc, #88]	; (8000e78 <HAL_InitTick+0x70>)
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	4b14      	ldr	r3, [pc, #80]	; (8000e74 <HAL_InitTick+0x6c>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	4619      	mov	r1, r3
 8000e26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e32:	4618      	mov	r0, r3
 8000e34:	f001 fad9 	bl	80023ea <HAL_SYSTICK_Config>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d10f      	bne.n	8000e5e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2b0f      	cmp	r3, #15
 8000e42:	d809      	bhi.n	8000e58 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e44:	2200      	movs	r2, #0
 8000e46:	6879      	ldr	r1, [r7, #4]
 8000e48:	f04f 30ff 	mov.w	r0, #4294967295
 8000e4c:	f001 faa3 	bl	8002396 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e50:	4a0a      	ldr	r2, [pc, #40]	; (8000e7c <HAL_InitTick+0x74>)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6013      	str	r3, [r2, #0]
 8000e56:	e007      	b.n	8000e68 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	73fb      	strb	r3, [r7, #15]
 8000e5c:	e004      	b.n	8000e68 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	73fb      	strb	r3, [r7, #15]
 8000e62:	e001      	b.n	8000e68 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e64:	2301      	movs	r3, #1
 8000e66:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3710      	adds	r7, #16
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	20000008 	.word	0x20000008
 8000e78:	20000000 	.word	0x20000000
 8000e7c:	20000004 	.word	0x20000004

08000e80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e84:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <HAL_IncTick+0x20>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	461a      	mov	r2, r3
 8000e8a:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <HAL_IncTick+0x24>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4413      	add	r3, r2
 8000e90:	4a04      	ldr	r2, [pc, #16]	; (8000ea4 <HAL_IncTick+0x24>)
 8000e92:	6013      	str	r3, [r2, #0]
}
 8000e94:	bf00      	nop
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	20000008 	.word	0x20000008
 8000ea4:	200001c8 	.word	0x200001c8

08000ea8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  return uwTick;
 8000eac:	4b03      	ldr	r3, [pc, #12]	; (8000ebc <HAL_GetTick+0x14>)
 8000eae:	681b      	ldr	r3, [r3, #0]
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	200001c8 	.word	0x200001c8

08000ec0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ec8:	f7ff ffee 	bl	8000ea8 <HAL_GetTick>
 8000ecc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ed8:	d005      	beq.n	8000ee6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000eda:	4b0a      	ldr	r3, [pc, #40]	; (8000f04 <HAL_Delay+0x44>)
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	461a      	mov	r2, r3
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ee6:	bf00      	nop
 8000ee8:	f7ff ffde 	bl	8000ea8 <HAL_GetTick>
 8000eec:	4602      	mov	r2, r0
 8000eee:	68bb      	ldr	r3, [r7, #8]
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	68fa      	ldr	r2, [r7, #12]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d8f7      	bhi.n	8000ee8 <HAL_Delay+0x28>
  {
  }
}
 8000ef8:	bf00      	nop
 8000efa:	bf00      	nop
 8000efc:	3710      	adds	r7, #16
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20000008 	.word	0x20000008

08000f08 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	689b      	ldr	r3, [r3, #8]
 8000f16:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	431a      	orrs	r2, r3
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	609a      	str	r2, [r3, #8]
}
 8000f22:	bf00      	nop
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr

08000f2e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	b083      	sub	sp, #12
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]
 8000f36:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	689b      	ldr	r3, [r3, #8]
 8000f3c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	431a      	orrs	r2, r3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	609a      	str	r2, [r3, #8]
}
 8000f48:	bf00      	nop
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	689b      	ldr	r3, [r3, #8]
 8000f60:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b087      	sub	sp, #28
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	60f8      	str	r0, [r7, #12]
 8000f78:	60b9      	str	r1, [r7, #8]
 8000f7a:	607a      	str	r2, [r7, #4]
 8000f7c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	3360      	adds	r3, #96	; 0x60
 8000f82:	461a      	mov	r2, r3
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	4413      	add	r3, r2
 8000f8a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	4b08      	ldr	r3, [pc, #32]	; (8000fb4 <LL_ADC_SetOffset+0x44>)
 8000f92:	4013      	ands	r3, r2
 8000f94:	687a      	ldr	r2, [r7, #4]
 8000f96:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000f9a:	683a      	ldr	r2, [r7, #0]
 8000f9c:	430a      	orrs	r2, r1
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000fa8:	bf00      	nop
 8000faa:	371c      	adds	r7, #28
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	03fff000 	.word	0x03fff000

08000fb8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	3360      	adds	r3, #96	; 0x60
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	4413      	add	r3, r2
 8000fce:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3714      	adds	r7, #20
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b087      	sub	sp, #28
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	3360      	adds	r3, #96	; 0x60
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	4413      	add	r3, r2
 8000ffc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	431a      	orrs	r2, r3
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800100e:	bf00      	nop
 8001010:	371c      	adds	r7, #28
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr

0800101a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800101a:	b480      	push	{r7}
 800101c:	b087      	sub	sp, #28
 800101e:	af00      	add	r7, sp, #0
 8001020:	60f8      	str	r0, [r7, #12]
 8001022:	60b9      	str	r1, [r7, #8]
 8001024:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	3330      	adds	r3, #48	; 0x30
 800102a:	461a      	mov	r2, r3
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	0a1b      	lsrs	r3, r3, #8
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	f003 030c 	and.w	r3, r3, #12
 8001036:	4413      	add	r3, r2
 8001038:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	f003 031f 	and.w	r3, r3, #31
 8001044:	211f      	movs	r1, #31
 8001046:	fa01 f303 	lsl.w	r3, r1, r3
 800104a:	43db      	mvns	r3, r3
 800104c:	401a      	ands	r2, r3
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	0e9b      	lsrs	r3, r3, #26
 8001052:	f003 011f 	and.w	r1, r3, #31
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	f003 031f 	and.w	r3, r3, #31
 800105c:	fa01 f303 	lsl.w	r3, r1, r3
 8001060:	431a      	orrs	r2, r3
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001066:	bf00      	nop
 8001068:	371c      	adds	r7, #28
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr

08001072 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001072:	b480      	push	{r7}
 8001074:	b087      	sub	sp, #28
 8001076:	af00      	add	r7, sp, #0
 8001078:	60f8      	str	r0, [r7, #12]
 800107a:	60b9      	str	r1, [r7, #8]
 800107c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	3314      	adds	r3, #20
 8001082:	461a      	mov	r2, r3
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	0e5b      	lsrs	r3, r3, #25
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	f003 0304 	and.w	r3, r3, #4
 800108e:	4413      	add	r3, r2
 8001090:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	0d1b      	lsrs	r3, r3, #20
 800109a:	f003 031f 	and.w	r3, r3, #31
 800109e:	2107      	movs	r1, #7
 80010a0:	fa01 f303 	lsl.w	r3, r1, r3
 80010a4:	43db      	mvns	r3, r3
 80010a6:	401a      	ands	r2, r3
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	0d1b      	lsrs	r3, r3, #20
 80010ac:	f003 031f 	and.w	r3, r3, #31
 80010b0:	6879      	ldr	r1, [r7, #4]
 80010b2:	fa01 f303 	lsl.w	r3, r1, r3
 80010b6:	431a      	orrs	r2, r3
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80010bc:	bf00      	nop
 80010be:	371c      	adds	r7, #28
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b085      	sub	sp, #20
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80010e0:	43db      	mvns	r3, r3
 80010e2:	401a      	ands	r2, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f003 0318 	and.w	r3, r3, #24
 80010ea:	4908      	ldr	r1, [pc, #32]	; (800110c <LL_ADC_SetChannelSingleDiff+0x44>)
 80010ec:	40d9      	lsrs	r1, r3
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	400b      	ands	r3, r1
 80010f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80010f6:	431a      	orrs	r2, r3
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80010fe:	bf00      	nop
 8001100:	3714      	adds	r7, #20
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	0007ffff 	.word	0x0007ffff

08001110 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001120:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001124:	687a      	ldr	r2, [r7, #4]
 8001126:	6093      	str	r3, [r2, #8]
}
 8001128:	bf00      	nop
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001144:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001148:	d101      	bne.n	800114e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800114a:	2301      	movs	r3, #1
 800114c:	e000      	b.n	8001150 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800114e:	2300      	movs	r3, #0
}
 8001150:	4618      	mov	r0, r3
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr

0800115c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800116c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001170:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001178:	bf00      	nop
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr

08001184 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001194:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001198:	d101      	bne.n	800119e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800119a:	2301      	movs	r3, #1
 800119c:	e000      	b.n	80011a0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800119e:	2300      	movs	r3, #0
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80011bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011c0:	f043 0201 	orr.w	r2, r3, #1
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80011c8:	bf00      	nop
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr

080011d4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80011e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011e8:	f043 0202 	orr.w	r2, r3, #2
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80011f0:	bf00      	nop
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	f003 0301 	and.w	r3, r3, #1
 800120c:	2b01      	cmp	r3, #1
 800120e:	d101      	bne.n	8001214 <LL_ADC_IsEnabled+0x18>
 8001210:	2301      	movs	r3, #1
 8001212:	e000      	b.n	8001216 <LL_ADC_IsEnabled+0x1a>
 8001214:	2300      	movs	r3, #0
}
 8001216:	4618      	mov	r0, r3
 8001218:	370c      	adds	r7, #12
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr

08001222 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001222:	b480      	push	{r7}
 8001224:	b083      	sub	sp, #12
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	f003 0302 	and.w	r3, r3, #2
 8001232:	2b02      	cmp	r3, #2
 8001234:	d101      	bne.n	800123a <LL_ADC_IsDisableOngoing+0x18>
 8001236:	2301      	movs	r3, #1
 8001238:	e000      	b.n	800123c <LL_ADC_IsDisableOngoing+0x1a>
 800123a:	2300      	movs	r3, #0
}
 800123c:	4618      	mov	r0, r3
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr

08001248 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001258:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800125c:	f043 0204 	orr.w	r2, r3, #4
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001264:	bf00      	nop
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001280:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001284:	f043 0210 	orr.w	r2, r3, #16
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800128c:	bf00      	nop
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	f003 0304 	and.w	r3, r3, #4
 80012a8:	2b04      	cmp	r3, #4
 80012aa:	d101      	bne.n	80012b0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80012ac:	2301      	movs	r3, #1
 80012ae:	e000      	b.n	80012b2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80012b0:	2300      	movs	r3, #0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr

080012be <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80012be:	b480      	push	{r7}
 80012c0:	b083      	sub	sp, #12
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80012ce:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012d2:	f043 0220 	orr.w	r2, r3, #32
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80012da:	bf00      	nop
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr

080012e6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80012e6:	b480      	push	{r7}
 80012e8:	b083      	sub	sp, #12
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	f003 0308 	and.w	r3, r3, #8
 80012f6:	2b08      	cmp	r3, #8
 80012f8:	d101      	bne.n	80012fe <LL_ADC_INJ_IsConversionOngoing+0x18>
 80012fa:	2301      	movs	r3, #1
 80012fc:	e000      	b.n	8001300 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80012fe:	2300      	movs	r3, #0
}
 8001300:	4618      	mov	r0, r3
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr

0800130c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b088      	sub	sp, #32
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001314:	2300      	movs	r3, #0
 8001316:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001318:	2300      	movs	r3, #0
 800131a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d101      	bne.n	8001326 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e126      	b.n	8001574 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	691b      	ldr	r3, [r3, #16]
 800132a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001330:	2b00      	cmp	r3, #0
 8001332:	d109      	bne.n	8001348 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f7ff fb6b 	bl	8000a10 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2200      	movs	r2, #0
 800133e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2200      	movs	r2, #0
 8001344:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff fef1 	bl	8001134 <LL_ADC_IsDeepPowerDownEnabled>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d004      	beq.n	8001362 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff fed7 	bl	8001110 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff ff0c 	bl	8001184 <LL_ADC_IsInternalRegulatorEnabled>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d115      	bne.n	800139e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff fef0 	bl	800115c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800137c:	4b7f      	ldr	r3, [pc, #508]	; (800157c <HAL_ADC_Init+0x270>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	099b      	lsrs	r3, r3, #6
 8001382:	4a7f      	ldr	r2, [pc, #508]	; (8001580 <HAL_ADC_Init+0x274>)
 8001384:	fba2 2303 	umull	r2, r3, r2, r3
 8001388:	099b      	lsrs	r3, r3, #6
 800138a:	3301      	adds	r3, #1
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001390:	e002      	b.n	8001398 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	3b01      	subs	r3, #1
 8001396:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d1f9      	bne.n	8001392 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff feee 	bl	8001184 <LL_ADC_IsInternalRegulatorEnabled>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d10d      	bne.n	80013ca <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013b2:	f043 0210 	orr.w	r2, r3, #16
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013be:	f043 0201 	orr.w	r2, r3, #1
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff ff62 	bl	8001298 <LL_ADC_REG_IsConversionOngoing>
 80013d4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013da:	f003 0310 	and.w	r3, r3, #16
 80013de:	2b00      	cmp	r3, #0
 80013e0:	f040 80bf 	bne.w	8001562 <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	f040 80bb 	bne.w	8001562 <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013f0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80013f4:	f043 0202 	orr.w	r2, r3, #2
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff fefb 	bl	80011fc <LL_ADC_IsEnabled>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d10b      	bne.n	8001424 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800140c:	485d      	ldr	r0, [pc, #372]	; (8001584 <HAL_ADC_Init+0x278>)
 800140e:	f7ff fef5 	bl	80011fc <LL_ADC_IsEnabled>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d105      	bne.n	8001424 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	4619      	mov	r1, r3
 800141e:	485a      	ldr	r0, [pc, #360]	; (8001588 <HAL_ADC_Init+0x27c>)
 8001420:	f7ff fd72 	bl	8000f08 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	7e5b      	ldrb	r3, [r3, #25]
 8001428:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800142e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001434:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800143a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001442:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001444:	4313      	orrs	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800144e:	2b01      	cmp	r3, #1
 8001450:	d106      	bne.n	8001460 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001456:	3b01      	subs	r3, #1
 8001458:	045b      	lsls	r3, r3, #17
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	4313      	orrs	r3, r2
 800145e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001464:	2b00      	cmp	r3, #0
 8001466:	d009      	beq.n	800147c <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800146c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001474:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001476:	69ba      	ldr	r2, [r7, #24]
 8001478:	4313      	orrs	r3, r2
 800147a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	68da      	ldr	r2, [r3, #12]
 8001482:	4b42      	ldr	r3, [pc, #264]	; (800158c <HAL_ADC_Init+0x280>)
 8001484:	4013      	ands	r3, r2
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	6812      	ldr	r2, [r2, #0]
 800148a:	69b9      	ldr	r1, [r7, #24]
 800148c:	430b      	orrs	r3, r1
 800148e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff ff26 	bl	80012e6 <LL_ADC_INJ_IsConversionOngoing>
 800149a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d13d      	bne.n	800151e <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d13a      	bne.n	800151e <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80014ac:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80014b4:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80014b6:	4313      	orrs	r3, r2
 80014b8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80014c4:	f023 0302 	bic.w	r3, r3, #2
 80014c8:	687a      	ldr	r2, [r7, #4]
 80014ca:	6812      	ldr	r2, [r2, #0]
 80014cc:	69b9      	ldr	r1, [r7, #24]
 80014ce:	430b      	orrs	r3, r1
 80014d0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d118      	bne.n	800150e <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	691b      	ldr	r3, [r3, #16]
 80014e2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80014e6:	f023 0304 	bic.w	r3, r3, #4
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80014f2:	4311      	orrs	r1, r2
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80014f8:	4311      	orrs	r1, r2
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80014fe:	430a      	orrs	r2, r1
 8001500:	431a      	orrs	r2, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f042 0201 	orr.w	r2, r2, #1
 800150a:	611a      	str	r2, [r3, #16]
 800150c:	e007      	b.n	800151e <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	691a      	ldr	r2, [r3, #16]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f022 0201 	bic.w	r2, r2, #1
 800151c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	691b      	ldr	r3, [r3, #16]
 8001522:	2b01      	cmp	r3, #1
 8001524:	d10c      	bne.n	8001540 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152c:	f023 010f 	bic.w	r1, r3, #15
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	69db      	ldr	r3, [r3, #28]
 8001534:	1e5a      	subs	r2, r3, #1
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	430a      	orrs	r2, r1
 800153c:	631a      	str	r2, [r3, #48]	; 0x30
 800153e:	e007      	b.n	8001550 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f022 020f 	bic.w	r2, r2, #15
 800154e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001554:	f023 0303 	bic.w	r3, r3, #3
 8001558:	f043 0201 	orr.w	r2, r3, #1
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	655a      	str	r2, [r3, #84]	; 0x54
 8001560:	e007      	b.n	8001572 <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001566:	f043 0210 	orr.w	r2, r3, #16
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001572:	7ffb      	ldrb	r3, [r7, #31]
}
 8001574:	4618      	mov	r0, r3
 8001576:	3720      	adds	r7, #32
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	20000000 	.word	0x20000000
 8001580:	053e2d63 	.word	0x053e2d63
 8001584:	50040000 	.word	0x50040000
 8001588:	50040300 	.word	0x50040300
 800158c:	fff0c007 	.word	0xfff0c007

08001590 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff fe7b 	bl	8001298 <LL_ADC_REG_IsConversionOngoing>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d14f      	bne.n	8001648 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d101      	bne.n	80015b6 <HAL_ADC_Start+0x26>
 80015b2:	2302      	movs	r3, #2
 80015b4:	e04b      	b.n	800164e <HAL_ADC_Start+0xbe>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2201      	movs	r2, #1
 80015ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f000 fd28 	bl	8002014 <ADC_Enable>
 80015c4:	4603      	mov	r3, r0
 80015c6:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80015c8:	7bfb      	ldrb	r3, [r7, #15]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d137      	bne.n	800163e <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015d2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80015d6:	f023 0301 	bic.w	r3, r3, #1
 80015da:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015ee:	d106      	bne.n	80015fe <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f4:	f023 0206 	bic.w	r2, r3, #6
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	659a      	str	r2, [r3, #88]	; 0x58
 80015fc:	e002      	b.n	8001604 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2200      	movs	r2, #0
 8001602:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	221c      	movs	r2, #28
 800160a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2200      	movs	r2, #0
 8001610:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	68db      	ldr	r3, [r3, #12]
 800161a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d007      	beq.n	8001632 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001626:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800162a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff fe06 	bl	8001248 <LL_ADC_REG_StartConversion>
 800163c:	e006      	b.n	800164c <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2200      	movs	r2, #0
 8001642:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001646:	e001      	b.n	800164c <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001648:	2302      	movs	r3, #2
 800164a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 800164c:	7bfb      	ldrb	r3, [r7, #15]
}
 800164e:	4618      	mov	r0, r3
 8001650:	3710      	adds	r7, #16
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001656:	b580      	push	{r7, lr}
 8001658:	b084      	sub	sp, #16
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001664:	2b01      	cmp	r3, #1
 8001666:	d101      	bne.n	800166c <HAL_ADC_Stop+0x16>
 8001668:	2302      	movs	r3, #2
 800166a:	e023      	b.n	80016b4 <HAL_ADC_Stop+0x5e>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2201      	movs	r2, #1
 8001670:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001674:	2103      	movs	r1, #3
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f000 fc10 	bl	8001e9c <ADC_ConversionStop>
 800167c:	4603      	mov	r3, r0
 800167e:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001680:	7bfb      	ldrb	r3, [r7, #15]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d111      	bne.n	80016aa <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f000 fd4a 	bl	8002120 <ADC_Disable>
 800168c:	4603      	mov	r3, r0
 800168e:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001690:	7bfb      	ldrb	r3, [r7, #15]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d109      	bne.n	80016aa <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800169a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800169e:	f023 0301 	bic.w	r3, r3, #1
 80016a2:	f043 0201 	orr.w	r2, r3, #1
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2200      	movs	r2, #0
 80016ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80016b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3710      	adds	r7, #16
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
	...

080016d8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b0b6      	sub	sp, #216	; 0xd8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016e2:	2300      	movs	r3, #0
 80016e4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80016e8:	2300      	movs	r3, #0
 80016ea:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d101      	bne.n	80016fa <HAL_ADC_ConfigChannel+0x22>
 80016f6:	2302      	movs	r3, #2
 80016f8:	e3bb      	b.n	8001e72 <HAL_ADC_ConfigChannel+0x79a>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2201      	movs	r2, #1
 80016fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4618      	mov	r0, r3
 8001708:	f7ff fdc6 	bl	8001298 <LL_ADC_REG_IsConversionOngoing>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	f040 83a0 	bne.w	8001e54 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	2b05      	cmp	r3, #5
 8001722:	d824      	bhi.n	800176e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	3b02      	subs	r3, #2
 800172a:	2b03      	cmp	r3, #3
 800172c:	d81b      	bhi.n	8001766 <HAL_ADC_ConfigChannel+0x8e>
 800172e:	a201      	add	r2, pc, #4	; (adr r2, 8001734 <HAL_ADC_ConfigChannel+0x5c>)
 8001730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001734:	08001745 	.word	0x08001745
 8001738:	0800174d 	.word	0x0800174d
 800173c:	08001755 	.word	0x08001755
 8001740:	0800175d 	.word	0x0800175d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001744:	230c      	movs	r3, #12
 8001746:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800174a:	e010      	b.n	800176e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 800174c:	2312      	movs	r3, #18
 800174e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001752:	e00c      	b.n	800176e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001754:	2318      	movs	r3, #24
 8001756:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800175a:	e008      	b.n	800176e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 800175c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001760:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001764:	e003      	b.n	800176e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001766:	2306      	movs	r3, #6
 8001768:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800176c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6818      	ldr	r0, [r3, #0]
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	461a      	mov	r2, r3
 8001778:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800177c:	f7ff fc4d 	bl	800101a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff fd87 	bl	8001298 <LL_ADC_REG_IsConversionOngoing>
 800178a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4618      	mov	r0, r3
 8001794:	f7ff fda7 	bl	80012e6 <LL_ADC_INJ_IsConversionOngoing>
 8001798:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800179c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	f040 81a4 	bne.w	8001aee <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80017a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	f040 819f 	bne.w	8001aee <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6818      	ldr	r0, [r3, #0]
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	6819      	ldr	r1, [r3, #0]
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	461a      	mov	r2, r3
 80017be:	f7ff fc58 	bl	8001072 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	695a      	ldr	r2, [r3, #20]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	08db      	lsrs	r3, r3, #3
 80017ce:	f003 0303 	and.w	r3, r3, #3
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	691b      	ldr	r3, [r3, #16]
 80017e0:	2b04      	cmp	r3, #4
 80017e2:	d00a      	beq.n	80017fa <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6818      	ldr	r0, [r3, #0]
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	6919      	ldr	r1, [r3, #16]
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80017f4:	f7ff fbbc 	bl	8000f70 <LL_ADC_SetOffset>
 80017f8:	e179      	b.n	8001aee <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	2100      	movs	r1, #0
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff fbd9 	bl	8000fb8 <LL_ADC_GetOffsetChannel>
 8001806:	4603      	mov	r3, r0
 8001808:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800180c:	2b00      	cmp	r3, #0
 800180e:	d10a      	bne.n	8001826 <HAL_ADC_ConfigChannel+0x14e>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2100      	movs	r1, #0
 8001816:	4618      	mov	r0, r3
 8001818:	f7ff fbce 	bl	8000fb8 <LL_ADC_GetOffsetChannel>
 800181c:	4603      	mov	r3, r0
 800181e:	0e9b      	lsrs	r3, r3, #26
 8001820:	f003 021f 	and.w	r2, r3, #31
 8001824:	e01e      	b.n	8001864 <HAL_ADC_ConfigChannel+0x18c>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	2100      	movs	r1, #0
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff fbc3 	bl	8000fb8 <LL_ADC_GetOffsetChannel>
 8001832:	4603      	mov	r3, r0
 8001834:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001838:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800183c:	fa93 f3a3 	rbit	r3, r3
 8001840:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001844:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001848:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800184c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001850:	2b00      	cmp	r3, #0
 8001852:	d101      	bne.n	8001858 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8001854:	2320      	movs	r3, #32
 8001856:	e004      	b.n	8001862 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8001858:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800185c:	fab3 f383 	clz	r3, r3
 8001860:	b2db      	uxtb	r3, r3
 8001862:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800186c:	2b00      	cmp	r3, #0
 800186e:	d105      	bne.n	800187c <HAL_ADC_ConfigChannel+0x1a4>
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	0e9b      	lsrs	r3, r3, #26
 8001876:	f003 031f 	and.w	r3, r3, #31
 800187a:	e018      	b.n	80018ae <HAL_ADC_ConfigChannel+0x1d6>
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001884:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001888:	fa93 f3a3 	rbit	r3, r3
 800188c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8001890:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001894:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8001898:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d101      	bne.n	80018a4 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80018a0:	2320      	movs	r3, #32
 80018a2:	e004      	b.n	80018ae <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80018a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80018a8:	fab3 f383 	clz	r3, r3
 80018ac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d106      	bne.n	80018c0 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	2200      	movs	r2, #0
 80018b8:	2100      	movs	r1, #0
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7ff fb92 	bl	8000fe4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2101      	movs	r1, #1
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7ff fb76 	bl	8000fb8 <LL_ADC_GetOffsetChannel>
 80018cc:	4603      	mov	r3, r0
 80018ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d10a      	bne.n	80018ec <HAL_ADC_ConfigChannel+0x214>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	2101      	movs	r1, #1
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff fb6b 	bl	8000fb8 <LL_ADC_GetOffsetChannel>
 80018e2:	4603      	mov	r3, r0
 80018e4:	0e9b      	lsrs	r3, r3, #26
 80018e6:	f003 021f 	and.w	r2, r3, #31
 80018ea:	e01e      	b.n	800192a <HAL_ADC_ConfigChannel+0x252>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2101      	movs	r1, #1
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff fb60 	bl	8000fb8 <LL_ADC_GetOffsetChannel>
 80018f8:	4603      	mov	r3, r0
 80018fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001902:	fa93 f3a3 	rbit	r3, r3
 8001906:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800190a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800190e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8001912:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001916:	2b00      	cmp	r3, #0
 8001918:	d101      	bne.n	800191e <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800191a:	2320      	movs	r3, #32
 800191c:	e004      	b.n	8001928 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800191e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001922:	fab3 f383 	clz	r3, r3
 8001926:	b2db      	uxtb	r3, r3
 8001928:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001932:	2b00      	cmp	r3, #0
 8001934:	d105      	bne.n	8001942 <HAL_ADC_ConfigChannel+0x26a>
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	0e9b      	lsrs	r3, r3, #26
 800193c:	f003 031f 	and.w	r3, r3, #31
 8001940:	e018      	b.n	8001974 <HAL_ADC_ConfigChannel+0x29c>
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800194a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800194e:	fa93 f3a3 	rbit	r3, r3
 8001952:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8001956:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800195a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800195e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001962:	2b00      	cmp	r3, #0
 8001964:	d101      	bne.n	800196a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8001966:	2320      	movs	r3, #32
 8001968:	e004      	b.n	8001974 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800196a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800196e:	fab3 f383 	clz	r3, r3
 8001972:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001974:	429a      	cmp	r2, r3
 8001976:	d106      	bne.n	8001986 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2200      	movs	r2, #0
 800197e:	2101      	movs	r1, #1
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff fb2f 	bl	8000fe4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	2102      	movs	r1, #2
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff fb13 	bl	8000fb8 <LL_ADC_GetOffsetChannel>
 8001992:	4603      	mov	r3, r0
 8001994:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001998:	2b00      	cmp	r3, #0
 800199a:	d10a      	bne.n	80019b2 <HAL_ADC_ConfigChannel+0x2da>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2102      	movs	r1, #2
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7ff fb08 	bl	8000fb8 <LL_ADC_GetOffsetChannel>
 80019a8:	4603      	mov	r3, r0
 80019aa:	0e9b      	lsrs	r3, r3, #26
 80019ac:	f003 021f 	and.w	r2, r3, #31
 80019b0:	e01e      	b.n	80019f0 <HAL_ADC_ConfigChannel+0x318>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2102      	movs	r1, #2
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff fafd 	bl	8000fb8 <LL_ADC_GetOffsetChannel>
 80019be:	4603      	mov	r3, r0
 80019c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80019c8:	fa93 f3a3 	rbit	r3, r3
 80019cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80019d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80019d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80019d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d101      	bne.n	80019e4 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80019e0:	2320      	movs	r3, #32
 80019e2:	e004      	b.n	80019ee <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80019e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80019e8:	fab3 f383 	clz	r3, r3
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d105      	bne.n	8001a08 <HAL_ADC_ConfigChannel+0x330>
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	0e9b      	lsrs	r3, r3, #26
 8001a02:	f003 031f 	and.w	r3, r3, #31
 8001a06:	e014      	b.n	8001a32 <HAL_ADC_ConfigChannel+0x35a>
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a0e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001a10:	fa93 f3a3 	rbit	r3, r3
 8001a14:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8001a16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a18:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8001a1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d101      	bne.n	8001a28 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8001a24:	2320      	movs	r3, #32
 8001a26:	e004      	b.n	8001a32 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8001a28:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001a2c:	fab3 f383 	clz	r3, r3
 8001a30:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d106      	bne.n	8001a44 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	2102      	movs	r1, #2
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7ff fad0 	bl	8000fe4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2103      	movs	r1, #3
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7ff fab4 	bl	8000fb8 <LL_ADC_GetOffsetChannel>
 8001a50:	4603      	mov	r3, r0
 8001a52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d10a      	bne.n	8001a70 <HAL_ADC_ConfigChannel+0x398>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2103      	movs	r1, #3
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff faa9 	bl	8000fb8 <LL_ADC_GetOffsetChannel>
 8001a66:	4603      	mov	r3, r0
 8001a68:	0e9b      	lsrs	r3, r3, #26
 8001a6a:	f003 021f 	and.w	r2, r3, #31
 8001a6e:	e017      	b.n	8001aa0 <HAL_ADC_ConfigChannel+0x3c8>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2103      	movs	r1, #3
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff fa9e 	bl	8000fb8 <LL_ADC_GetOffsetChannel>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001a82:	fa93 f3a3 	rbit	r3, r3
 8001a86:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001a88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a8a:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8001a8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d101      	bne.n	8001a96 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8001a92:	2320      	movs	r3, #32
 8001a94:	e003      	b.n	8001a9e <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8001a96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a98:	fab3 f383 	clz	r3, r3
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d105      	bne.n	8001ab8 <HAL_ADC_ConfigChannel+0x3e0>
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	0e9b      	lsrs	r3, r3, #26
 8001ab2:	f003 031f 	and.w	r3, r3, #31
 8001ab6:	e011      	b.n	8001adc <HAL_ADC_ConfigChannel+0x404>
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001abe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001ac0:	fa93 f3a3 	rbit	r3, r3
 8001ac4:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8001ac6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ac8:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8001aca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d101      	bne.n	8001ad4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001ad0:	2320      	movs	r3, #32
 8001ad2:	e003      	b.n	8001adc <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001ad4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ad6:	fab3 f383 	clz	r3, r3
 8001ada:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d106      	bne.n	8001aee <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	2103      	movs	r1, #3
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7ff fa7b 	bl	8000fe4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff fb82 	bl	80011fc <LL_ADC_IsEnabled>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f040 8140 	bne.w	8001d80 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6818      	ldr	r0, [r3, #0]
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	6819      	ldr	r1, [r3, #0]
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	f7ff fadb 	bl	80010c8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	68db      	ldr	r3, [r3, #12]
 8001b16:	4a8f      	ldr	r2, [pc, #572]	; (8001d54 <HAL_ADC_ConfigChannel+0x67c>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	f040 8131 	bne.w	8001d80 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d10b      	bne.n	8001b46 <HAL_ADC_ConfigChannel+0x46e>
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	0e9b      	lsrs	r3, r3, #26
 8001b34:	3301      	adds	r3, #1
 8001b36:	f003 031f 	and.w	r3, r3, #31
 8001b3a:	2b09      	cmp	r3, #9
 8001b3c:	bf94      	ite	ls
 8001b3e:	2301      	movls	r3, #1
 8001b40:	2300      	movhi	r3, #0
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	e019      	b.n	8001b7a <HAL_ADC_ConfigChannel+0x4a2>
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b4e:	fa93 f3a3 	rbit	r3, r3
 8001b52:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001b54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b56:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8001b58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d101      	bne.n	8001b62 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8001b5e:	2320      	movs	r3, #32
 8001b60:	e003      	b.n	8001b6a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8001b62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b64:	fab3 f383 	clz	r3, r3
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	f003 031f 	and.w	r3, r3, #31
 8001b70:	2b09      	cmp	r3, #9
 8001b72:	bf94      	ite	ls
 8001b74:	2301      	movls	r3, #1
 8001b76:	2300      	movhi	r3, #0
 8001b78:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d079      	beq.n	8001c72 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d107      	bne.n	8001b9a <HAL_ADC_ConfigChannel+0x4c2>
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	0e9b      	lsrs	r3, r3, #26
 8001b90:	3301      	adds	r3, #1
 8001b92:	069b      	lsls	r3, r3, #26
 8001b94:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b98:	e015      	b.n	8001bc6 <HAL_ADC_ConfigChannel+0x4ee>
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ba2:	fa93 f3a3 	rbit	r3, r3
 8001ba6:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8001ba8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001baa:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8001bac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d101      	bne.n	8001bb6 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8001bb2:	2320      	movs	r3, #32
 8001bb4:	e003      	b.n	8001bbe <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8001bb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001bb8:	fab3 f383 	clz	r3, r3
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	069b      	lsls	r3, r3, #26
 8001bc2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d109      	bne.n	8001be6 <HAL_ADC_ConfigChannel+0x50e>
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	0e9b      	lsrs	r3, r3, #26
 8001bd8:	3301      	adds	r3, #1
 8001bda:	f003 031f 	and.w	r3, r3, #31
 8001bde:	2101      	movs	r1, #1
 8001be0:	fa01 f303 	lsl.w	r3, r1, r3
 8001be4:	e017      	b.n	8001c16 <HAL_ADC_ConfigChannel+0x53e>
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bee:	fa93 f3a3 	rbit	r3, r3
 8001bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001bf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001bf6:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8001bf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d101      	bne.n	8001c02 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8001bfe:	2320      	movs	r3, #32
 8001c00:	e003      	b.n	8001c0a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8001c02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c04:	fab3 f383 	clz	r3, r3
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	f003 031f 	and.w	r3, r3, #31
 8001c10:	2101      	movs	r1, #1
 8001c12:	fa01 f303 	lsl.w	r3, r1, r3
 8001c16:	ea42 0103 	orr.w	r1, r2, r3
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d10a      	bne.n	8001c3c <HAL_ADC_ConfigChannel+0x564>
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	0e9b      	lsrs	r3, r3, #26
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	f003 021f 	and.w	r2, r3, #31
 8001c32:	4613      	mov	r3, r2
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	4413      	add	r3, r2
 8001c38:	051b      	lsls	r3, r3, #20
 8001c3a:	e018      	b.n	8001c6e <HAL_ADC_ConfigChannel+0x596>
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c44:	fa93 f3a3 	rbit	r3, r3
 8001c48:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8001c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c4c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8001c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d101      	bne.n	8001c58 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8001c54:	2320      	movs	r3, #32
 8001c56:	e003      	b.n	8001c60 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8001c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c5a:	fab3 f383 	clz	r3, r3
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	3301      	adds	r3, #1
 8001c62:	f003 021f 	and.w	r2, r3, #31
 8001c66:	4613      	mov	r3, r2
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	4413      	add	r3, r2
 8001c6c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c6e:	430b      	orrs	r3, r1
 8001c70:	e081      	b.n	8001d76 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d107      	bne.n	8001c8e <HAL_ADC_ConfigChannel+0x5b6>
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	0e9b      	lsrs	r3, r3, #26
 8001c84:	3301      	adds	r3, #1
 8001c86:	069b      	lsls	r3, r3, #26
 8001c88:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c8c:	e015      	b.n	8001cba <HAL_ADC_ConfigChannel+0x5e2>
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c96:	fa93 f3a3 	rbit	r3, r3
 8001c9a:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8001ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d101      	bne.n	8001caa <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8001ca6:	2320      	movs	r3, #32
 8001ca8:	e003      	b.n	8001cb2 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8001caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cac:	fab3 f383 	clz	r3, r3
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	069b      	lsls	r3, r3, #26
 8001cb6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d109      	bne.n	8001cda <HAL_ADC_ConfigChannel+0x602>
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	0e9b      	lsrs	r3, r3, #26
 8001ccc:	3301      	adds	r3, #1
 8001cce:	f003 031f 	and.w	r3, r3, #31
 8001cd2:	2101      	movs	r1, #1
 8001cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd8:	e017      	b.n	8001d0a <HAL_ADC_ConfigChannel+0x632>
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	fa93 f3a3 	rbit	r3, r3
 8001ce6:	61bb      	str	r3, [r7, #24]
  return result;
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001cec:	6a3b      	ldr	r3, [r7, #32]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d101      	bne.n	8001cf6 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8001cf2:	2320      	movs	r3, #32
 8001cf4:	e003      	b.n	8001cfe <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8001cf6:	6a3b      	ldr	r3, [r7, #32]
 8001cf8:	fab3 f383 	clz	r3, r3
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	3301      	adds	r3, #1
 8001d00:	f003 031f 	and.w	r3, r3, #31
 8001d04:	2101      	movs	r1, #1
 8001d06:	fa01 f303 	lsl.w	r3, r1, r3
 8001d0a:	ea42 0103 	orr.w	r1, r2, r3
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d10d      	bne.n	8001d36 <HAL_ADC_ConfigChannel+0x65e>
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	0e9b      	lsrs	r3, r3, #26
 8001d20:	3301      	adds	r3, #1
 8001d22:	f003 021f 	and.w	r2, r3, #31
 8001d26:	4613      	mov	r3, r2
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	4413      	add	r3, r2
 8001d2c:	3b1e      	subs	r3, #30
 8001d2e:	051b      	lsls	r3, r3, #20
 8001d30:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d34:	e01e      	b.n	8001d74 <HAL_ADC_ConfigChannel+0x69c>
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	fa93 f3a3 	rbit	r3, r3
 8001d42:	60fb      	str	r3, [r7, #12]
  return result;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d104      	bne.n	8001d58 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8001d4e:	2320      	movs	r3, #32
 8001d50:	e006      	b.n	8001d60 <HAL_ADC_ConfigChannel+0x688>
 8001d52:	bf00      	nop
 8001d54:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	fab3 f383 	clz	r3, r3
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	3301      	adds	r3, #1
 8001d62:	f003 021f 	and.w	r2, r3, #31
 8001d66:	4613      	mov	r3, r2
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	4413      	add	r3, r2
 8001d6c:	3b1e      	subs	r3, #30
 8001d6e:	051b      	lsls	r3, r3, #20
 8001d70:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d74:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001d76:	683a      	ldr	r2, [r7, #0]
 8001d78:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	f7ff f979 	bl	8001072 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	4b3d      	ldr	r3, [pc, #244]	; (8001e7c <HAL_ADC_ConfigChannel+0x7a4>)
 8001d86:	4013      	ands	r3, r2
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d06c      	beq.n	8001e66 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d8c:	483c      	ldr	r0, [pc, #240]	; (8001e80 <HAL_ADC_ConfigChannel+0x7a8>)
 8001d8e:	f7ff f8e1 	bl	8000f54 <LL_ADC_GetCommonPathInternalCh>
 8001d92:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a3a      	ldr	r2, [pc, #232]	; (8001e84 <HAL_ADC_ConfigChannel+0x7ac>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d127      	bne.n	8001df0 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001da0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001da4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d121      	bne.n	8001df0 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a35      	ldr	r2, [pc, #212]	; (8001e88 <HAL_ADC_ConfigChannel+0x7b0>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d157      	bne.n	8001e66 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001db6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001dba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	482f      	ldr	r0, [pc, #188]	; (8001e80 <HAL_ADC_ConfigChannel+0x7a8>)
 8001dc2:	f7ff f8b4 	bl	8000f2e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001dc6:	4b31      	ldr	r3, [pc, #196]	; (8001e8c <HAL_ADC_ConfigChannel+0x7b4>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	099b      	lsrs	r3, r3, #6
 8001dcc:	4a30      	ldr	r2, [pc, #192]	; (8001e90 <HAL_ADC_ConfigChannel+0x7b8>)
 8001dce:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd2:	099b      	lsrs	r3, r3, #6
 8001dd4:	1c5a      	adds	r2, r3, #1
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	4413      	add	r3, r2
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001de0:	e002      	b.n	8001de8 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	3b01      	subs	r3, #1
 8001de6:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d1f9      	bne.n	8001de2 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001dee:	e03a      	b.n	8001e66 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a27      	ldr	r2, [pc, #156]	; (8001e94 <HAL_ADC_ConfigChannel+0x7bc>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d113      	bne.n	8001e22 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001dfa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001dfe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d10d      	bne.n	8001e22 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a1f      	ldr	r2, [pc, #124]	; (8001e88 <HAL_ADC_ConfigChannel+0x7b0>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d12a      	bne.n	8001e66 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e10:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e18:	4619      	mov	r1, r3
 8001e1a:	4819      	ldr	r0, [pc, #100]	; (8001e80 <HAL_ADC_ConfigChannel+0x7a8>)
 8001e1c:	f7ff f887 	bl	8000f2e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001e20:	e021      	b.n	8001e66 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a1c      	ldr	r2, [pc, #112]	; (8001e98 <HAL_ADC_ConfigChannel+0x7c0>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d11c      	bne.n	8001e66 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001e2c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d116      	bne.n	8001e66 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a12      	ldr	r2, [pc, #72]	; (8001e88 <HAL_ADC_ConfigChannel+0x7b0>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d111      	bne.n	8001e66 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e42:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e46:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	480c      	ldr	r0, [pc, #48]	; (8001e80 <HAL_ADC_ConfigChannel+0x7a8>)
 8001e4e:	f7ff f86e 	bl	8000f2e <LL_ADC_SetCommonPathInternalCh>
 8001e52:	e008      	b.n	8001e66 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e58:	f043 0220 	orr.w	r2, r3, #32
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001e6e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	37d8      	adds	r7, #216	; 0xd8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	80080000 	.word	0x80080000
 8001e80:	50040300 	.word	0x50040300
 8001e84:	c7520000 	.word	0xc7520000
 8001e88:	50040000 	.word	0x50040000
 8001e8c:	20000000 	.word	0x20000000
 8001e90:	053e2d63 	.word	0x053e2d63
 8001e94:	cb840000 	.word	0xcb840000
 8001e98:	80000001 	.word	0x80000001

08001e9c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b088      	sub	sp, #32
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7ff f9f0 	bl	8001298 <LL_ADC_REG_IsConversionOngoing>
 8001eb8:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7ff fa11 	bl	80012e6 <LL_ADC_INJ_IsConversionOngoing>
 8001ec4:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d103      	bne.n	8001ed4 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	f000 8098 	beq.w	8002004 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d02a      	beq.n	8001f38 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	7e5b      	ldrb	r3, [r3, #25]
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d126      	bne.n	8001f38 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	7e1b      	ldrb	r3, [r3, #24]
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d122      	bne.n	8001f38 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8001ef6:	e014      	b.n	8001f22 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	4a45      	ldr	r2, [pc, #276]	; (8002010 <ADC_ConversionStop+0x174>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d90d      	bls.n	8001f1c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f04:	f043 0210 	orr.w	r2, r3, #16
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f10:	f043 0201 	orr.w	r2, r3, #1
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e074      	b.n	8002006 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	3301      	adds	r3, #1
 8001f20:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f2c:	2b40      	cmp	r3, #64	; 0x40
 8001f2e:	d1e3      	bne.n	8001ef8 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2240      	movs	r2, #64	; 0x40
 8001f36:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d014      	beq.n	8001f68 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7ff f9a8 	bl	8001298 <LL_ADC_REG_IsConversionOngoing>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d00c      	beq.n	8001f68 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7ff f965 	bl	8001222 <LL_ADC_IsDisableOngoing>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d104      	bne.n	8001f68 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7ff f984 	bl	8001270 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d014      	beq.n	8001f98 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7ff f9b7 	bl	80012e6 <LL_ADC_INJ_IsConversionOngoing>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d00c      	beq.n	8001f98 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7ff f94d 	bl	8001222 <LL_ADC_IsDisableOngoing>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d104      	bne.n	8001f98 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7ff f993 	bl	80012be <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d005      	beq.n	8001faa <ADC_ConversionStop+0x10e>
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	2b03      	cmp	r3, #3
 8001fa2:	d105      	bne.n	8001fb0 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8001fa4:	230c      	movs	r3, #12
 8001fa6:	617b      	str	r3, [r7, #20]
        break;
 8001fa8:	e005      	b.n	8001fb6 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8001faa:	2308      	movs	r3, #8
 8001fac:	617b      	str	r3, [r7, #20]
        break;
 8001fae:	e002      	b.n	8001fb6 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8001fb0:	2304      	movs	r3, #4
 8001fb2:	617b      	str	r3, [r7, #20]
        break;
 8001fb4:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8001fb6:	f7fe ff77 	bl	8000ea8 <HAL_GetTick>
 8001fba:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8001fbc:	e01b      	b.n	8001ff6 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001fbe:	f7fe ff73 	bl	8000ea8 <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	2b05      	cmp	r3, #5
 8001fca:	d914      	bls.n	8001ff6 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	689a      	ldr	r2, [r3, #8]
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d00d      	beq.n	8001ff6 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fde:	f043 0210 	orr.w	r2, r3, #16
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fea:	f043 0201 	orr.w	r2, r3, #1
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e007      	b.n	8002006 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	689a      	ldr	r2, [r3, #8]
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	4013      	ands	r3, r2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d1dc      	bne.n	8001fbe <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3720      	adds	r7, #32
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	a33fffff 	.word	0xa33fffff

08002014 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800201c:	2300      	movs	r3, #0
 800201e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4618      	mov	r0, r3
 8002026:	f7ff f8e9 	bl	80011fc <LL_ADC_IsEnabled>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d169      	bne.n	8002104 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	689a      	ldr	r2, [r3, #8]
 8002036:	4b36      	ldr	r3, [pc, #216]	; (8002110 <ADC_Enable+0xfc>)
 8002038:	4013      	ands	r3, r2
 800203a:	2b00      	cmp	r3, #0
 800203c:	d00d      	beq.n	800205a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002042:	f043 0210 	orr.w	r2, r3, #16
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800204e:	f043 0201 	orr.w	r2, r3, #1
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e055      	b.n	8002106 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4618      	mov	r0, r3
 8002060:	f7ff f8a4 	bl	80011ac <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002064:	482b      	ldr	r0, [pc, #172]	; (8002114 <ADC_Enable+0x100>)
 8002066:	f7fe ff75 	bl	8000f54 <LL_ADC_GetCommonPathInternalCh>
 800206a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800206c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002070:	2b00      	cmp	r3, #0
 8002072:	d013      	beq.n	800209c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002074:	4b28      	ldr	r3, [pc, #160]	; (8002118 <ADC_Enable+0x104>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	099b      	lsrs	r3, r3, #6
 800207a:	4a28      	ldr	r2, [pc, #160]	; (800211c <ADC_Enable+0x108>)
 800207c:	fba2 2303 	umull	r2, r3, r2, r3
 8002080:	099b      	lsrs	r3, r3, #6
 8002082:	1c5a      	adds	r2, r3, #1
 8002084:	4613      	mov	r3, r2
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	4413      	add	r3, r2
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800208e:	e002      	b.n	8002096 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	3b01      	subs	r3, #1
 8002094:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d1f9      	bne.n	8002090 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800209c:	f7fe ff04 	bl	8000ea8 <HAL_GetTick>
 80020a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80020a2:	e028      	b.n	80020f6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7ff f8a7 	bl	80011fc <LL_ADC_IsEnabled>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d104      	bne.n	80020be <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7ff f877 	bl	80011ac <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80020be:	f7fe fef3 	bl	8000ea8 <HAL_GetTick>
 80020c2:	4602      	mov	r2, r0
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d914      	bls.n	80020f6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d00d      	beq.n	80020f6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020de:	f043 0210 	orr.w	r2, r3, #16
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ea:	f043 0201 	orr.w	r2, r3, #1
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e007      	b.n	8002106 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0301 	and.w	r3, r3, #1
 8002100:	2b01      	cmp	r3, #1
 8002102:	d1cf      	bne.n	80020a4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3710      	adds	r7, #16
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	8000003f 	.word	0x8000003f
 8002114:	50040300 	.word	0x50040300
 8002118:	20000000 	.word	0x20000000
 800211c:	053e2d63 	.word	0x053e2d63

08002120 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4618      	mov	r0, r3
 800212e:	f7ff f878 	bl	8001222 <LL_ADC_IsDisableOngoing>
 8002132:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4618      	mov	r0, r3
 800213a:	f7ff f85f 	bl	80011fc <LL_ADC_IsEnabled>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d047      	beq.n	80021d4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d144      	bne.n	80021d4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f003 030d 	and.w	r3, r3, #13
 8002154:	2b01      	cmp	r3, #1
 8002156:	d10c      	bne.n	8002172 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4618      	mov	r0, r3
 800215e:	f7ff f839 	bl	80011d4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2203      	movs	r2, #3
 8002168:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800216a:	f7fe fe9d 	bl	8000ea8 <HAL_GetTick>
 800216e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002170:	e029      	b.n	80021c6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002176:	f043 0210 	orr.w	r2, r3, #16
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002182:	f043 0201 	orr.w	r2, r3, #1
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e023      	b.n	80021d6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800218e:	f7fe fe8b 	bl	8000ea8 <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	2b02      	cmp	r3, #2
 800219a:	d914      	bls.n	80021c6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d00d      	beq.n	80021c6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ae:	f043 0210 	orr.w	r2, r3, #16
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ba:	f043 0201 	orr.w	r2, r3, #1
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e007      	b.n	80021d6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	f003 0301 	and.w	r3, r3, #1
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d1dc      	bne.n	800218e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3710      	adds	r7, #16
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
	...

080021e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f003 0307 	and.w	r3, r3, #7
 80021ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021f0:	4b0c      	ldr	r3, [pc, #48]	; (8002224 <__NVIC_SetPriorityGrouping+0x44>)
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021f6:	68ba      	ldr	r2, [r7, #8]
 80021f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021fc:	4013      	ands	r3, r2
 80021fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002208:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800220c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002210:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002212:	4a04      	ldr	r2, [pc, #16]	; (8002224 <__NVIC_SetPriorityGrouping+0x44>)
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	60d3      	str	r3, [r2, #12]
}
 8002218:	bf00      	nop
 800221a:	3714      	adds	r7, #20
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr
 8002224:	e000ed00 	.word	0xe000ed00

08002228 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800222c:	4b04      	ldr	r3, [pc, #16]	; (8002240 <__NVIC_GetPriorityGrouping+0x18>)
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	0a1b      	lsrs	r3, r3, #8
 8002232:	f003 0307 	and.w	r3, r3, #7
}
 8002236:	4618      	mov	r0, r3
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr
 8002240:	e000ed00 	.word	0xe000ed00

08002244 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	4603      	mov	r3, r0
 800224c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800224e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002252:	2b00      	cmp	r3, #0
 8002254:	db0b      	blt.n	800226e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002256:	79fb      	ldrb	r3, [r7, #7]
 8002258:	f003 021f 	and.w	r2, r3, #31
 800225c:	4907      	ldr	r1, [pc, #28]	; (800227c <__NVIC_EnableIRQ+0x38>)
 800225e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002262:	095b      	lsrs	r3, r3, #5
 8002264:	2001      	movs	r0, #1
 8002266:	fa00 f202 	lsl.w	r2, r0, r2
 800226a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800226e:	bf00      	nop
 8002270:	370c      	adds	r7, #12
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	e000e100 	.word	0xe000e100

08002280 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	4603      	mov	r3, r0
 8002288:	6039      	str	r1, [r7, #0]
 800228a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800228c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002290:	2b00      	cmp	r3, #0
 8002292:	db0a      	blt.n	80022aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	b2da      	uxtb	r2, r3
 8002298:	490c      	ldr	r1, [pc, #48]	; (80022cc <__NVIC_SetPriority+0x4c>)
 800229a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800229e:	0112      	lsls	r2, r2, #4
 80022a0:	b2d2      	uxtb	r2, r2
 80022a2:	440b      	add	r3, r1
 80022a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022a8:	e00a      	b.n	80022c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	b2da      	uxtb	r2, r3
 80022ae:	4908      	ldr	r1, [pc, #32]	; (80022d0 <__NVIC_SetPriority+0x50>)
 80022b0:	79fb      	ldrb	r3, [r7, #7]
 80022b2:	f003 030f 	and.w	r3, r3, #15
 80022b6:	3b04      	subs	r3, #4
 80022b8:	0112      	lsls	r2, r2, #4
 80022ba:	b2d2      	uxtb	r2, r2
 80022bc:	440b      	add	r3, r1
 80022be:	761a      	strb	r2, [r3, #24]
}
 80022c0:	bf00      	nop
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr
 80022cc:	e000e100 	.word	0xe000e100
 80022d0:	e000ed00 	.word	0xe000ed00

080022d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b089      	sub	sp, #36	; 0x24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f003 0307 	and.w	r3, r3, #7
 80022e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	f1c3 0307 	rsb	r3, r3, #7
 80022ee:	2b04      	cmp	r3, #4
 80022f0:	bf28      	it	cs
 80022f2:	2304      	movcs	r3, #4
 80022f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	3304      	adds	r3, #4
 80022fa:	2b06      	cmp	r3, #6
 80022fc:	d902      	bls.n	8002304 <NVIC_EncodePriority+0x30>
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	3b03      	subs	r3, #3
 8002302:	e000      	b.n	8002306 <NVIC_EncodePriority+0x32>
 8002304:	2300      	movs	r3, #0
 8002306:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002308:	f04f 32ff 	mov.w	r2, #4294967295
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	43da      	mvns	r2, r3
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	401a      	ands	r2, r3
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800231c:	f04f 31ff 	mov.w	r1, #4294967295
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	fa01 f303 	lsl.w	r3, r1, r3
 8002326:	43d9      	mvns	r1, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800232c:	4313      	orrs	r3, r2
         );
}
 800232e:	4618      	mov	r0, r3
 8002330:	3724      	adds	r7, #36	; 0x24
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
	...

0800233c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	3b01      	subs	r3, #1
 8002348:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800234c:	d301      	bcc.n	8002352 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800234e:	2301      	movs	r3, #1
 8002350:	e00f      	b.n	8002372 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002352:	4a0a      	ldr	r2, [pc, #40]	; (800237c <SysTick_Config+0x40>)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	3b01      	subs	r3, #1
 8002358:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800235a:	210f      	movs	r1, #15
 800235c:	f04f 30ff 	mov.w	r0, #4294967295
 8002360:	f7ff ff8e 	bl	8002280 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002364:	4b05      	ldr	r3, [pc, #20]	; (800237c <SysTick_Config+0x40>)
 8002366:	2200      	movs	r2, #0
 8002368:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800236a:	4b04      	ldr	r3, [pc, #16]	; (800237c <SysTick_Config+0x40>)
 800236c:	2207      	movs	r2, #7
 800236e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	3708      	adds	r7, #8
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	e000e010 	.word	0xe000e010

08002380 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f7ff ff29 	bl	80021e0 <__NVIC_SetPriorityGrouping>
}
 800238e:	bf00      	nop
 8002390:	3708      	adds	r7, #8
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}

08002396 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002396:	b580      	push	{r7, lr}
 8002398:	b086      	sub	sp, #24
 800239a:	af00      	add	r7, sp, #0
 800239c:	4603      	mov	r3, r0
 800239e:	60b9      	str	r1, [r7, #8]
 80023a0:	607a      	str	r2, [r7, #4]
 80023a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80023a4:	2300      	movs	r3, #0
 80023a6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80023a8:	f7ff ff3e 	bl	8002228 <__NVIC_GetPriorityGrouping>
 80023ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	68b9      	ldr	r1, [r7, #8]
 80023b2:	6978      	ldr	r0, [r7, #20]
 80023b4:	f7ff ff8e 	bl	80022d4 <NVIC_EncodePriority>
 80023b8:	4602      	mov	r2, r0
 80023ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023be:	4611      	mov	r1, r2
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7ff ff5d 	bl	8002280 <__NVIC_SetPriority>
}
 80023c6:	bf00      	nop
 80023c8:	3718      	adds	r7, #24
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}

080023ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023ce:	b580      	push	{r7, lr}
 80023d0:	b082      	sub	sp, #8
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	4603      	mov	r3, r0
 80023d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023dc:	4618      	mov	r0, r3
 80023de:	f7ff ff31 	bl	8002244 <__NVIC_EnableIRQ>
}
 80023e2:	bf00      	nop
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b082      	sub	sp, #8
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f7ff ffa2 	bl	800233c <SysTick_Config>
 80023f8:	4603      	mov	r3, r0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b082      	sub	sp, #8
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d101      	bne.n	8002414 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e014      	b.n	800243e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	791b      	ldrb	r3, [r3, #4]
 8002418:	b2db      	uxtb	r3, r3
 800241a:	2b00      	cmp	r3, #0
 800241c:	d105      	bne.n	800242a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f7fe fb57 	bl	8000ad8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2202      	movs	r2, #2
 800242e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2200      	movs	r2, #0
 8002434:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2201      	movs	r2, #1
 800243a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800243c:	2300      	movs	r3, #0
}
 800243e:	4618      	mov	r0, r3
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}

08002446 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002446:	b480      	push	{r7}
 8002448:	b083      	sub	sp, #12
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
 800244e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	795b      	ldrb	r3, [r3, #5]
 8002454:	2b01      	cmp	r3, #1
 8002456:	d101      	bne.n	800245c <HAL_DAC_Start+0x16>
 8002458:	2302      	movs	r3, #2
 800245a:	e03b      	b.n	80024d4 <HAL_DAC_Start+0x8e>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2201      	movs	r2, #1
 8002460:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2202      	movs	r2, #2
 8002466:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	6819      	ldr	r1, [r3, #0]
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	f003 0310 	and.w	r3, r3, #16
 8002474:	2201      	movs	r2, #1
 8002476:	409a      	lsls	r2, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	430a      	orrs	r2, r1
 800247e:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d10f      	bne.n	80024a6 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8002490:	2b04      	cmp	r3, #4
 8002492:	d118      	bne.n	80024c6 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	685a      	ldr	r2, [r3, #4]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f042 0201 	orr.w	r2, r2, #1
 80024a2:	605a      	str	r2, [r3, #4]
 80024a4:	e00f      	b.n	80024c6 <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80024b0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80024b4:	d107      	bne.n	80024c6 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	685a      	ldr	r2, [r3, #4]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f042 0202 	orr.w	r2, r2, #2
 80024c4:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2201      	movs	r2, #1
 80024ca:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80024d2:	2300      	movs	r3, #0
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024f6:	d120      	bne.n	800253a <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002502:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002506:	d118      	bne.n	800253a <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2204      	movs	r2, #4
 800250c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	f043 0201 	orr.w	r2, r3, #1
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002522:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002532:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f000 f852 	bl	80025de <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002544:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002548:	d120      	bne.n	800258c <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002550:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002554:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002558:	d118      	bne.n	800258c <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2204      	movs	r2, #4
 800255e:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	691b      	ldr	r3, [r3, #16]
 8002564:	f043 0202 	orr.w	r2, r3, #2
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002574:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002584:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f000 f95a 	bl	8002840 <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 800258c:	bf00      	nop
 800258e:	3708      	adds	r7, #8
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002594:	b480      	push	{r7}
 8002596:	b087      	sub	sp, #28
 8002598:	af00      	add	r7, sp, #0
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	60b9      	str	r1, [r7, #8]
 800259e:	607a      	str	r2, [r7, #4]
 80025a0:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 80025a2:	2300      	movs	r3, #0
 80025a4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d105      	bne.n	80025be <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80025b2:	697a      	ldr	r2, [r7, #20]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	4413      	add	r3, r2
 80025b8:	3308      	adds	r3, #8
 80025ba:	617b      	str	r3, [r7, #20]
 80025bc:	e004      	b.n	80025c8 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80025be:	697a      	ldr	r2, [r7, #20]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	4413      	add	r3, r2
 80025c4:	3314      	adds	r3, #20
 80025c6:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	461a      	mov	r2, r3
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	371c      	adds	r7, #28
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr

080025de <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80025de:	b480      	push	{r7}
 80025e0:	b083      	sub	sp, #12
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80025e6:	bf00      	nop
 80025e8:	370c      	adds	r7, #12
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr

080025f2 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80025f2:	b580      	push	{r7, lr}
 80025f4:	b088      	sub	sp, #32
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	60f8      	str	r0, [r7, #12]
 80025fa:	60b9      	str	r1, [r7, #8]
 80025fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80025fe:	2300      	movs	r3, #0
 8002600:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	795b      	ldrb	r3, [r3, #5]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d101      	bne.n	800260e <HAL_DAC_ConfigChannel+0x1c>
 800260a:	2302      	movs	r3, #2
 800260c:	e114      	b.n	8002838 <HAL_DAC_ConfigChannel+0x246>
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2201      	movs	r2, #1
 8002612:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2202      	movs	r2, #2
 8002618:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2b04      	cmp	r3, #4
 8002620:	f040 8081 	bne.w	8002726 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002624:	f7fe fc40 	bl	8000ea8 <HAL_GetTick>
 8002628:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d140      	bne.n	80026b2 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002630:	e018      	b.n	8002664 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002632:	f7fe fc39 	bl	8000ea8 <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	2b01      	cmp	r3, #1
 800263e:	d911      	bls.n	8002664 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002646:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d00a      	beq.n	8002664 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	f043 0208 	orr.w	r2, r3, #8
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2203      	movs	r2, #3
 800265e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	e0e9      	b.n	8002838 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800266a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d1df      	bne.n	8002632 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8002672:	2001      	movs	r0, #1
 8002674:	f7fe fc24 	bl	8000ec0 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	68ba      	ldr	r2, [r7, #8]
 800267e:	6992      	ldr	r2, [r2, #24]
 8002680:	641a      	str	r2, [r3, #64]	; 0x40
 8002682:	e023      	b.n	80026cc <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002684:	f7fe fc10 	bl	8000ea8 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b01      	cmp	r3, #1
 8002690:	d90f      	bls.n	80026b2 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002698:	2b00      	cmp	r3, #0
 800269a:	da0a      	bge.n	80026b2 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	f043 0208 	orr.w	r2, r3, #8
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2203      	movs	r2, #3
 80026ac:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e0c2      	b.n	8002838 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	dbe3      	blt.n	8002684 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 80026bc:	2001      	movs	r0, #1
 80026be:	f7fe fbff 	bl	8000ec0 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	68ba      	ldr	r2, [r7, #8]
 80026c8:	6992      	ldr	r2, [r2, #24]
 80026ca:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f003 0310 	and.w	r3, r3, #16
 80026d8:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80026dc:	fa01 f303 	lsl.w	r3, r1, r3
 80026e0:	43db      	mvns	r3, r3
 80026e2:	ea02 0103 	and.w	r1, r2, r3
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	69da      	ldr	r2, [r3, #28]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f003 0310 	and.w	r3, r3, #16
 80026f0:	409a      	lsls	r2, r3
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	430a      	orrs	r2, r1
 80026f8:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f003 0310 	and.w	r3, r3, #16
 8002706:	21ff      	movs	r1, #255	; 0xff
 8002708:	fa01 f303 	lsl.w	r3, r1, r3
 800270c:	43db      	mvns	r3, r3
 800270e:	ea02 0103 	and.w	r1, r2, r3
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	6a1a      	ldr	r2, [r3, #32]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f003 0310 	and.w	r3, r3, #16
 800271c:	409a      	lsls	r2, r3
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	430a      	orrs	r2, r1
 8002724:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	2b01      	cmp	r3, #1
 800272c:	d11d      	bne.n	800276a <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002734:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f003 0310 	and.w	r3, r3, #16
 800273c:	221f      	movs	r2, #31
 800273e:	fa02 f303 	lsl.w	r3, r2, r3
 8002742:	43db      	mvns	r3, r3
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	4013      	ands	r3, r2
 8002748:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	695b      	ldr	r3, [r3, #20]
 800274e:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f003 0310 	and.w	r3, r3, #16
 8002756:	697a      	ldr	r2, [r7, #20]
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	4313      	orrs	r3, r2
 8002760:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	69ba      	ldr	r2, [r7, #24]
 8002768:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002770:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f003 0310 	and.w	r3, r3, #16
 8002778:	2207      	movs	r2, #7
 800277a:	fa02 f303 	lsl.w	r3, r2, r3
 800277e:	43db      	mvns	r3, r3
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	4013      	ands	r3, r2
 8002784:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	431a      	orrs	r2, r3
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	4313      	orrs	r3, r2
 8002796:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f003 0310 	and.w	r3, r3, #16
 800279e:	697a      	ldr	r2, [r7, #20]
 80027a0:	fa02 f303 	lsl.w	r3, r2, r3
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	69ba      	ldr	r2, [r7, #24]
 80027b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	6819      	ldr	r1, [r3, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f003 0310 	and.w	r3, r3, #16
 80027be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80027c2:	fa02 f303 	lsl.w	r3, r2, r3
 80027c6:	43da      	mvns	r2, r3
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	400a      	ands	r2, r1
 80027ce:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f003 0310 	and.w	r3, r3, #16
 80027de:	f640 72fc 	movw	r2, #4092	; 0xffc
 80027e2:	fa02 f303 	lsl.w	r3, r2, r3
 80027e6:	43db      	mvns	r3, r3
 80027e8:	69ba      	ldr	r2, [r7, #24]
 80027ea:	4013      	ands	r3, r2
 80027ec:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f003 0310 	and.w	r3, r3, #16
 80027fa:	697a      	ldr	r2, [r7, #20]
 80027fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	4313      	orrs	r3, r2
 8002804:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	6819      	ldr	r1, [r3, #0]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f003 0310 	and.w	r3, r3, #16
 800281a:	22c0      	movs	r2, #192	; 0xc0
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	43da      	mvns	r2, r3
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	400a      	ands	r2, r1
 8002828:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2201      	movs	r2, #1
 800282e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2200      	movs	r2, #0
 8002834:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002836:	2300      	movs	r3, #0
}
 8002838:	4618      	mov	r0, r3
 800283a:	3720      	adds	r7, #32
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8002848:	bf00      	nop
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002854:	b480      	push	{r7}
 8002856:	b087      	sub	sp, #28
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800285e:	2300      	movs	r3, #0
 8002860:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002862:	e148      	b.n	8002af6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	2101      	movs	r1, #1
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	fa01 f303 	lsl.w	r3, r1, r3
 8002870:	4013      	ands	r3, r2
 8002872:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2b00      	cmp	r3, #0
 8002878:	f000 813a 	beq.w	8002af0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f003 0303 	and.w	r3, r3, #3
 8002884:	2b01      	cmp	r3, #1
 8002886:	d005      	beq.n	8002894 <HAL_GPIO_Init+0x40>
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f003 0303 	and.w	r3, r3, #3
 8002890:	2b02      	cmp	r3, #2
 8002892:	d130      	bne.n	80028f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	2203      	movs	r2, #3
 80028a0:	fa02 f303 	lsl.w	r3, r2, r3
 80028a4:	43db      	mvns	r3, r3
 80028a6:	693a      	ldr	r2, [r7, #16]
 80028a8:	4013      	ands	r3, r2
 80028aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	68da      	ldr	r2, [r3, #12]
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	005b      	lsls	r3, r3, #1
 80028b4:	fa02 f303 	lsl.w	r3, r2, r3
 80028b8:	693a      	ldr	r2, [r7, #16]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	693a      	ldr	r2, [r7, #16]
 80028c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80028ca:	2201      	movs	r2, #1
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	fa02 f303 	lsl.w	r3, r2, r3
 80028d2:	43db      	mvns	r3, r3
 80028d4:	693a      	ldr	r2, [r7, #16]
 80028d6:	4013      	ands	r3, r2
 80028d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	091b      	lsrs	r3, r3, #4
 80028e0:	f003 0201 	and.w	r2, r3, #1
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ea:	693a      	ldr	r2, [r7, #16]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	693a      	ldr	r2, [r7, #16]
 80028f4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f003 0303 	and.w	r3, r3, #3
 80028fe:	2b03      	cmp	r3, #3
 8002900:	d017      	beq.n	8002932 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	2203      	movs	r2, #3
 800290e:	fa02 f303 	lsl.w	r3, r2, r3
 8002912:	43db      	mvns	r3, r3
 8002914:	693a      	ldr	r2, [r7, #16]
 8002916:	4013      	ands	r3, r2
 8002918:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	689a      	ldr	r2, [r3, #8]
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	005b      	lsls	r3, r3, #1
 8002922:	fa02 f303 	lsl.w	r3, r2, r3
 8002926:	693a      	ldr	r2, [r7, #16]
 8002928:	4313      	orrs	r3, r2
 800292a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	693a      	ldr	r2, [r7, #16]
 8002930:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f003 0303 	and.w	r3, r3, #3
 800293a:	2b02      	cmp	r3, #2
 800293c:	d123      	bne.n	8002986 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	08da      	lsrs	r2, r3, #3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	3208      	adds	r2, #8
 8002946:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800294a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	f003 0307 	and.w	r3, r3, #7
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	220f      	movs	r2, #15
 8002956:	fa02 f303 	lsl.w	r3, r2, r3
 800295a:	43db      	mvns	r3, r3
 800295c:	693a      	ldr	r2, [r7, #16]
 800295e:	4013      	ands	r3, r2
 8002960:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	691a      	ldr	r2, [r3, #16]
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	f003 0307 	and.w	r3, r3, #7
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	fa02 f303 	lsl.w	r3, r2, r3
 8002972:	693a      	ldr	r2, [r7, #16]
 8002974:	4313      	orrs	r3, r2
 8002976:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	08da      	lsrs	r2, r3, #3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	3208      	adds	r2, #8
 8002980:	6939      	ldr	r1, [r7, #16]
 8002982:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	005b      	lsls	r3, r3, #1
 8002990:	2203      	movs	r2, #3
 8002992:	fa02 f303 	lsl.w	r3, r2, r3
 8002996:	43db      	mvns	r3, r3
 8002998:	693a      	ldr	r2, [r7, #16]
 800299a:	4013      	ands	r3, r2
 800299c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f003 0203 	and.w	r2, r3, #3
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	fa02 f303 	lsl.w	r3, r2, r3
 80029ae:	693a      	ldr	r2, [r7, #16]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	693a      	ldr	r2, [r7, #16]
 80029b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	f000 8094 	beq.w	8002af0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029c8:	4b52      	ldr	r3, [pc, #328]	; (8002b14 <HAL_GPIO_Init+0x2c0>)
 80029ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029cc:	4a51      	ldr	r2, [pc, #324]	; (8002b14 <HAL_GPIO_Init+0x2c0>)
 80029ce:	f043 0301 	orr.w	r3, r3, #1
 80029d2:	6613      	str	r3, [r2, #96]	; 0x60
 80029d4:	4b4f      	ldr	r3, [pc, #316]	; (8002b14 <HAL_GPIO_Init+0x2c0>)
 80029d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029d8:	f003 0301 	and.w	r3, r3, #1
 80029dc:	60bb      	str	r3, [r7, #8]
 80029de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80029e0:	4a4d      	ldr	r2, [pc, #308]	; (8002b18 <HAL_GPIO_Init+0x2c4>)
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	089b      	lsrs	r3, r3, #2
 80029e6:	3302      	adds	r3, #2
 80029e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	f003 0303 	and.w	r3, r3, #3
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	220f      	movs	r2, #15
 80029f8:	fa02 f303 	lsl.w	r3, r2, r3
 80029fc:	43db      	mvns	r3, r3
 80029fe:	693a      	ldr	r2, [r7, #16]
 8002a00:	4013      	ands	r3, r2
 8002a02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002a0a:	d00d      	beq.n	8002a28 <HAL_GPIO_Init+0x1d4>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4a43      	ldr	r2, [pc, #268]	; (8002b1c <HAL_GPIO_Init+0x2c8>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d007      	beq.n	8002a24 <HAL_GPIO_Init+0x1d0>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4a42      	ldr	r2, [pc, #264]	; (8002b20 <HAL_GPIO_Init+0x2cc>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d101      	bne.n	8002a20 <HAL_GPIO_Init+0x1cc>
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	e004      	b.n	8002a2a <HAL_GPIO_Init+0x1d6>
 8002a20:	2307      	movs	r3, #7
 8002a22:	e002      	b.n	8002a2a <HAL_GPIO_Init+0x1d6>
 8002a24:	2301      	movs	r3, #1
 8002a26:	e000      	b.n	8002a2a <HAL_GPIO_Init+0x1d6>
 8002a28:	2300      	movs	r3, #0
 8002a2a:	697a      	ldr	r2, [r7, #20]
 8002a2c:	f002 0203 	and.w	r2, r2, #3
 8002a30:	0092      	lsls	r2, r2, #2
 8002a32:	4093      	lsls	r3, r2
 8002a34:	693a      	ldr	r2, [r7, #16]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a3a:	4937      	ldr	r1, [pc, #220]	; (8002b18 <HAL_GPIO_Init+0x2c4>)
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	089b      	lsrs	r3, r3, #2
 8002a40:	3302      	adds	r3, #2
 8002a42:	693a      	ldr	r2, [r7, #16]
 8002a44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a48:	4b36      	ldr	r3, [pc, #216]	; (8002b24 <HAL_GPIO_Init+0x2d0>)
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	43db      	mvns	r3, r3
 8002a52:	693a      	ldr	r2, [r7, #16]
 8002a54:	4013      	ands	r3, r2
 8002a56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d003      	beq.n	8002a6c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002a64:	693a      	ldr	r2, [r7, #16]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a6c:	4a2d      	ldr	r2, [pc, #180]	; (8002b24 <HAL_GPIO_Init+0x2d0>)
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002a72:	4b2c      	ldr	r3, [pc, #176]	; (8002b24 <HAL_GPIO_Init+0x2d0>)
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	43db      	mvns	r3, r3
 8002a7c:	693a      	ldr	r2, [r7, #16]
 8002a7e:	4013      	ands	r3, r2
 8002a80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d003      	beq.n	8002a96 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002a8e:	693a      	ldr	r2, [r7, #16]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a96:	4a23      	ldr	r2, [pc, #140]	; (8002b24 <HAL_GPIO_Init+0x2d0>)
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002a9c:	4b21      	ldr	r3, [pc, #132]	; (8002b24 <HAL_GPIO_Init+0x2d0>)
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	43db      	mvns	r3, r3
 8002aa6:	693a      	ldr	r2, [r7, #16]
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d003      	beq.n	8002ac0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002ab8:	693a      	ldr	r2, [r7, #16]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ac0:	4a18      	ldr	r2, [pc, #96]	; (8002b24 <HAL_GPIO_Init+0x2d0>)
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002ac6:	4b17      	ldr	r3, [pc, #92]	; (8002b24 <HAL_GPIO_Init+0x2d0>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	43db      	mvns	r3, r3
 8002ad0:	693a      	ldr	r2, [r7, #16]
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d003      	beq.n	8002aea <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002ae2:	693a      	ldr	r2, [r7, #16]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002aea:	4a0e      	ldr	r2, [pc, #56]	; (8002b24 <HAL_GPIO_Init+0x2d0>)
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	3301      	adds	r3, #1
 8002af4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	fa22 f303 	lsr.w	r3, r2, r3
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	f47f aeaf 	bne.w	8002864 <HAL_GPIO_Init+0x10>
  }
}
 8002b06:	bf00      	nop
 8002b08:	bf00      	nop
 8002b0a:	371c      	adds	r7, #28
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr
 8002b14:	40021000 	.word	0x40021000
 8002b18:	40010000 	.word	0x40010000
 8002b1c:	48000400 	.word	0x48000400
 8002b20:	48000800 	.word	0x48000800
 8002b24:	40010400 	.word	0x40010400

08002b28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	460b      	mov	r3, r1
 8002b32:	807b      	strh	r3, [r7, #2]
 8002b34:	4613      	mov	r3, r2
 8002b36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b38:	787b      	ldrb	r3, [r7, #1]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d003      	beq.n	8002b46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b3e:	887a      	ldrh	r2, [r7, #2]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b44:	e002      	b.n	8002b4c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b46:	887a      	ldrh	r2, [r7, #2]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b4c:	bf00      	nop
 8002b4e:	370c      	adds	r7, #12
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr

08002b58 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b5c:	4b05      	ldr	r3, [pc, #20]	; (8002b74 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a04      	ldr	r2, [pc, #16]	; (8002b74 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b66:	6013      	str	r3, [r2, #0]
}
 8002b68:	bf00      	nop
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	40007000 	.word	0x40007000

08002b78 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002b7c:	4b04      	ldr	r3, [pc, #16]	; (8002b90 <HAL_PWREx_GetVoltageRange+0x18>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	40007000 	.word	0x40007000

08002b94 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b085      	sub	sp, #20
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ba2:	d130      	bne.n	8002c06 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ba4:	4b23      	ldr	r3, [pc, #140]	; (8002c34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002bac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bb0:	d038      	beq.n	8002c24 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bb2:	4b20      	ldr	r3, [pc, #128]	; (8002c34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002bba:	4a1e      	ldr	r2, [pc, #120]	; (8002c34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bbc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bc0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002bc2:	4b1d      	ldr	r3, [pc, #116]	; (8002c38 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2232      	movs	r2, #50	; 0x32
 8002bc8:	fb02 f303 	mul.w	r3, r2, r3
 8002bcc:	4a1b      	ldr	r2, [pc, #108]	; (8002c3c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002bce:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd2:	0c9b      	lsrs	r3, r3, #18
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bd8:	e002      	b.n	8002be0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	3b01      	subs	r3, #1
 8002bde:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002be0:	4b14      	ldr	r3, [pc, #80]	; (8002c34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002be2:	695b      	ldr	r3, [r3, #20]
 8002be4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002be8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bec:	d102      	bne.n	8002bf4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d1f2      	bne.n	8002bda <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002bf4:	4b0f      	ldr	r3, [pc, #60]	; (8002c34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bf6:	695b      	ldr	r3, [r3, #20]
 8002bf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c00:	d110      	bne.n	8002c24 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e00f      	b.n	8002c26 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c06:	4b0b      	ldr	r3, [pc, #44]	; (8002c34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c12:	d007      	beq.n	8002c24 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002c14:	4b07      	ldr	r3, [pc, #28]	; (8002c34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c1c:	4a05      	ldr	r2, [pc, #20]	; (8002c34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c22:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3714      	adds	r7, #20
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	40007000 	.word	0x40007000
 8002c38:	20000000 	.word	0x20000000
 8002c3c:	431bde83 	.word	0x431bde83

08002c40 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b088      	sub	sp, #32
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d102      	bne.n	8002c54 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	f000 bc02 	b.w	8003458 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c54:	4b96      	ldr	r3, [pc, #600]	; (8002eb0 <HAL_RCC_OscConfig+0x270>)
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f003 030c 	and.w	r3, r3, #12
 8002c5c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c5e:	4b94      	ldr	r3, [pc, #592]	; (8002eb0 <HAL_RCC_OscConfig+0x270>)
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	f003 0303 	and.w	r3, r3, #3
 8002c66:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0310 	and.w	r3, r3, #16
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	f000 80e4 	beq.w	8002e3e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d007      	beq.n	8002c8c <HAL_RCC_OscConfig+0x4c>
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	2b0c      	cmp	r3, #12
 8002c80:	f040 808b 	bne.w	8002d9a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	f040 8087 	bne.w	8002d9a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c8c:	4b88      	ldr	r3, [pc, #544]	; (8002eb0 <HAL_RCC_OscConfig+0x270>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0302 	and.w	r3, r3, #2
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d005      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x64>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	699b      	ldr	r3, [r3, #24]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d101      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e3d9      	b.n	8003458 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6a1a      	ldr	r2, [r3, #32]
 8002ca8:	4b81      	ldr	r3, [pc, #516]	; (8002eb0 <HAL_RCC_OscConfig+0x270>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0308 	and.w	r3, r3, #8
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d004      	beq.n	8002cbe <HAL_RCC_OscConfig+0x7e>
 8002cb4:	4b7e      	ldr	r3, [pc, #504]	; (8002eb0 <HAL_RCC_OscConfig+0x270>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cbc:	e005      	b.n	8002cca <HAL_RCC_OscConfig+0x8a>
 8002cbe:	4b7c      	ldr	r3, [pc, #496]	; (8002eb0 <HAL_RCC_OscConfig+0x270>)
 8002cc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cc4:	091b      	lsrs	r3, r3, #4
 8002cc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d223      	bcs.n	8002d16 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a1b      	ldr	r3, [r3, #32]
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f000 fd8c 	bl	80037f0 <RCC_SetFlashLatencyFromMSIRange>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e3ba      	b.n	8003458 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ce2:	4b73      	ldr	r3, [pc, #460]	; (8002eb0 <HAL_RCC_OscConfig+0x270>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a72      	ldr	r2, [pc, #456]	; (8002eb0 <HAL_RCC_OscConfig+0x270>)
 8002ce8:	f043 0308 	orr.w	r3, r3, #8
 8002cec:	6013      	str	r3, [r2, #0]
 8002cee:	4b70      	ldr	r3, [pc, #448]	; (8002eb0 <HAL_RCC_OscConfig+0x270>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a1b      	ldr	r3, [r3, #32]
 8002cfa:	496d      	ldr	r1, [pc, #436]	; (8002eb0 <HAL_RCC_OscConfig+0x270>)
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d00:	4b6b      	ldr	r3, [pc, #428]	; (8002eb0 <HAL_RCC_OscConfig+0x270>)
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	69db      	ldr	r3, [r3, #28]
 8002d0c:	021b      	lsls	r3, r3, #8
 8002d0e:	4968      	ldr	r1, [pc, #416]	; (8002eb0 <HAL_RCC_OscConfig+0x270>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	604b      	str	r3, [r1, #4]
 8002d14:	e025      	b.n	8002d62 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d16:	4b66      	ldr	r3, [pc, #408]	; (8002eb0 <HAL_RCC_OscConfig+0x270>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a65      	ldr	r2, [pc, #404]	; (8002eb0 <HAL_RCC_OscConfig+0x270>)
 8002d1c:	f043 0308 	orr.w	r3, r3, #8
 8002d20:	6013      	str	r3, [r2, #0]
 8002d22:	4b63      	ldr	r3, [pc, #396]	; (8002eb0 <HAL_RCC_OscConfig+0x270>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a1b      	ldr	r3, [r3, #32]
 8002d2e:	4960      	ldr	r1, [pc, #384]	; (8002eb0 <HAL_RCC_OscConfig+0x270>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d34:	4b5e      	ldr	r3, [pc, #376]	; (8002eb0 <HAL_RCC_OscConfig+0x270>)
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	69db      	ldr	r3, [r3, #28]
 8002d40:	021b      	lsls	r3, r3, #8
 8002d42:	495b      	ldr	r1, [pc, #364]	; (8002eb0 <HAL_RCC_OscConfig+0x270>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d109      	bne.n	8002d62 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a1b      	ldr	r3, [r3, #32]
 8002d52:	4618      	mov	r0, r3
 8002d54:	f000 fd4c 	bl	80037f0 <RCC_SetFlashLatencyFromMSIRange>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e37a      	b.n	8003458 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d62:	f000 fc81 	bl	8003668 <HAL_RCC_GetSysClockFreq>
 8002d66:	4602      	mov	r2, r0
 8002d68:	4b51      	ldr	r3, [pc, #324]	; (8002eb0 <HAL_RCC_OscConfig+0x270>)
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	091b      	lsrs	r3, r3, #4
 8002d6e:	f003 030f 	and.w	r3, r3, #15
 8002d72:	4950      	ldr	r1, [pc, #320]	; (8002eb4 <HAL_RCC_OscConfig+0x274>)
 8002d74:	5ccb      	ldrb	r3, [r1, r3]
 8002d76:	f003 031f 	and.w	r3, r3, #31
 8002d7a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d7e:	4a4e      	ldr	r2, [pc, #312]	; (8002eb8 <HAL_RCC_OscConfig+0x278>)
 8002d80:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002d82:	4b4e      	ldr	r3, [pc, #312]	; (8002ebc <HAL_RCC_OscConfig+0x27c>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7fe f83e 	bl	8000e08 <HAL_InitTick>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002d90:	7bfb      	ldrb	r3, [r7, #15]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d052      	beq.n	8002e3c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002d96:	7bfb      	ldrb	r3, [r7, #15]
 8002d98:	e35e      	b.n	8003458 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	699b      	ldr	r3, [r3, #24]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d032      	beq.n	8002e08 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002da2:	4b43      	ldr	r3, [pc, #268]	; (8002eb0 <HAL_RCC_OscConfig+0x270>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a42      	ldr	r2, [pc, #264]	; (8002eb0 <HAL_RCC_OscConfig+0x270>)
 8002da8:	f043 0301 	orr.w	r3, r3, #1
 8002dac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002dae:	f7fe f87b 	bl	8000ea8 <HAL_GetTick>
 8002db2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002db4:	e008      	b.n	8002dc8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002db6:	f7fe f877 	bl	8000ea8 <HAL_GetTick>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d901      	bls.n	8002dc8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e347      	b.n	8003458 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002dc8:	4b39      	ldr	r3, [pc, #228]	; (8002eb0 <HAL_RCC_OscConfig+0x270>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0302 	and.w	r3, r3, #2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d0f0      	beq.n	8002db6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002dd4:	4b36      	ldr	r3, [pc, #216]	; (8002eb0 <HAL_RCC_OscConfig+0x270>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a35      	ldr	r2, [pc, #212]	; (8002eb0 <HAL_RCC_OscConfig+0x270>)
 8002dda:	f043 0308 	orr.w	r3, r3, #8
 8002dde:	6013      	str	r3, [r2, #0]
 8002de0:	4b33      	ldr	r3, [pc, #204]	; (8002eb0 <HAL_RCC_OscConfig+0x270>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a1b      	ldr	r3, [r3, #32]
 8002dec:	4930      	ldr	r1, [pc, #192]	; (8002eb0 <HAL_RCC_OscConfig+0x270>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002df2:	4b2f      	ldr	r3, [pc, #188]	; (8002eb0 <HAL_RCC_OscConfig+0x270>)
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	69db      	ldr	r3, [r3, #28]
 8002dfe:	021b      	lsls	r3, r3, #8
 8002e00:	492b      	ldr	r1, [pc, #172]	; (8002eb0 <HAL_RCC_OscConfig+0x270>)
 8002e02:	4313      	orrs	r3, r2
 8002e04:	604b      	str	r3, [r1, #4]
 8002e06:	e01a      	b.n	8002e3e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002e08:	4b29      	ldr	r3, [pc, #164]	; (8002eb0 <HAL_RCC_OscConfig+0x270>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a28      	ldr	r2, [pc, #160]	; (8002eb0 <HAL_RCC_OscConfig+0x270>)
 8002e0e:	f023 0301 	bic.w	r3, r3, #1
 8002e12:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e14:	f7fe f848 	bl	8000ea8 <HAL_GetTick>
 8002e18:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e1a:	e008      	b.n	8002e2e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e1c:	f7fe f844 	bl	8000ea8 <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d901      	bls.n	8002e2e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e314      	b.n	8003458 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e2e:	4b20      	ldr	r3, [pc, #128]	; (8002eb0 <HAL_RCC_OscConfig+0x270>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0302 	and.w	r3, r3, #2
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d1f0      	bne.n	8002e1c <HAL_RCC_OscConfig+0x1dc>
 8002e3a:	e000      	b.n	8002e3e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e3c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0301 	and.w	r3, r3, #1
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d073      	beq.n	8002f32 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	2b08      	cmp	r3, #8
 8002e4e:	d005      	beq.n	8002e5c <HAL_RCC_OscConfig+0x21c>
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	2b0c      	cmp	r3, #12
 8002e54:	d10e      	bne.n	8002e74 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	2b03      	cmp	r3, #3
 8002e5a:	d10b      	bne.n	8002e74 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e5c:	4b14      	ldr	r3, [pc, #80]	; (8002eb0 <HAL_RCC_OscConfig+0x270>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d063      	beq.n	8002f30 <HAL_RCC_OscConfig+0x2f0>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d15f      	bne.n	8002f30 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e2f1      	b.n	8003458 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e7c:	d106      	bne.n	8002e8c <HAL_RCC_OscConfig+0x24c>
 8002e7e:	4b0c      	ldr	r3, [pc, #48]	; (8002eb0 <HAL_RCC_OscConfig+0x270>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a0b      	ldr	r2, [pc, #44]	; (8002eb0 <HAL_RCC_OscConfig+0x270>)
 8002e84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e88:	6013      	str	r3, [r2, #0]
 8002e8a:	e025      	b.n	8002ed8 <HAL_RCC_OscConfig+0x298>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e94:	d114      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x280>
 8002e96:	4b06      	ldr	r3, [pc, #24]	; (8002eb0 <HAL_RCC_OscConfig+0x270>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a05      	ldr	r2, [pc, #20]	; (8002eb0 <HAL_RCC_OscConfig+0x270>)
 8002e9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ea0:	6013      	str	r3, [r2, #0]
 8002ea2:	4b03      	ldr	r3, [pc, #12]	; (8002eb0 <HAL_RCC_OscConfig+0x270>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a02      	ldr	r2, [pc, #8]	; (8002eb0 <HAL_RCC_OscConfig+0x270>)
 8002ea8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eac:	6013      	str	r3, [r2, #0]
 8002eae:	e013      	b.n	8002ed8 <HAL_RCC_OscConfig+0x298>
 8002eb0:	40021000 	.word	0x40021000
 8002eb4:	080057bc 	.word	0x080057bc
 8002eb8:	20000000 	.word	0x20000000
 8002ebc:	20000004 	.word	0x20000004
 8002ec0:	4ba0      	ldr	r3, [pc, #640]	; (8003144 <HAL_RCC_OscConfig+0x504>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a9f      	ldr	r2, [pc, #636]	; (8003144 <HAL_RCC_OscConfig+0x504>)
 8002ec6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eca:	6013      	str	r3, [r2, #0]
 8002ecc:	4b9d      	ldr	r3, [pc, #628]	; (8003144 <HAL_RCC_OscConfig+0x504>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a9c      	ldr	r2, [pc, #624]	; (8003144 <HAL_RCC_OscConfig+0x504>)
 8002ed2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ed6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d013      	beq.n	8002f08 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee0:	f7fd ffe2 	bl	8000ea8 <HAL_GetTick>
 8002ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ee6:	e008      	b.n	8002efa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ee8:	f7fd ffde 	bl	8000ea8 <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	2b64      	cmp	r3, #100	; 0x64
 8002ef4:	d901      	bls.n	8002efa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e2ae      	b.n	8003458 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002efa:	4b92      	ldr	r3, [pc, #584]	; (8003144 <HAL_RCC_OscConfig+0x504>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d0f0      	beq.n	8002ee8 <HAL_RCC_OscConfig+0x2a8>
 8002f06:	e014      	b.n	8002f32 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f08:	f7fd ffce 	bl	8000ea8 <HAL_GetTick>
 8002f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f0e:	e008      	b.n	8002f22 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f10:	f7fd ffca 	bl	8000ea8 <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	2b64      	cmp	r3, #100	; 0x64
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e29a      	b.n	8003458 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f22:	4b88      	ldr	r3, [pc, #544]	; (8003144 <HAL_RCC_OscConfig+0x504>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d1f0      	bne.n	8002f10 <HAL_RCC_OscConfig+0x2d0>
 8002f2e:	e000      	b.n	8002f32 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0302 	and.w	r3, r3, #2
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d060      	beq.n	8003000 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002f3e:	69bb      	ldr	r3, [r7, #24]
 8002f40:	2b04      	cmp	r3, #4
 8002f42:	d005      	beq.n	8002f50 <HAL_RCC_OscConfig+0x310>
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	2b0c      	cmp	r3, #12
 8002f48:	d119      	bne.n	8002f7e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d116      	bne.n	8002f7e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f50:	4b7c      	ldr	r3, [pc, #496]	; (8003144 <HAL_RCC_OscConfig+0x504>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d005      	beq.n	8002f68 <HAL_RCC_OscConfig+0x328>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d101      	bne.n	8002f68 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e277      	b.n	8003458 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f68:	4b76      	ldr	r3, [pc, #472]	; (8003144 <HAL_RCC_OscConfig+0x504>)
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	691b      	ldr	r3, [r3, #16]
 8002f74:	061b      	lsls	r3, r3, #24
 8002f76:	4973      	ldr	r1, [pc, #460]	; (8003144 <HAL_RCC_OscConfig+0x504>)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f7c:	e040      	b.n	8003000 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d023      	beq.n	8002fce <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f86:	4b6f      	ldr	r3, [pc, #444]	; (8003144 <HAL_RCC_OscConfig+0x504>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a6e      	ldr	r2, [pc, #440]	; (8003144 <HAL_RCC_OscConfig+0x504>)
 8002f8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f92:	f7fd ff89 	bl	8000ea8 <HAL_GetTick>
 8002f96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f98:	e008      	b.n	8002fac <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f9a:	f7fd ff85 	bl	8000ea8 <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d901      	bls.n	8002fac <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e255      	b.n	8003458 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fac:	4b65      	ldr	r3, [pc, #404]	; (8003144 <HAL_RCC_OscConfig+0x504>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d0f0      	beq.n	8002f9a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fb8:	4b62      	ldr	r3, [pc, #392]	; (8003144 <HAL_RCC_OscConfig+0x504>)
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	691b      	ldr	r3, [r3, #16]
 8002fc4:	061b      	lsls	r3, r3, #24
 8002fc6:	495f      	ldr	r1, [pc, #380]	; (8003144 <HAL_RCC_OscConfig+0x504>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	604b      	str	r3, [r1, #4]
 8002fcc:	e018      	b.n	8003000 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fce:	4b5d      	ldr	r3, [pc, #372]	; (8003144 <HAL_RCC_OscConfig+0x504>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a5c      	ldr	r2, [pc, #368]	; (8003144 <HAL_RCC_OscConfig+0x504>)
 8002fd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fda:	f7fd ff65 	bl	8000ea8 <HAL_GetTick>
 8002fde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002fe0:	e008      	b.n	8002ff4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fe2:	f7fd ff61 	bl	8000ea8 <HAL_GetTick>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d901      	bls.n	8002ff4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	e231      	b.n	8003458 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ff4:	4b53      	ldr	r3, [pc, #332]	; (8003144 <HAL_RCC_OscConfig+0x504>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d1f0      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0308 	and.w	r3, r3, #8
 8003008:	2b00      	cmp	r3, #0
 800300a:	d03c      	beq.n	8003086 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	695b      	ldr	r3, [r3, #20]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d01c      	beq.n	800304e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003014:	4b4b      	ldr	r3, [pc, #300]	; (8003144 <HAL_RCC_OscConfig+0x504>)
 8003016:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800301a:	4a4a      	ldr	r2, [pc, #296]	; (8003144 <HAL_RCC_OscConfig+0x504>)
 800301c:	f043 0301 	orr.w	r3, r3, #1
 8003020:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003024:	f7fd ff40 	bl	8000ea8 <HAL_GetTick>
 8003028:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800302a:	e008      	b.n	800303e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800302c:	f7fd ff3c 	bl	8000ea8 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b02      	cmp	r3, #2
 8003038:	d901      	bls.n	800303e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e20c      	b.n	8003458 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800303e:	4b41      	ldr	r3, [pc, #260]	; (8003144 <HAL_RCC_OscConfig+0x504>)
 8003040:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003044:	f003 0302 	and.w	r3, r3, #2
 8003048:	2b00      	cmp	r3, #0
 800304a:	d0ef      	beq.n	800302c <HAL_RCC_OscConfig+0x3ec>
 800304c:	e01b      	b.n	8003086 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800304e:	4b3d      	ldr	r3, [pc, #244]	; (8003144 <HAL_RCC_OscConfig+0x504>)
 8003050:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003054:	4a3b      	ldr	r2, [pc, #236]	; (8003144 <HAL_RCC_OscConfig+0x504>)
 8003056:	f023 0301 	bic.w	r3, r3, #1
 800305a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800305e:	f7fd ff23 	bl	8000ea8 <HAL_GetTick>
 8003062:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003064:	e008      	b.n	8003078 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003066:	f7fd ff1f 	bl	8000ea8 <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	2b02      	cmp	r3, #2
 8003072:	d901      	bls.n	8003078 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	e1ef      	b.n	8003458 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003078:	4b32      	ldr	r3, [pc, #200]	; (8003144 <HAL_RCC_OscConfig+0x504>)
 800307a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800307e:	f003 0302 	and.w	r3, r3, #2
 8003082:	2b00      	cmp	r3, #0
 8003084:	d1ef      	bne.n	8003066 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0304 	and.w	r3, r3, #4
 800308e:	2b00      	cmp	r3, #0
 8003090:	f000 80a6 	beq.w	80031e0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003094:	2300      	movs	r3, #0
 8003096:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003098:	4b2a      	ldr	r3, [pc, #168]	; (8003144 <HAL_RCC_OscConfig+0x504>)
 800309a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800309c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d10d      	bne.n	80030c0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030a4:	4b27      	ldr	r3, [pc, #156]	; (8003144 <HAL_RCC_OscConfig+0x504>)
 80030a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030a8:	4a26      	ldr	r2, [pc, #152]	; (8003144 <HAL_RCC_OscConfig+0x504>)
 80030aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030ae:	6593      	str	r3, [r2, #88]	; 0x58
 80030b0:	4b24      	ldr	r3, [pc, #144]	; (8003144 <HAL_RCC_OscConfig+0x504>)
 80030b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030b8:	60bb      	str	r3, [r7, #8]
 80030ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030bc:	2301      	movs	r3, #1
 80030be:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030c0:	4b21      	ldr	r3, [pc, #132]	; (8003148 <HAL_RCC_OscConfig+0x508>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d118      	bne.n	80030fe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030cc:	4b1e      	ldr	r3, [pc, #120]	; (8003148 <HAL_RCC_OscConfig+0x508>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a1d      	ldr	r2, [pc, #116]	; (8003148 <HAL_RCC_OscConfig+0x508>)
 80030d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030d8:	f7fd fee6 	bl	8000ea8 <HAL_GetTick>
 80030dc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030de:	e008      	b.n	80030f2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030e0:	f7fd fee2 	bl	8000ea8 <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d901      	bls.n	80030f2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e1b2      	b.n	8003458 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030f2:	4b15      	ldr	r3, [pc, #84]	; (8003148 <HAL_RCC_OscConfig+0x508>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d0f0      	beq.n	80030e0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	2b01      	cmp	r3, #1
 8003104:	d108      	bne.n	8003118 <HAL_RCC_OscConfig+0x4d8>
 8003106:	4b0f      	ldr	r3, [pc, #60]	; (8003144 <HAL_RCC_OscConfig+0x504>)
 8003108:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800310c:	4a0d      	ldr	r2, [pc, #52]	; (8003144 <HAL_RCC_OscConfig+0x504>)
 800310e:	f043 0301 	orr.w	r3, r3, #1
 8003112:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003116:	e029      	b.n	800316c <HAL_RCC_OscConfig+0x52c>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	2b05      	cmp	r3, #5
 800311e:	d115      	bne.n	800314c <HAL_RCC_OscConfig+0x50c>
 8003120:	4b08      	ldr	r3, [pc, #32]	; (8003144 <HAL_RCC_OscConfig+0x504>)
 8003122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003126:	4a07      	ldr	r2, [pc, #28]	; (8003144 <HAL_RCC_OscConfig+0x504>)
 8003128:	f043 0304 	orr.w	r3, r3, #4
 800312c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003130:	4b04      	ldr	r3, [pc, #16]	; (8003144 <HAL_RCC_OscConfig+0x504>)
 8003132:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003136:	4a03      	ldr	r2, [pc, #12]	; (8003144 <HAL_RCC_OscConfig+0x504>)
 8003138:	f043 0301 	orr.w	r3, r3, #1
 800313c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003140:	e014      	b.n	800316c <HAL_RCC_OscConfig+0x52c>
 8003142:	bf00      	nop
 8003144:	40021000 	.word	0x40021000
 8003148:	40007000 	.word	0x40007000
 800314c:	4b9a      	ldr	r3, [pc, #616]	; (80033b8 <HAL_RCC_OscConfig+0x778>)
 800314e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003152:	4a99      	ldr	r2, [pc, #612]	; (80033b8 <HAL_RCC_OscConfig+0x778>)
 8003154:	f023 0301 	bic.w	r3, r3, #1
 8003158:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800315c:	4b96      	ldr	r3, [pc, #600]	; (80033b8 <HAL_RCC_OscConfig+0x778>)
 800315e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003162:	4a95      	ldr	r2, [pc, #596]	; (80033b8 <HAL_RCC_OscConfig+0x778>)
 8003164:	f023 0304 	bic.w	r3, r3, #4
 8003168:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d016      	beq.n	80031a2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003174:	f7fd fe98 	bl	8000ea8 <HAL_GetTick>
 8003178:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800317a:	e00a      	b.n	8003192 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800317c:	f7fd fe94 	bl	8000ea8 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	f241 3288 	movw	r2, #5000	; 0x1388
 800318a:	4293      	cmp	r3, r2
 800318c:	d901      	bls.n	8003192 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e162      	b.n	8003458 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003192:	4b89      	ldr	r3, [pc, #548]	; (80033b8 <HAL_RCC_OscConfig+0x778>)
 8003194:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003198:	f003 0302 	and.w	r3, r3, #2
 800319c:	2b00      	cmp	r3, #0
 800319e:	d0ed      	beq.n	800317c <HAL_RCC_OscConfig+0x53c>
 80031a0:	e015      	b.n	80031ce <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031a2:	f7fd fe81 	bl	8000ea8 <HAL_GetTick>
 80031a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80031a8:	e00a      	b.n	80031c0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031aa:	f7fd fe7d 	bl	8000ea8 <HAL_GetTick>
 80031ae:	4602      	mov	r2, r0
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d901      	bls.n	80031c0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80031bc:	2303      	movs	r3, #3
 80031be:	e14b      	b.n	8003458 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80031c0:	4b7d      	ldr	r3, [pc, #500]	; (80033b8 <HAL_RCC_OscConfig+0x778>)
 80031c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031c6:	f003 0302 	and.w	r3, r3, #2
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d1ed      	bne.n	80031aa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031ce:	7ffb      	ldrb	r3, [r7, #31]
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d105      	bne.n	80031e0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031d4:	4b78      	ldr	r3, [pc, #480]	; (80033b8 <HAL_RCC_OscConfig+0x778>)
 80031d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031d8:	4a77      	ldr	r2, [pc, #476]	; (80033b8 <HAL_RCC_OscConfig+0x778>)
 80031da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031de:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0320 	and.w	r3, r3, #32
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d03c      	beq.n	8003266 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d01c      	beq.n	800322e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80031f4:	4b70      	ldr	r3, [pc, #448]	; (80033b8 <HAL_RCC_OscConfig+0x778>)
 80031f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031fa:	4a6f      	ldr	r2, [pc, #444]	; (80033b8 <HAL_RCC_OscConfig+0x778>)
 80031fc:	f043 0301 	orr.w	r3, r3, #1
 8003200:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003204:	f7fd fe50 	bl	8000ea8 <HAL_GetTick>
 8003208:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800320a:	e008      	b.n	800321e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800320c:	f7fd fe4c 	bl	8000ea8 <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	2b02      	cmp	r3, #2
 8003218:	d901      	bls.n	800321e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e11c      	b.n	8003458 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800321e:	4b66      	ldr	r3, [pc, #408]	; (80033b8 <HAL_RCC_OscConfig+0x778>)
 8003220:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003224:	f003 0302 	and.w	r3, r3, #2
 8003228:	2b00      	cmp	r3, #0
 800322a:	d0ef      	beq.n	800320c <HAL_RCC_OscConfig+0x5cc>
 800322c:	e01b      	b.n	8003266 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800322e:	4b62      	ldr	r3, [pc, #392]	; (80033b8 <HAL_RCC_OscConfig+0x778>)
 8003230:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003234:	4a60      	ldr	r2, [pc, #384]	; (80033b8 <HAL_RCC_OscConfig+0x778>)
 8003236:	f023 0301 	bic.w	r3, r3, #1
 800323a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800323e:	f7fd fe33 	bl	8000ea8 <HAL_GetTick>
 8003242:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003244:	e008      	b.n	8003258 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003246:	f7fd fe2f 	bl	8000ea8 <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	2b02      	cmp	r3, #2
 8003252:	d901      	bls.n	8003258 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	e0ff      	b.n	8003458 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003258:	4b57      	ldr	r3, [pc, #348]	; (80033b8 <HAL_RCC_OscConfig+0x778>)
 800325a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d1ef      	bne.n	8003246 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800326a:	2b00      	cmp	r3, #0
 800326c:	f000 80f3 	beq.w	8003456 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003274:	2b02      	cmp	r3, #2
 8003276:	f040 80c9 	bne.w	800340c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800327a:	4b4f      	ldr	r3, [pc, #316]	; (80033b8 <HAL_RCC_OscConfig+0x778>)
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	f003 0203 	and.w	r2, r3, #3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800328a:	429a      	cmp	r2, r3
 800328c:	d12c      	bne.n	80032e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003298:	3b01      	subs	r3, #1
 800329a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800329c:	429a      	cmp	r2, r3
 800329e:	d123      	bne.n	80032e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032aa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d11b      	bne.n	80032e8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ba:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80032bc:	429a      	cmp	r2, r3
 80032be:	d113      	bne.n	80032e8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ca:	085b      	lsrs	r3, r3, #1
 80032cc:	3b01      	subs	r3, #1
 80032ce:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d109      	bne.n	80032e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032de:	085b      	lsrs	r3, r3, #1
 80032e0:	3b01      	subs	r3, #1
 80032e2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d06b      	beq.n	80033c0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	2b0c      	cmp	r3, #12
 80032ec:	d062      	beq.n	80033b4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80032ee:	4b32      	ldr	r3, [pc, #200]	; (80033b8 <HAL_RCC_OscConfig+0x778>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d001      	beq.n	80032fe <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e0ac      	b.n	8003458 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80032fe:	4b2e      	ldr	r3, [pc, #184]	; (80033b8 <HAL_RCC_OscConfig+0x778>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a2d      	ldr	r2, [pc, #180]	; (80033b8 <HAL_RCC_OscConfig+0x778>)
 8003304:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003308:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800330a:	f7fd fdcd 	bl	8000ea8 <HAL_GetTick>
 800330e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003310:	e008      	b.n	8003324 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003312:	f7fd fdc9 	bl	8000ea8 <HAL_GetTick>
 8003316:	4602      	mov	r2, r0
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	2b02      	cmp	r3, #2
 800331e:	d901      	bls.n	8003324 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e099      	b.n	8003458 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003324:	4b24      	ldr	r3, [pc, #144]	; (80033b8 <HAL_RCC_OscConfig+0x778>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d1f0      	bne.n	8003312 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003330:	4b21      	ldr	r3, [pc, #132]	; (80033b8 <HAL_RCC_OscConfig+0x778>)
 8003332:	68da      	ldr	r2, [r3, #12]
 8003334:	4b21      	ldr	r3, [pc, #132]	; (80033bc <HAL_RCC_OscConfig+0x77c>)
 8003336:	4013      	ands	r3, r2
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003340:	3a01      	subs	r2, #1
 8003342:	0112      	lsls	r2, r2, #4
 8003344:	4311      	orrs	r1, r2
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800334a:	0212      	lsls	r2, r2, #8
 800334c:	4311      	orrs	r1, r2
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003352:	0852      	lsrs	r2, r2, #1
 8003354:	3a01      	subs	r2, #1
 8003356:	0552      	lsls	r2, r2, #21
 8003358:	4311      	orrs	r1, r2
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800335e:	0852      	lsrs	r2, r2, #1
 8003360:	3a01      	subs	r2, #1
 8003362:	0652      	lsls	r2, r2, #25
 8003364:	4311      	orrs	r1, r2
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800336a:	06d2      	lsls	r2, r2, #27
 800336c:	430a      	orrs	r2, r1
 800336e:	4912      	ldr	r1, [pc, #72]	; (80033b8 <HAL_RCC_OscConfig+0x778>)
 8003370:	4313      	orrs	r3, r2
 8003372:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003374:	4b10      	ldr	r3, [pc, #64]	; (80033b8 <HAL_RCC_OscConfig+0x778>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a0f      	ldr	r2, [pc, #60]	; (80033b8 <HAL_RCC_OscConfig+0x778>)
 800337a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800337e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003380:	4b0d      	ldr	r3, [pc, #52]	; (80033b8 <HAL_RCC_OscConfig+0x778>)
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	4a0c      	ldr	r2, [pc, #48]	; (80033b8 <HAL_RCC_OscConfig+0x778>)
 8003386:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800338a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800338c:	f7fd fd8c 	bl	8000ea8 <HAL_GetTick>
 8003390:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003392:	e008      	b.n	80033a6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003394:	f7fd fd88 	bl	8000ea8 <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d901      	bls.n	80033a6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e058      	b.n	8003458 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033a6:	4b04      	ldr	r3, [pc, #16]	; (80033b8 <HAL_RCC_OscConfig+0x778>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d0f0      	beq.n	8003394 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033b2:	e050      	b.n	8003456 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e04f      	b.n	8003458 <HAL_RCC_OscConfig+0x818>
 80033b8:	40021000 	.word	0x40021000
 80033bc:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033c0:	4b27      	ldr	r3, [pc, #156]	; (8003460 <HAL_RCC_OscConfig+0x820>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d144      	bne.n	8003456 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80033cc:	4b24      	ldr	r3, [pc, #144]	; (8003460 <HAL_RCC_OscConfig+0x820>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a23      	ldr	r2, [pc, #140]	; (8003460 <HAL_RCC_OscConfig+0x820>)
 80033d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033d6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80033d8:	4b21      	ldr	r3, [pc, #132]	; (8003460 <HAL_RCC_OscConfig+0x820>)
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	4a20      	ldr	r2, [pc, #128]	; (8003460 <HAL_RCC_OscConfig+0x820>)
 80033de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033e2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80033e4:	f7fd fd60 	bl	8000ea8 <HAL_GetTick>
 80033e8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033ea:	e008      	b.n	80033fe <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033ec:	f7fd fd5c 	bl	8000ea8 <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d901      	bls.n	80033fe <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e02c      	b.n	8003458 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033fe:	4b18      	ldr	r3, [pc, #96]	; (8003460 <HAL_RCC_OscConfig+0x820>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d0f0      	beq.n	80033ec <HAL_RCC_OscConfig+0x7ac>
 800340a:	e024      	b.n	8003456 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	2b0c      	cmp	r3, #12
 8003410:	d01f      	beq.n	8003452 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003412:	4b13      	ldr	r3, [pc, #76]	; (8003460 <HAL_RCC_OscConfig+0x820>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a12      	ldr	r2, [pc, #72]	; (8003460 <HAL_RCC_OscConfig+0x820>)
 8003418:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800341c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800341e:	f7fd fd43 	bl	8000ea8 <HAL_GetTick>
 8003422:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003424:	e008      	b.n	8003438 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003426:	f7fd fd3f 	bl	8000ea8 <HAL_GetTick>
 800342a:	4602      	mov	r2, r0
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	2b02      	cmp	r3, #2
 8003432:	d901      	bls.n	8003438 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003434:	2303      	movs	r3, #3
 8003436:	e00f      	b.n	8003458 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003438:	4b09      	ldr	r3, [pc, #36]	; (8003460 <HAL_RCC_OscConfig+0x820>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d1f0      	bne.n	8003426 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003444:	4b06      	ldr	r3, [pc, #24]	; (8003460 <HAL_RCC_OscConfig+0x820>)
 8003446:	68da      	ldr	r2, [r3, #12]
 8003448:	4905      	ldr	r1, [pc, #20]	; (8003460 <HAL_RCC_OscConfig+0x820>)
 800344a:	4b06      	ldr	r3, [pc, #24]	; (8003464 <HAL_RCC_OscConfig+0x824>)
 800344c:	4013      	ands	r3, r2
 800344e:	60cb      	str	r3, [r1, #12]
 8003450:	e001      	b.n	8003456 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e000      	b.n	8003458 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003456:	2300      	movs	r3, #0
}
 8003458:	4618      	mov	r0, r3
 800345a:	3720      	adds	r7, #32
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}
 8003460:	40021000 	.word	0x40021000
 8003464:	feeefffc 	.word	0xfeeefffc

08003468 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d101      	bne.n	800347c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e0e7      	b.n	800364c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800347c:	4b75      	ldr	r3, [pc, #468]	; (8003654 <HAL_RCC_ClockConfig+0x1ec>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0307 	and.w	r3, r3, #7
 8003484:	683a      	ldr	r2, [r7, #0]
 8003486:	429a      	cmp	r2, r3
 8003488:	d910      	bls.n	80034ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800348a:	4b72      	ldr	r3, [pc, #456]	; (8003654 <HAL_RCC_ClockConfig+0x1ec>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f023 0207 	bic.w	r2, r3, #7
 8003492:	4970      	ldr	r1, [pc, #448]	; (8003654 <HAL_RCC_ClockConfig+0x1ec>)
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	4313      	orrs	r3, r2
 8003498:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800349a:	4b6e      	ldr	r3, [pc, #440]	; (8003654 <HAL_RCC_ClockConfig+0x1ec>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0307 	and.w	r3, r3, #7
 80034a2:	683a      	ldr	r2, [r7, #0]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d001      	beq.n	80034ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e0cf      	b.n	800364c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 0302 	and.w	r3, r3, #2
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d010      	beq.n	80034da <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	689a      	ldr	r2, [r3, #8]
 80034bc:	4b66      	ldr	r3, [pc, #408]	; (8003658 <HAL_RCC_ClockConfig+0x1f0>)
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d908      	bls.n	80034da <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034c8:	4b63      	ldr	r3, [pc, #396]	; (8003658 <HAL_RCC_ClockConfig+0x1f0>)
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	4960      	ldr	r1, [pc, #384]	; (8003658 <HAL_RCC_ClockConfig+0x1f0>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d04c      	beq.n	8003580 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	2b03      	cmp	r3, #3
 80034ec:	d107      	bne.n	80034fe <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034ee:	4b5a      	ldr	r3, [pc, #360]	; (8003658 <HAL_RCC_ClockConfig+0x1f0>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d121      	bne.n	800353e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e0a6      	b.n	800364c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	2b02      	cmp	r3, #2
 8003504:	d107      	bne.n	8003516 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003506:	4b54      	ldr	r3, [pc, #336]	; (8003658 <HAL_RCC_ClockConfig+0x1f0>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d115      	bne.n	800353e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e09a      	b.n	800364c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d107      	bne.n	800352e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800351e:	4b4e      	ldr	r3, [pc, #312]	; (8003658 <HAL_RCC_ClockConfig+0x1f0>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0302 	and.w	r3, r3, #2
 8003526:	2b00      	cmp	r3, #0
 8003528:	d109      	bne.n	800353e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e08e      	b.n	800364c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800352e:	4b4a      	ldr	r3, [pc, #296]	; (8003658 <HAL_RCC_ClockConfig+0x1f0>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003536:	2b00      	cmp	r3, #0
 8003538:	d101      	bne.n	800353e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e086      	b.n	800364c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800353e:	4b46      	ldr	r3, [pc, #280]	; (8003658 <HAL_RCC_ClockConfig+0x1f0>)
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	f023 0203 	bic.w	r2, r3, #3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	4943      	ldr	r1, [pc, #268]	; (8003658 <HAL_RCC_ClockConfig+0x1f0>)
 800354c:	4313      	orrs	r3, r2
 800354e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003550:	f7fd fcaa 	bl	8000ea8 <HAL_GetTick>
 8003554:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003556:	e00a      	b.n	800356e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003558:	f7fd fca6 	bl	8000ea8 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	f241 3288 	movw	r2, #5000	; 0x1388
 8003566:	4293      	cmp	r3, r2
 8003568:	d901      	bls.n	800356e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e06e      	b.n	800364c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800356e:	4b3a      	ldr	r3, [pc, #232]	; (8003658 <HAL_RCC_ClockConfig+0x1f0>)
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	f003 020c 	and.w	r2, r3, #12
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	429a      	cmp	r2, r3
 800357e:	d1eb      	bne.n	8003558 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0302 	and.w	r3, r3, #2
 8003588:	2b00      	cmp	r3, #0
 800358a:	d010      	beq.n	80035ae <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	689a      	ldr	r2, [r3, #8]
 8003590:	4b31      	ldr	r3, [pc, #196]	; (8003658 <HAL_RCC_ClockConfig+0x1f0>)
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003598:	429a      	cmp	r2, r3
 800359a:	d208      	bcs.n	80035ae <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800359c:	4b2e      	ldr	r3, [pc, #184]	; (8003658 <HAL_RCC_ClockConfig+0x1f0>)
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	492b      	ldr	r1, [pc, #172]	; (8003658 <HAL_RCC_ClockConfig+0x1f0>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035ae:	4b29      	ldr	r3, [pc, #164]	; (8003654 <HAL_RCC_ClockConfig+0x1ec>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0307 	and.w	r3, r3, #7
 80035b6:	683a      	ldr	r2, [r7, #0]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d210      	bcs.n	80035de <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035bc:	4b25      	ldr	r3, [pc, #148]	; (8003654 <HAL_RCC_ClockConfig+0x1ec>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f023 0207 	bic.w	r2, r3, #7
 80035c4:	4923      	ldr	r1, [pc, #140]	; (8003654 <HAL_RCC_ClockConfig+0x1ec>)
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035cc:	4b21      	ldr	r3, [pc, #132]	; (8003654 <HAL_RCC_ClockConfig+0x1ec>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0307 	and.w	r3, r3, #7
 80035d4:	683a      	ldr	r2, [r7, #0]
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d001      	beq.n	80035de <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e036      	b.n	800364c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0304 	and.w	r3, r3, #4
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d008      	beq.n	80035fc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035ea:	4b1b      	ldr	r3, [pc, #108]	; (8003658 <HAL_RCC_ClockConfig+0x1f0>)
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	4918      	ldr	r1, [pc, #96]	; (8003658 <HAL_RCC_ClockConfig+0x1f0>)
 80035f8:	4313      	orrs	r3, r2
 80035fa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0308 	and.w	r3, r3, #8
 8003604:	2b00      	cmp	r3, #0
 8003606:	d009      	beq.n	800361c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003608:	4b13      	ldr	r3, [pc, #76]	; (8003658 <HAL_RCC_ClockConfig+0x1f0>)
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	691b      	ldr	r3, [r3, #16]
 8003614:	00db      	lsls	r3, r3, #3
 8003616:	4910      	ldr	r1, [pc, #64]	; (8003658 <HAL_RCC_ClockConfig+0x1f0>)
 8003618:	4313      	orrs	r3, r2
 800361a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800361c:	f000 f824 	bl	8003668 <HAL_RCC_GetSysClockFreq>
 8003620:	4602      	mov	r2, r0
 8003622:	4b0d      	ldr	r3, [pc, #52]	; (8003658 <HAL_RCC_ClockConfig+0x1f0>)
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	091b      	lsrs	r3, r3, #4
 8003628:	f003 030f 	and.w	r3, r3, #15
 800362c:	490b      	ldr	r1, [pc, #44]	; (800365c <HAL_RCC_ClockConfig+0x1f4>)
 800362e:	5ccb      	ldrb	r3, [r1, r3]
 8003630:	f003 031f 	and.w	r3, r3, #31
 8003634:	fa22 f303 	lsr.w	r3, r2, r3
 8003638:	4a09      	ldr	r2, [pc, #36]	; (8003660 <HAL_RCC_ClockConfig+0x1f8>)
 800363a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800363c:	4b09      	ldr	r3, [pc, #36]	; (8003664 <HAL_RCC_ClockConfig+0x1fc>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4618      	mov	r0, r3
 8003642:	f7fd fbe1 	bl	8000e08 <HAL_InitTick>
 8003646:	4603      	mov	r3, r0
 8003648:	72fb      	strb	r3, [r7, #11]

  return status;
 800364a:	7afb      	ldrb	r3, [r7, #11]
}
 800364c:	4618      	mov	r0, r3
 800364e:	3710      	adds	r7, #16
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}
 8003654:	40022000 	.word	0x40022000
 8003658:	40021000 	.word	0x40021000
 800365c:	080057bc 	.word	0x080057bc
 8003660:	20000000 	.word	0x20000000
 8003664:	20000004 	.word	0x20000004

08003668 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003668:	b480      	push	{r7}
 800366a:	b089      	sub	sp, #36	; 0x24
 800366c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800366e:	2300      	movs	r3, #0
 8003670:	61fb      	str	r3, [r7, #28]
 8003672:	2300      	movs	r3, #0
 8003674:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003676:	4b3e      	ldr	r3, [pc, #248]	; (8003770 <HAL_RCC_GetSysClockFreq+0x108>)
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f003 030c 	and.w	r3, r3, #12
 800367e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003680:	4b3b      	ldr	r3, [pc, #236]	; (8003770 <HAL_RCC_GetSysClockFreq+0x108>)
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	f003 0303 	and.w	r3, r3, #3
 8003688:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d005      	beq.n	800369c <HAL_RCC_GetSysClockFreq+0x34>
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	2b0c      	cmp	r3, #12
 8003694:	d121      	bne.n	80036da <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2b01      	cmp	r3, #1
 800369a:	d11e      	bne.n	80036da <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800369c:	4b34      	ldr	r3, [pc, #208]	; (8003770 <HAL_RCC_GetSysClockFreq+0x108>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0308 	and.w	r3, r3, #8
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d107      	bne.n	80036b8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80036a8:	4b31      	ldr	r3, [pc, #196]	; (8003770 <HAL_RCC_GetSysClockFreq+0x108>)
 80036aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036ae:	0a1b      	lsrs	r3, r3, #8
 80036b0:	f003 030f 	and.w	r3, r3, #15
 80036b4:	61fb      	str	r3, [r7, #28]
 80036b6:	e005      	b.n	80036c4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80036b8:	4b2d      	ldr	r3, [pc, #180]	; (8003770 <HAL_RCC_GetSysClockFreq+0x108>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	091b      	lsrs	r3, r3, #4
 80036be:	f003 030f 	and.w	r3, r3, #15
 80036c2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80036c4:	4a2b      	ldr	r2, [pc, #172]	; (8003774 <HAL_RCC_GetSysClockFreq+0x10c>)
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036cc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d10d      	bne.n	80036f0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036d8:	e00a      	b.n	80036f0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	2b04      	cmp	r3, #4
 80036de:	d102      	bne.n	80036e6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80036e0:	4b25      	ldr	r3, [pc, #148]	; (8003778 <HAL_RCC_GetSysClockFreq+0x110>)
 80036e2:	61bb      	str	r3, [r7, #24]
 80036e4:	e004      	b.n	80036f0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	2b08      	cmp	r3, #8
 80036ea:	d101      	bne.n	80036f0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80036ec:	4b23      	ldr	r3, [pc, #140]	; (800377c <HAL_RCC_GetSysClockFreq+0x114>)
 80036ee:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	2b0c      	cmp	r3, #12
 80036f4:	d134      	bne.n	8003760 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80036f6:	4b1e      	ldr	r3, [pc, #120]	; (8003770 <HAL_RCC_GetSysClockFreq+0x108>)
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	f003 0303 	and.w	r3, r3, #3
 80036fe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	2b02      	cmp	r3, #2
 8003704:	d003      	beq.n	800370e <HAL_RCC_GetSysClockFreq+0xa6>
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	2b03      	cmp	r3, #3
 800370a:	d003      	beq.n	8003714 <HAL_RCC_GetSysClockFreq+0xac>
 800370c:	e005      	b.n	800371a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800370e:	4b1a      	ldr	r3, [pc, #104]	; (8003778 <HAL_RCC_GetSysClockFreq+0x110>)
 8003710:	617b      	str	r3, [r7, #20]
      break;
 8003712:	e005      	b.n	8003720 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003714:	4b19      	ldr	r3, [pc, #100]	; (800377c <HAL_RCC_GetSysClockFreq+0x114>)
 8003716:	617b      	str	r3, [r7, #20]
      break;
 8003718:	e002      	b.n	8003720 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	617b      	str	r3, [r7, #20]
      break;
 800371e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003720:	4b13      	ldr	r3, [pc, #76]	; (8003770 <HAL_RCC_GetSysClockFreq+0x108>)
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	091b      	lsrs	r3, r3, #4
 8003726:	f003 0307 	and.w	r3, r3, #7
 800372a:	3301      	adds	r3, #1
 800372c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800372e:	4b10      	ldr	r3, [pc, #64]	; (8003770 <HAL_RCC_GetSysClockFreq+0x108>)
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	0a1b      	lsrs	r3, r3, #8
 8003734:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003738:	697a      	ldr	r2, [r7, #20]
 800373a:	fb03 f202 	mul.w	r2, r3, r2
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	fbb2 f3f3 	udiv	r3, r2, r3
 8003744:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003746:	4b0a      	ldr	r3, [pc, #40]	; (8003770 <HAL_RCC_GetSysClockFreq+0x108>)
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	0e5b      	lsrs	r3, r3, #25
 800374c:	f003 0303 	and.w	r3, r3, #3
 8003750:	3301      	adds	r3, #1
 8003752:	005b      	lsls	r3, r3, #1
 8003754:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003756:	697a      	ldr	r2, [r7, #20]
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	fbb2 f3f3 	udiv	r3, r2, r3
 800375e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003760:	69bb      	ldr	r3, [r7, #24]
}
 8003762:	4618      	mov	r0, r3
 8003764:	3724      	adds	r7, #36	; 0x24
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	40021000 	.word	0x40021000
 8003774:	080057d4 	.word	0x080057d4
 8003778:	00f42400 	.word	0x00f42400
 800377c:	007a1200 	.word	0x007a1200

08003780 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003780:	b480      	push	{r7}
 8003782:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003784:	4b03      	ldr	r3, [pc, #12]	; (8003794 <HAL_RCC_GetHCLKFreq+0x14>)
 8003786:	681b      	ldr	r3, [r3, #0]
}
 8003788:	4618      	mov	r0, r3
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	20000000 	.word	0x20000000

08003798 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800379c:	f7ff fff0 	bl	8003780 <HAL_RCC_GetHCLKFreq>
 80037a0:	4602      	mov	r2, r0
 80037a2:	4b06      	ldr	r3, [pc, #24]	; (80037bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	0a1b      	lsrs	r3, r3, #8
 80037a8:	f003 0307 	and.w	r3, r3, #7
 80037ac:	4904      	ldr	r1, [pc, #16]	; (80037c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80037ae:	5ccb      	ldrb	r3, [r1, r3]
 80037b0:	f003 031f 	and.w	r3, r3, #31
 80037b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	40021000 	.word	0x40021000
 80037c0:	080057cc 	.word	0x080057cc

080037c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80037c8:	f7ff ffda 	bl	8003780 <HAL_RCC_GetHCLKFreq>
 80037cc:	4602      	mov	r2, r0
 80037ce:	4b06      	ldr	r3, [pc, #24]	; (80037e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	0adb      	lsrs	r3, r3, #11
 80037d4:	f003 0307 	and.w	r3, r3, #7
 80037d8:	4904      	ldr	r1, [pc, #16]	; (80037ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80037da:	5ccb      	ldrb	r3, [r1, r3]
 80037dc:	f003 031f 	and.w	r3, r3, #31
 80037e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	40021000 	.word	0x40021000
 80037ec:	080057cc 	.word	0x080057cc

080037f0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b086      	sub	sp, #24
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80037f8:	2300      	movs	r3, #0
 80037fa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80037fc:	4b2a      	ldr	r3, [pc, #168]	; (80038a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003800:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d003      	beq.n	8003810 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003808:	f7ff f9b6 	bl	8002b78 <HAL_PWREx_GetVoltageRange>
 800380c:	6178      	str	r0, [r7, #20]
 800380e:	e014      	b.n	800383a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003810:	4b25      	ldr	r3, [pc, #148]	; (80038a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003814:	4a24      	ldr	r2, [pc, #144]	; (80038a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003816:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800381a:	6593      	str	r3, [r2, #88]	; 0x58
 800381c:	4b22      	ldr	r3, [pc, #136]	; (80038a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800381e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003820:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003824:	60fb      	str	r3, [r7, #12]
 8003826:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003828:	f7ff f9a6 	bl	8002b78 <HAL_PWREx_GetVoltageRange>
 800382c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800382e:	4b1e      	ldr	r3, [pc, #120]	; (80038a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003832:	4a1d      	ldr	r2, [pc, #116]	; (80038a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003834:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003838:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003840:	d10b      	bne.n	800385a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2b80      	cmp	r3, #128	; 0x80
 8003846:	d919      	bls.n	800387c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2ba0      	cmp	r3, #160	; 0xa0
 800384c:	d902      	bls.n	8003854 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800384e:	2302      	movs	r3, #2
 8003850:	613b      	str	r3, [r7, #16]
 8003852:	e013      	b.n	800387c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003854:	2301      	movs	r3, #1
 8003856:	613b      	str	r3, [r7, #16]
 8003858:	e010      	b.n	800387c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2b80      	cmp	r3, #128	; 0x80
 800385e:	d902      	bls.n	8003866 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003860:	2303      	movs	r3, #3
 8003862:	613b      	str	r3, [r7, #16]
 8003864:	e00a      	b.n	800387c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2b80      	cmp	r3, #128	; 0x80
 800386a:	d102      	bne.n	8003872 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800386c:	2302      	movs	r3, #2
 800386e:	613b      	str	r3, [r7, #16]
 8003870:	e004      	b.n	800387c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2b70      	cmp	r3, #112	; 0x70
 8003876:	d101      	bne.n	800387c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003878:	2301      	movs	r3, #1
 800387a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800387c:	4b0b      	ldr	r3, [pc, #44]	; (80038ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f023 0207 	bic.w	r2, r3, #7
 8003884:	4909      	ldr	r1, [pc, #36]	; (80038ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	4313      	orrs	r3, r2
 800388a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800388c:	4b07      	ldr	r3, [pc, #28]	; (80038ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0307 	and.w	r3, r3, #7
 8003894:	693a      	ldr	r2, [r7, #16]
 8003896:	429a      	cmp	r2, r3
 8003898:	d001      	beq.n	800389e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e000      	b.n	80038a0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800389e:	2300      	movs	r3, #0
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3718      	adds	r7, #24
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	40021000 	.word	0x40021000
 80038ac:	40022000 	.word	0x40022000

080038b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b086      	sub	sp, #24
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80038b8:	2300      	movs	r3, #0
 80038ba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80038bc:	2300      	movs	r3, #0
 80038be:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d031      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038d0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80038d4:	d01a      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80038d6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80038da:	d814      	bhi.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d009      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80038e0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80038e4:	d10f      	bne.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80038e6:	4b5d      	ldr	r3, [pc, #372]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	4a5c      	ldr	r2, [pc, #368]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038f0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80038f2:	e00c      	b.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	3304      	adds	r3, #4
 80038f8:	2100      	movs	r1, #0
 80038fa:	4618      	mov	r0, r3
 80038fc:	f000 f9de 	bl	8003cbc <RCCEx_PLLSAI1_Config>
 8003900:	4603      	mov	r3, r0
 8003902:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003904:	e003      	b.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	74fb      	strb	r3, [r7, #19]
      break;
 800390a:	e000      	b.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800390c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800390e:	7cfb      	ldrb	r3, [r7, #19]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d10b      	bne.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003914:	4b51      	ldr	r3, [pc, #324]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800391a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003922:	494e      	ldr	r1, [pc, #312]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003924:	4313      	orrs	r3, r2
 8003926:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800392a:	e001      	b.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800392c:	7cfb      	ldrb	r3, [r7, #19]
 800392e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003938:	2b00      	cmp	r3, #0
 800393a:	f000 809e 	beq.w	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800393e:	2300      	movs	r3, #0
 8003940:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003942:	4b46      	ldr	r3, [pc, #280]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d101      	bne.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800394e:	2301      	movs	r3, #1
 8003950:	e000      	b.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003952:	2300      	movs	r3, #0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d00d      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003958:	4b40      	ldr	r3, [pc, #256]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800395a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800395c:	4a3f      	ldr	r2, [pc, #252]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800395e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003962:	6593      	str	r3, [r2, #88]	; 0x58
 8003964:	4b3d      	ldr	r3, [pc, #244]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003968:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800396c:	60bb      	str	r3, [r7, #8]
 800396e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003970:	2301      	movs	r3, #1
 8003972:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003974:	4b3a      	ldr	r3, [pc, #232]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a39      	ldr	r2, [pc, #228]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800397a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800397e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003980:	f7fd fa92 	bl	8000ea8 <HAL_GetTick>
 8003984:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003986:	e009      	b.n	800399c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003988:	f7fd fa8e 	bl	8000ea8 <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	2b02      	cmp	r3, #2
 8003994:	d902      	bls.n	800399c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	74fb      	strb	r3, [r7, #19]
        break;
 800399a:	e005      	b.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800399c:	4b30      	ldr	r3, [pc, #192]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d0ef      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80039a8:	7cfb      	ldrb	r3, [r7, #19]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d15a      	bne.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80039ae:	4b2b      	ldr	r3, [pc, #172]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039b8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d01e      	beq.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039c4:	697a      	ldr	r2, [r7, #20]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d019      	beq.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80039ca:	4b24      	ldr	r3, [pc, #144]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039d4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80039d6:	4b21      	ldr	r3, [pc, #132]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039dc:	4a1f      	ldr	r2, [pc, #124]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80039e6:	4b1d      	ldr	r3, [pc, #116]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ec:	4a1b      	ldr	r2, [pc, #108]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80039f6:	4a19      	ldr	r2, [pc, #100]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	f003 0301 	and.w	r3, r3, #1
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d016      	beq.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a08:	f7fd fa4e 	bl	8000ea8 <HAL_GetTick>
 8003a0c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a0e:	e00b      	b.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a10:	f7fd fa4a 	bl	8000ea8 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d902      	bls.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	74fb      	strb	r3, [r7, #19]
            break;
 8003a26:	e006      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a28:	4b0c      	ldr	r3, [pc, #48]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a2e:	f003 0302 	and.w	r3, r3, #2
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d0ec      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003a36:	7cfb      	ldrb	r3, [r7, #19]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d10b      	bne.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a3c:	4b07      	ldr	r3, [pc, #28]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a42:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a4a:	4904      	ldr	r1, [pc, #16]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003a52:	e009      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a54:	7cfb      	ldrb	r3, [r7, #19]
 8003a56:	74bb      	strb	r3, [r7, #18]
 8003a58:	e006      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003a5a:	bf00      	nop
 8003a5c:	40021000 	.word	0x40021000
 8003a60:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a64:	7cfb      	ldrb	r3, [r7, #19]
 8003a66:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a68:	7c7b      	ldrb	r3, [r7, #17]
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d105      	bne.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a6e:	4b8a      	ldr	r3, [pc, #552]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a72:	4a89      	ldr	r2, [pc, #548]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a78:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0301 	and.w	r3, r3, #1
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d00a      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a86:	4b84      	ldr	r3, [pc, #528]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a8c:	f023 0203 	bic.w	r2, r3, #3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6a1b      	ldr	r3, [r3, #32]
 8003a94:	4980      	ldr	r1, [pc, #512]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0302 	and.w	r3, r3, #2
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d00a      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003aa8:	4b7b      	ldr	r3, [pc, #492]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aae:	f023 020c 	bic.w	r2, r3, #12
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab6:	4978      	ldr	r1, [pc, #480]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0320 	and.w	r3, r3, #32
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d00a      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003aca:	4b73      	ldr	r3, [pc, #460]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ad0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad8:	496f      	ldr	r1, [pc, #444]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d00a      	beq.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003aec:	4b6a      	ldr	r3, [pc, #424]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003af2:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003afa:	4967      	ldr	r1, [pc, #412]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003afc:	4313      	orrs	r3, r2
 8003afe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d00a      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003b0e:	4b62      	ldr	r3, [pc, #392]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b14:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b1c:	495e      	ldr	r1, [pc, #376]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d00a      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b30:	4b59      	ldr	r3, [pc, #356]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b36:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b3e:	4956      	ldr	r1, [pc, #344]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b40:	4313      	orrs	r3, r2
 8003b42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d00a      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b52:	4b51      	ldr	r3, [pc, #324]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b58:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b60:	494d      	ldr	r1, [pc, #308]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d028      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b74:	4b48      	ldr	r3, [pc, #288]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b7a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b82:	4945      	ldr	r1, [pc, #276]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b84:	4313      	orrs	r3, r2
 8003b86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b92:	d106      	bne.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b94:	4b40      	ldr	r3, [pc, #256]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	4a3f      	ldr	r2, [pc, #252]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b9e:	60d3      	str	r3, [r2, #12]
 8003ba0:	e011      	b.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003baa:	d10c      	bne.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	3304      	adds	r3, #4
 8003bb0:	2101      	movs	r1, #1
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f000 f882 	bl	8003cbc <RCCEx_PLLSAI1_Config>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003bbc:	7cfb      	ldrb	r3, [r7, #19]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d001      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8003bc2:	7cfb      	ldrb	r3, [r7, #19]
 8003bc4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d028      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003bd2:	4b31      	ldr	r3, [pc, #196]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bd8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be0:	492d      	ldr	r1, [pc, #180]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bf0:	d106      	bne.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bf2:	4b29      	ldr	r3, [pc, #164]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	4a28      	ldr	r2, [pc, #160]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003bf8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003bfc:	60d3      	str	r3, [r2, #12]
 8003bfe:	e011      	b.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c04:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c08:	d10c      	bne.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	3304      	adds	r3, #4
 8003c0e:	2101      	movs	r1, #1
 8003c10:	4618      	mov	r0, r3
 8003c12:	f000 f853 	bl	8003cbc <RCCEx_PLLSAI1_Config>
 8003c16:	4603      	mov	r3, r0
 8003c18:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c1a:	7cfb      	ldrb	r3, [r7, #19]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d001      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003c20:	7cfb      	ldrb	r3, [r7, #19]
 8003c22:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d01c      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c30:	4b19      	ldr	r3, [pc, #100]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c36:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c3e:	4916      	ldr	r1, [pc, #88]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c40:	4313      	orrs	r3, r2
 8003c42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c4e:	d10c      	bne.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	3304      	adds	r3, #4
 8003c54:	2102      	movs	r1, #2
 8003c56:	4618      	mov	r0, r3
 8003c58:	f000 f830 	bl	8003cbc <RCCEx_PLLSAI1_Config>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c60:	7cfb      	ldrb	r3, [r7, #19]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d001      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8003c66:	7cfb      	ldrb	r3, [r7, #19]
 8003c68:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d00a      	beq.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003c76:	4b08      	ldr	r3, [pc, #32]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c7c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c84:	4904      	ldr	r1, [pc, #16]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c86:	4313      	orrs	r3, r2
 8003c88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003c8c:	7cbb      	ldrb	r3, [r7, #18]
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3718      	adds	r7, #24
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	40021000 	.word	0x40021000

08003c9c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003ca0:	4b05      	ldr	r3, [pc, #20]	; (8003cb8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a04      	ldr	r2, [pc, #16]	; (8003cb8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003ca6:	f043 0304 	orr.w	r3, r3, #4
 8003caa:	6013      	str	r3, [r2, #0]
}
 8003cac:	bf00      	nop
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr
 8003cb6:	bf00      	nop
 8003cb8:	40021000 	.word	0x40021000

08003cbc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003cca:	4b74      	ldr	r3, [pc, #464]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	f003 0303 	and.w	r3, r3, #3
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d018      	beq.n	8003d08 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003cd6:	4b71      	ldr	r3, [pc, #452]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	f003 0203 	and.w	r2, r3, #3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d10d      	bne.n	8003d02 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
       ||
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d009      	beq.n	8003d02 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003cee:	4b6b      	ldr	r3, [pc, #428]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cf0:	68db      	ldr	r3, [r3, #12]
 8003cf2:	091b      	lsrs	r3, r3, #4
 8003cf4:	f003 0307 	and.w	r3, r3, #7
 8003cf8:	1c5a      	adds	r2, r3, #1
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685b      	ldr	r3, [r3, #4]
       ||
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d047      	beq.n	8003d92 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	73fb      	strb	r3, [r7, #15]
 8003d06:	e044      	b.n	8003d92 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2b03      	cmp	r3, #3
 8003d0e:	d018      	beq.n	8003d42 <RCCEx_PLLSAI1_Config+0x86>
 8003d10:	2b03      	cmp	r3, #3
 8003d12:	d825      	bhi.n	8003d60 <RCCEx_PLLSAI1_Config+0xa4>
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d002      	beq.n	8003d1e <RCCEx_PLLSAI1_Config+0x62>
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	d009      	beq.n	8003d30 <RCCEx_PLLSAI1_Config+0x74>
 8003d1c:	e020      	b.n	8003d60 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003d1e:	4b5f      	ldr	r3, [pc, #380]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0302 	and.w	r3, r3, #2
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d11d      	bne.n	8003d66 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d2e:	e01a      	b.n	8003d66 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003d30:	4b5a      	ldr	r3, [pc, #360]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d116      	bne.n	8003d6a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d40:	e013      	b.n	8003d6a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003d42:	4b56      	ldr	r3, [pc, #344]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d10f      	bne.n	8003d6e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003d4e:	4b53      	ldr	r3, [pc, #332]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d109      	bne.n	8003d6e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003d5e:	e006      	b.n	8003d6e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	73fb      	strb	r3, [r7, #15]
      break;
 8003d64:	e004      	b.n	8003d70 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d66:	bf00      	nop
 8003d68:	e002      	b.n	8003d70 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d6a:	bf00      	nop
 8003d6c:	e000      	b.n	8003d70 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d6e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003d70:	7bfb      	ldrb	r3, [r7, #15]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d10d      	bne.n	8003d92 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003d76:	4b49      	ldr	r3, [pc, #292]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6819      	ldr	r1, [r3, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	3b01      	subs	r3, #1
 8003d88:	011b      	lsls	r3, r3, #4
 8003d8a:	430b      	orrs	r3, r1
 8003d8c:	4943      	ldr	r1, [pc, #268]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003d92:	7bfb      	ldrb	r3, [r7, #15]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d17c      	bne.n	8003e92 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003d98:	4b40      	ldr	r3, [pc, #256]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a3f      	ldr	r2, [pc, #252]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d9e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003da2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003da4:	f7fd f880 	bl	8000ea8 <HAL_GetTick>
 8003da8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003daa:	e009      	b.n	8003dc0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003dac:	f7fd f87c 	bl	8000ea8 <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d902      	bls.n	8003dc0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	73fb      	strb	r3, [r7, #15]
        break;
 8003dbe:	e005      	b.n	8003dcc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003dc0:	4b36      	ldr	r3, [pc, #216]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d1ef      	bne.n	8003dac <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003dcc:	7bfb      	ldrb	r3, [r7, #15]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d15f      	bne.n	8003e92 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d110      	bne.n	8003dfa <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003dd8:	4b30      	ldr	r3, [pc, #192]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dda:	691b      	ldr	r3, [r3, #16]
 8003ddc:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003de0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	6892      	ldr	r2, [r2, #8]
 8003de8:	0211      	lsls	r1, r2, #8
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	68d2      	ldr	r2, [r2, #12]
 8003dee:	06d2      	lsls	r2, r2, #27
 8003df0:	430a      	orrs	r2, r1
 8003df2:	492a      	ldr	r1, [pc, #168]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003df4:	4313      	orrs	r3, r2
 8003df6:	610b      	str	r3, [r1, #16]
 8003df8:	e027      	b.n	8003e4a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d112      	bne.n	8003e26 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e00:	4b26      	ldr	r3, [pc, #152]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e02:	691b      	ldr	r3, [r3, #16]
 8003e04:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003e08:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	6892      	ldr	r2, [r2, #8]
 8003e10:	0211      	lsls	r1, r2, #8
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	6912      	ldr	r2, [r2, #16]
 8003e16:	0852      	lsrs	r2, r2, #1
 8003e18:	3a01      	subs	r2, #1
 8003e1a:	0552      	lsls	r2, r2, #21
 8003e1c:	430a      	orrs	r2, r1
 8003e1e:	491f      	ldr	r1, [pc, #124]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e20:	4313      	orrs	r3, r2
 8003e22:	610b      	str	r3, [r1, #16]
 8003e24:	e011      	b.n	8003e4a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e26:	4b1d      	ldr	r3, [pc, #116]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e28:	691b      	ldr	r3, [r3, #16]
 8003e2a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003e2e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	6892      	ldr	r2, [r2, #8]
 8003e36:	0211      	lsls	r1, r2, #8
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	6952      	ldr	r2, [r2, #20]
 8003e3c:	0852      	lsrs	r2, r2, #1
 8003e3e:	3a01      	subs	r2, #1
 8003e40:	0652      	lsls	r2, r2, #25
 8003e42:	430a      	orrs	r2, r1
 8003e44:	4915      	ldr	r1, [pc, #84]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003e4a:	4b14      	ldr	r3, [pc, #80]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a13      	ldr	r2, [pc, #76]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e50:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e54:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e56:	f7fd f827 	bl	8000ea8 <HAL_GetTick>
 8003e5a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e5c:	e009      	b.n	8003e72 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e5e:	f7fd f823 	bl	8000ea8 <HAL_GetTick>
 8003e62:	4602      	mov	r2, r0
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d902      	bls.n	8003e72 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	73fb      	strb	r3, [r7, #15]
          break;
 8003e70:	e005      	b.n	8003e7e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e72:	4b0a      	ldr	r3, [pc, #40]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d0ef      	beq.n	8003e5e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003e7e:	7bfb      	ldrb	r3, [r7, #15]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d106      	bne.n	8003e92 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003e84:	4b05      	ldr	r3, [pc, #20]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e86:	691a      	ldr	r2, [r3, #16]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	699b      	ldr	r3, [r3, #24]
 8003e8c:	4903      	ldr	r1, [pc, #12]	; (8003e9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3710      	adds	r7, #16
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	40021000 	.word	0x40021000

08003ea0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b082      	sub	sp, #8
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d101      	bne.n	8003eb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e049      	b.n	8003f46 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d106      	bne.n	8003ecc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f7fc fe4c 	bl	8000b64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2202      	movs	r2, #2
 8003ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	3304      	adds	r3, #4
 8003edc:	4619      	mov	r1, r3
 8003ede:	4610      	mov	r0, r2
 8003ee0:	f000 f9b4 	bl	800424c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3708      	adds	r7, #8
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
	...

08003f50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b085      	sub	sp, #20
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d001      	beq.n	8003f68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e03b      	b.n	8003fe0 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2202      	movs	r2, #2
 8003f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68da      	ldr	r2, [r3, #12]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f042 0201 	orr.w	r2, r2, #1
 8003f7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a19      	ldr	r2, [pc, #100]	; (8003fec <HAL_TIM_Base_Start_IT+0x9c>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d009      	beq.n	8003f9e <HAL_TIM_Base_Start_IT+0x4e>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f92:	d004      	beq.n	8003f9e <HAL_TIM_Base_Start_IT+0x4e>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a15      	ldr	r2, [pc, #84]	; (8003ff0 <HAL_TIM_Base_Start_IT+0xa0>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d115      	bne.n	8003fca <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	689a      	ldr	r2, [r3, #8]
 8003fa4:	4b13      	ldr	r3, [pc, #76]	; (8003ff4 <HAL_TIM_Base_Start_IT+0xa4>)
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2b06      	cmp	r3, #6
 8003fae:	d015      	beq.n	8003fdc <HAL_TIM_Base_Start_IT+0x8c>
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fb6:	d011      	beq.n	8003fdc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f042 0201 	orr.w	r2, r2, #1
 8003fc6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fc8:	e008      	b.n	8003fdc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f042 0201 	orr.w	r2, r2, #1
 8003fd8:	601a      	str	r2, [r3, #0]
 8003fda:	e000      	b.n	8003fde <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fdc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003fde:	2300      	movs	r3, #0
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3714      	adds	r7, #20
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr
 8003fec:	40012c00 	.word	0x40012c00
 8003ff0:	40014000 	.word	0x40014000
 8003ff4:	00010007 	.word	0x00010007

08003ff8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	f003 0302 	and.w	r3, r3, #2
 8004016:	2b00      	cmp	r3, #0
 8004018:	d020      	beq.n	800405c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	f003 0302 	and.w	r3, r3, #2
 8004020:	2b00      	cmp	r3, #0
 8004022:	d01b      	beq.n	800405c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f06f 0202 	mvn.w	r2, #2
 800402c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2201      	movs	r2, #1
 8004032:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	699b      	ldr	r3, [r3, #24]
 800403a:	f003 0303 	and.w	r3, r3, #3
 800403e:	2b00      	cmp	r3, #0
 8004040:	d003      	beq.n	800404a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 f8e4 	bl	8004210 <HAL_TIM_IC_CaptureCallback>
 8004048:	e005      	b.n	8004056 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 f8d6 	bl	80041fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f000 f8e7 	bl	8004224 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	f003 0304 	and.w	r3, r3, #4
 8004062:	2b00      	cmp	r3, #0
 8004064:	d020      	beq.n	80040a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f003 0304 	and.w	r3, r3, #4
 800406c:	2b00      	cmp	r3, #0
 800406e:	d01b      	beq.n	80040a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f06f 0204 	mvn.w	r2, #4
 8004078:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2202      	movs	r2, #2
 800407e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	699b      	ldr	r3, [r3, #24]
 8004086:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800408a:	2b00      	cmp	r3, #0
 800408c:	d003      	beq.n	8004096 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f000 f8be 	bl	8004210 <HAL_TIM_IC_CaptureCallback>
 8004094:	e005      	b.n	80040a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 f8b0 	bl	80041fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f000 f8c1 	bl	8004224 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	f003 0308 	and.w	r3, r3, #8
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d020      	beq.n	80040f4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f003 0308 	and.w	r3, r3, #8
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d01b      	beq.n	80040f4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f06f 0208 	mvn.w	r2, #8
 80040c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2204      	movs	r2, #4
 80040ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	69db      	ldr	r3, [r3, #28]
 80040d2:	f003 0303 	and.w	r3, r3, #3
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d003      	beq.n	80040e2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f000 f898 	bl	8004210 <HAL_TIM_IC_CaptureCallback>
 80040e0:	e005      	b.n	80040ee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f000 f88a 	bl	80041fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f000 f89b 	bl	8004224 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	f003 0310 	and.w	r3, r3, #16
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d020      	beq.n	8004140 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f003 0310 	and.w	r3, r3, #16
 8004104:	2b00      	cmp	r3, #0
 8004106:	d01b      	beq.n	8004140 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f06f 0210 	mvn.w	r2, #16
 8004110:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2208      	movs	r2, #8
 8004116:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	69db      	ldr	r3, [r3, #28]
 800411e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004122:	2b00      	cmp	r3, #0
 8004124:	d003      	beq.n	800412e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f000 f872 	bl	8004210 <HAL_TIM_IC_CaptureCallback>
 800412c:	e005      	b.n	800413a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 f864 	bl	80041fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f000 f875 	bl	8004224 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	f003 0301 	and.w	r3, r3, #1
 8004146:	2b00      	cmp	r3, #0
 8004148:	d00c      	beq.n	8004164 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	f003 0301 	and.w	r3, r3, #1
 8004150:	2b00      	cmp	r3, #0
 8004152:	d007      	beq.n	8004164 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f06f 0201 	mvn.w	r2, #1
 800415c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f7fc fbc8 	bl	80008f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800416a:	2b00      	cmp	r3, #0
 800416c:	d00c      	beq.n	8004188 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004174:	2b00      	cmp	r3, #0
 8004176:	d007      	beq.n	8004188 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004180:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f000 f936 	bl	80043f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800418e:	2b00      	cmp	r3, #0
 8004190:	d00c      	beq.n	80041ac <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004198:	2b00      	cmp	r3, #0
 800419a:	d007      	beq.n	80041ac <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80041a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f000 f92e 	bl	8004408 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d00c      	beq.n	80041d0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d007      	beq.n	80041d0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80041c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f000 f834 	bl	8004238 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	f003 0320 	and.w	r3, r3, #32
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00c      	beq.n	80041f4 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	f003 0320 	and.w	r3, r3, #32
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d007      	beq.n	80041f4 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f06f 0220 	mvn.w	r2, #32
 80041ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f000 f8f6 	bl	80043e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80041f4:	bf00      	nop
 80041f6:	3710      	adds	r7, #16
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}

080041fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004204:	bf00      	nop
 8004206:	370c      	adds	r7, #12
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr

08004210 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004218:	bf00      	nop
 800421a:	370c      	adds	r7, #12
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr

08004224 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800422c:	bf00      	nop
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr

08004238 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004240:	bf00      	nop
 8004242:	370c      	adds	r7, #12
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr

0800424c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800424c:	b480      	push	{r7}
 800424e:	b085      	sub	sp, #20
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	4a2a      	ldr	r2, [pc, #168]	; (8004308 <TIM_Base_SetConfig+0xbc>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d003      	beq.n	800426c <TIM_Base_SetConfig+0x20>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800426a:	d108      	bne.n	800427e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004272:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	68fa      	ldr	r2, [r7, #12]
 800427a:	4313      	orrs	r3, r2
 800427c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a21      	ldr	r2, [pc, #132]	; (8004308 <TIM_Base_SetConfig+0xbc>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d00b      	beq.n	800429e <TIM_Base_SetConfig+0x52>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800428c:	d007      	beq.n	800429e <TIM_Base_SetConfig+0x52>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a1e      	ldr	r2, [pc, #120]	; (800430c <TIM_Base_SetConfig+0xc0>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d003      	beq.n	800429e <TIM_Base_SetConfig+0x52>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a1d      	ldr	r2, [pc, #116]	; (8004310 <TIM_Base_SetConfig+0xc4>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d108      	bne.n	80042b0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	68fa      	ldr	r2, [r7, #12]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	695b      	ldr	r3, [r3, #20]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	68fa      	ldr	r2, [r7, #12]
 80042c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	689a      	ldr	r2, [r3, #8]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4a0c      	ldr	r2, [pc, #48]	; (8004308 <TIM_Base_SetConfig+0xbc>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d007      	beq.n	80042ec <TIM_Base_SetConfig+0xa0>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	4a0b      	ldr	r2, [pc, #44]	; (800430c <TIM_Base_SetConfig+0xc0>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d003      	beq.n	80042ec <TIM_Base_SetConfig+0xa0>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	4a0a      	ldr	r2, [pc, #40]	; (8004310 <TIM_Base_SetConfig+0xc4>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d103      	bne.n	80042f4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	691a      	ldr	r2, [r3, #16]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	615a      	str	r2, [r3, #20]
}
 80042fa:	bf00      	nop
 80042fc:	3714      	adds	r7, #20
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr
 8004306:	bf00      	nop
 8004308:	40012c00 	.word	0x40012c00
 800430c:	40014000 	.word	0x40014000
 8004310:	40014400 	.word	0x40014400

08004314 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004314:	b480      	push	{r7}
 8004316:	b085      	sub	sp, #20
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004324:	2b01      	cmp	r3, #1
 8004326:	d101      	bne.n	800432c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004328:	2302      	movs	r3, #2
 800432a:	e04f      	b.n	80043cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2202      	movs	r2, #2
 8004338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a21      	ldr	r2, [pc, #132]	; (80043d8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d108      	bne.n	8004368 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800435c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	68fa      	ldr	r2, [r7, #12]
 8004364:	4313      	orrs	r3, r2
 8004366:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800436e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	4313      	orrs	r3, r2
 8004378:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	68fa      	ldr	r2, [r7, #12]
 8004380:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a14      	ldr	r2, [pc, #80]	; (80043d8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d009      	beq.n	80043a0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004394:	d004      	beq.n	80043a0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a10      	ldr	r2, [pc, #64]	; (80043dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d10c      	bne.n	80043ba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043a6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	68ba      	ldr	r2, [r7, #8]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	68ba      	ldr	r2, [r7, #8]
 80043b8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2201      	movs	r2, #1
 80043be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043ca:	2300      	movs	r3, #0
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3714      	adds	r7, #20
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr
 80043d8:	40012c00 	.word	0x40012c00
 80043dc:	40014000 	.word	0x40014000

080043e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80043e8:	bf00      	nop
 80043ea:	370c      	adds	r7, #12
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr

080043f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80043fc:	bf00      	nop
 80043fe:	370c      	adds	r7, #12
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr

08004408 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004410:	bf00      	nop
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d101      	bne.n	800442e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e040      	b.n	80044b0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004432:	2b00      	cmp	r3, #0
 8004434:	d106      	bne.n	8004444 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f7fc fbb6 	bl	8000bb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2224      	movs	r2, #36	; 0x24
 8004448:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f022 0201 	bic.w	r2, r2, #1
 8004458:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445e:	2b00      	cmp	r3, #0
 8004460:	d002      	beq.n	8004468 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f000 fade 	bl	8004a24 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f000 f8af 	bl	80045cc <UART_SetConfig>
 800446e:	4603      	mov	r3, r0
 8004470:	2b01      	cmp	r3, #1
 8004472:	d101      	bne.n	8004478 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e01b      	b.n	80044b0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	685a      	ldr	r2, [r3, #4]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004486:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	689a      	ldr	r2, [r3, #8]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004496:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f042 0201 	orr.w	r2, r2, #1
 80044a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f000 fb5d 	bl	8004b68 <UART_CheckIdleState>
 80044ae:	4603      	mov	r3, r0
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3708      	adds	r7, #8
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b08a      	sub	sp, #40	; 0x28
 80044bc:	af02      	add	r7, sp, #8
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	60b9      	str	r1, [r7, #8]
 80044c2:	603b      	str	r3, [r7, #0]
 80044c4:	4613      	mov	r3, r2
 80044c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044cc:	2b20      	cmp	r3, #32
 80044ce:	d178      	bne.n	80045c2 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d002      	beq.n	80044dc <HAL_UART_Transmit+0x24>
 80044d6:	88fb      	ldrh	r3, [r7, #6]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d101      	bne.n	80044e0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e071      	b.n	80045c4 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2221      	movs	r2, #33	; 0x21
 80044ec:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044ee:	f7fc fcdb 	bl	8000ea8 <HAL_GetTick>
 80044f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	88fa      	ldrh	r2, [r7, #6]
 80044f8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	88fa      	ldrh	r2, [r7, #6]
 8004500:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800450c:	d108      	bne.n	8004520 <HAL_UART_Transmit+0x68>
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d104      	bne.n	8004520 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004516:	2300      	movs	r3, #0
 8004518:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	61bb      	str	r3, [r7, #24]
 800451e:	e003      	b.n	8004528 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004524:	2300      	movs	r3, #0
 8004526:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004528:	e030      	b.n	800458c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	9300      	str	r3, [sp, #0]
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	2200      	movs	r2, #0
 8004532:	2180      	movs	r1, #128	; 0x80
 8004534:	68f8      	ldr	r0, [r7, #12]
 8004536:	f000 fbbf 	bl	8004cb8 <UART_WaitOnFlagUntilTimeout>
 800453a:	4603      	mov	r3, r0
 800453c:	2b00      	cmp	r3, #0
 800453e:	d004      	beq.n	800454a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2220      	movs	r2, #32
 8004544:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	e03c      	b.n	80045c4 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d10b      	bne.n	8004568 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004550:	69bb      	ldr	r3, [r7, #24]
 8004552:	881a      	ldrh	r2, [r3, #0]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800455c:	b292      	uxth	r2, r2
 800455e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	3302      	adds	r3, #2
 8004564:	61bb      	str	r3, [r7, #24]
 8004566:	e008      	b.n	800457a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	781a      	ldrb	r2, [r3, #0]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	b292      	uxth	r2, r2
 8004572:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004574:	69fb      	ldr	r3, [r7, #28]
 8004576:	3301      	adds	r3, #1
 8004578:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004580:	b29b      	uxth	r3, r3
 8004582:	3b01      	subs	r3, #1
 8004584:	b29a      	uxth	r2, r3
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004592:	b29b      	uxth	r3, r3
 8004594:	2b00      	cmp	r3, #0
 8004596:	d1c8      	bne.n	800452a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	9300      	str	r3, [sp, #0]
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	2200      	movs	r2, #0
 80045a0:	2140      	movs	r1, #64	; 0x40
 80045a2:	68f8      	ldr	r0, [r7, #12]
 80045a4:	f000 fb88 	bl	8004cb8 <UART_WaitOnFlagUntilTimeout>
 80045a8:	4603      	mov	r3, r0
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d004      	beq.n	80045b8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2220      	movs	r2, #32
 80045b2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80045b4:	2303      	movs	r3, #3
 80045b6:	e005      	b.n	80045c4 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2220      	movs	r2, #32
 80045bc:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80045be:	2300      	movs	r3, #0
 80045c0:	e000      	b.n	80045c4 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80045c2:	2302      	movs	r3, #2
  }
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3720      	adds	r7, #32
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}

080045cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045d0:	b08a      	sub	sp, #40	; 0x28
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80045d6:	2300      	movs	r3, #0
 80045d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	689a      	ldr	r2, [r3, #8]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	691b      	ldr	r3, [r3, #16]
 80045e4:	431a      	orrs	r2, r3
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	431a      	orrs	r2, r3
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	69db      	ldr	r3, [r3, #28]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	4bb4      	ldr	r3, [pc, #720]	; (80048cc <UART_SetConfig+0x300>)
 80045fc:	4013      	ands	r3, r2
 80045fe:	68fa      	ldr	r2, [r7, #12]
 8004600:	6812      	ldr	r2, [r2, #0]
 8004602:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004604:	430b      	orrs	r3, r1
 8004606:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	68da      	ldr	r2, [r3, #12]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	430a      	orrs	r2, r1
 800461c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	699b      	ldr	r3, [r3, #24]
 8004622:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4aa9      	ldr	r2, [pc, #676]	; (80048d0 <UART_SetConfig+0x304>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d004      	beq.n	8004638 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6a1b      	ldr	r3, [r3, #32]
 8004632:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004634:	4313      	orrs	r3, r2
 8004636:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004648:	430a      	orrs	r2, r1
 800464a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4aa0      	ldr	r2, [pc, #640]	; (80048d4 <UART_SetConfig+0x308>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d126      	bne.n	80046a4 <UART_SetConfig+0xd8>
 8004656:	4ba0      	ldr	r3, [pc, #640]	; (80048d8 <UART_SetConfig+0x30c>)
 8004658:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800465c:	f003 0303 	and.w	r3, r3, #3
 8004660:	2b03      	cmp	r3, #3
 8004662:	d81b      	bhi.n	800469c <UART_SetConfig+0xd0>
 8004664:	a201      	add	r2, pc, #4	; (adr r2, 800466c <UART_SetConfig+0xa0>)
 8004666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800466a:	bf00      	nop
 800466c:	0800467d 	.word	0x0800467d
 8004670:	0800468d 	.word	0x0800468d
 8004674:	08004685 	.word	0x08004685
 8004678:	08004695 	.word	0x08004695
 800467c:	2301      	movs	r3, #1
 800467e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004682:	e080      	b.n	8004786 <UART_SetConfig+0x1ba>
 8004684:	2302      	movs	r3, #2
 8004686:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800468a:	e07c      	b.n	8004786 <UART_SetConfig+0x1ba>
 800468c:	2304      	movs	r3, #4
 800468e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004692:	e078      	b.n	8004786 <UART_SetConfig+0x1ba>
 8004694:	2308      	movs	r3, #8
 8004696:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800469a:	e074      	b.n	8004786 <UART_SetConfig+0x1ba>
 800469c:	2310      	movs	r3, #16
 800469e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046a2:	e070      	b.n	8004786 <UART_SetConfig+0x1ba>
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a8c      	ldr	r2, [pc, #560]	; (80048dc <UART_SetConfig+0x310>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d138      	bne.n	8004720 <UART_SetConfig+0x154>
 80046ae:	4b8a      	ldr	r3, [pc, #552]	; (80048d8 <UART_SetConfig+0x30c>)
 80046b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b4:	f003 030c 	and.w	r3, r3, #12
 80046b8:	2b0c      	cmp	r3, #12
 80046ba:	d82d      	bhi.n	8004718 <UART_SetConfig+0x14c>
 80046bc:	a201      	add	r2, pc, #4	; (adr r2, 80046c4 <UART_SetConfig+0xf8>)
 80046be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046c2:	bf00      	nop
 80046c4:	080046f9 	.word	0x080046f9
 80046c8:	08004719 	.word	0x08004719
 80046cc:	08004719 	.word	0x08004719
 80046d0:	08004719 	.word	0x08004719
 80046d4:	08004709 	.word	0x08004709
 80046d8:	08004719 	.word	0x08004719
 80046dc:	08004719 	.word	0x08004719
 80046e0:	08004719 	.word	0x08004719
 80046e4:	08004701 	.word	0x08004701
 80046e8:	08004719 	.word	0x08004719
 80046ec:	08004719 	.word	0x08004719
 80046f0:	08004719 	.word	0x08004719
 80046f4:	08004711 	.word	0x08004711
 80046f8:	2300      	movs	r3, #0
 80046fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046fe:	e042      	b.n	8004786 <UART_SetConfig+0x1ba>
 8004700:	2302      	movs	r3, #2
 8004702:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004706:	e03e      	b.n	8004786 <UART_SetConfig+0x1ba>
 8004708:	2304      	movs	r3, #4
 800470a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800470e:	e03a      	b.n	8004786 <UART_SetConfig+0x1ba>
 8004710:	2308      	movs	r3, #8
 8004712:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004716:	e036      	b.n	8004786 <UART_SetConfig+0x1ba>
 8004718:	2310      	movs	r3, #16
 800471a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800471e:	e032      	b.n	8004786 <UART_SetConfig+0x1ba>
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a6a      	ldr	r2, [pc, #424]	; (80048d0 <UART_SetConfig+0x304>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d12a      	bne.n	8004780 <UART_SetConfig+0x1b4>
 800472a:	4b6b      	ldr	r3, [pc, #428]	; (80048d8 <UART_SetConfig+0x30c>)
 800472c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004730:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004734:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004738:	d01a      	beq.n	8004770 <UART_SetConfig+0x1a4>
 800473a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800473e:	d81b      	bhi.n	8004778 <UART_SetConfig+0x1ac>
 8004740:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004744:	d00c      	beq.n	8004760 <UART_SetConfig+0x194>
 8004746:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800474a:	d815      	bhi.n	8004778 <UART_SetConfig+0x1ac>
 800474c:	2b00      	cmp	r3, #0
 800474e:	d003      	beq.n	8004758 <UART_SetConfig+0x18c>
 8004750:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004754:	d008      	beq.n	8004768 <UART_SetConfig+0x19c>
 8004756:	e00f      	b.n	8004778 <UART_SetConfig+0x1ac>
 8004758:	2300      	movs	r3, #0
 800475a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800475e:	e012      	b.n	8004786 <UART_SetConfig+0x1ba>
 8004760:	2302      	movs	r3, #2
 8004762:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004766:	e00e      	b.n	8004786 <UART_SetConfig+0x1ba>
 8004768:	2304      	movs	r3, #4
 800476a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800476e:	e00a      	b.n	8004786 <UART_SetConfig+0x1ba>
 8004770:	2308      	movs	r3, #8
 8004772:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004776:	e006      	b.n	8004786 <UART_SetConfig+0x1ba>
 8004778:	2310      	movs	r3, #16
 800477a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800477e:	e002      	b.n	8004786 <UART_SetConfig+0x1ba>
 8004780:	2310      	movs	r3, #16
 8004782:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a51      	ldr	r2, [pc, #324]	; (80048d0 <UART_SetConfig+0x304>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d17a      	bne.n	8004886 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004790:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004794:	2b08      	cmp	r3, #8
 8004796:	d824      	bhi.n	80047e2 <UART_SetConfig+0x216>
 8004798:	a201      	add	r2, pc, #4	; (adr r2, 80047a0 <UART_SetConfig+0x1d4>)
 800479a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800479e:	bf00      	nop
 80047a0:	080047c5 	.word	0x080047c5
 80047a4:	080047e3 	.word	0x080047e3
 80047a8:	080047cd 	.word	0x080047cd
 80047ac:	080047e3 	.word	0x080047e3
 80047b0:	080047d3 	.word	0x080047d3
 80047b4:	080047e3 	.word	0x080047e3
 80047b8:	080047e3 	.word	0x080047e3
 80047bc:	080047e3 	.word	0x080047e3
 80047c0:	080047db 	.word	0x080047db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047c4:	f7fe ffe8 	bl	8003798 <HAL_RCC_GetPCLK1Freq>
 80047c8:	61f8      	str	r0, [r7, #28]
        break;
 80047ca:	e010      	b.n	80047ee <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047cc:	4b44      	ldr	r3, [pc, #272]	; (80048e0 <UART_SetConfig+0x314>)
 80047ce:	61fb      	str	r3, [r7, #28]
        break;
 80047d0:	e00d      	b.n	80047ee <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047d2:	f7fe ff49 	bl	8003668 <HAL_RCC_GetSysClockFreq>
 80047d6:	61f8      	str	r0, [r7, #28]
        break;
 80047d8:	e009      	b.n	80047ee <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047de:	61fb      	str	r3, [r7, #28]
        break;
 80047e0:	e005      	b.n	80047ee <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80047e2:	2300      	movs	r3, #0
 80047e4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80047ec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	f000 8107 	beq.w	8004a04 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	685a      	ldr	r2, [r3, #4]
 80047fa:	4613      	mov	r3, r2
 80047fc:	005b      	lsls	r3, r3, #1
 80047fe:	4413      	add	r3, r2
 8004800:	69fa      	ldr	r2, [r7, #28]
 8004802:	429a      	cmp	r2, r3
 8004804:	d305      	bcc.n	8004812 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800480c:	69fa      	ldr	r2, [r7, #28]
 800480e:	429a      	cmp	r2, r3
 8004810:	d903      	bls.n	800481a <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004818:	e0f4      	b.n	8004a04 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	2200      	movs	r2, #0
 800481e:	461c      	mov	r4, r3
 8004820:	4615      	mov	r5, r2
 8004822:	f04f 0200 	mov.w	r2, #0
 8004826:	f04f 0300 	mov.w	r3, #0
 800482a:	022b      	lsls	r3, r5, #8
 800482c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004830:	0222      	lsls	r2, r4, #8
 8004832:	68f9      	ldr	r1, [r7, #12]
 8004834:	6849      	ldr	r1, [r1, #4]
 8004836:	0849      	lsrs	r1, r1, #1
 8004838:	2000      	movs	r0, #0
 800483a:	4688      	mov	r8, r1
 800483c:	4681      	mov	r9, r0
 800483e:	eb12 0a08 	adds.w	sl, r2, r8
 8004842:	eb43 0b09 	adc.w	fp, r3, r9
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	603b      	str	r3, [r7, #0]
 800484e:	607a      	str	r2, [r7, #4]
 8004850:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004854:	4650      	mov	r0, sl
 8004856:	4659      	mov	r1, fp
 8004858:	f7fb fd0a 	bl	8000270 <__aeabi_uldivmod>
 800485c:	4602      	mov	r2, r0
 800485e:	460b      	mov	r3, r1
 8004860:	4613      	mov	r3, r2
 8004862:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004864:	69bb      	ldr	r3, [r7, #24]
 8004866:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800486a:	d308      	bcc.n	800487e <UART_SetConfig+0x2b2>
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004872:	d204      	bcs.n	800487e <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	69ba      	ldr	r2, [r7, #24]
 800487a:	60da      	str	r2, [r3, #12]
 800487c:	e0c2      	b.n	8004a04 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004884:	e0be      	b.n	8004a04 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	69db      	ldr	r3, [r3, #28]
 800488a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800488e:	d16a      	bne.n	8004966 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8004890:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004894:	2b08      	cmp	r3, #8
 8004896:	d834      	bhi.n	8004902 <UART_SetConfig+0x336>
 8004898:	a201      	add	r2, pc, #4	; (adr r2, 80048a0 <UART_SetConfig+0x2d4>)
 800489a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800489e:	bf00      	nop
 80048a0:	080048c5 	.word	0x080048c5
 80048a4:	080048e5 	.word	0x080048e5
 80048a8:	080048ed 	.word	0x080048ed
 80048ac:	08004903 	.word	0x08004903
 80048b0:	080048f3 	.word	0x080048f3
 80048b4:	08004903 	.word	0x08004903
 80048b8:	08004903 	.word	0x08004903
 80048bc:	08004903 	.word	0x08004903
 80048c0:	080048fb 	.word	0x080048fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048c4:	f7fe ff68 	bl	8003798 <HAL_RCC_GetPCLK1Freq>
 80048c8:	61f8      	str	r0, [r7, #28]
        break;
 80048ca:	e020      	b.n	800490e <UART_SetConfig+0x342>
 80048cc:	efff69f3 	.word	0xefff69f3
 80048d0:	40008000 	.word	0x40008000
 80048d4:	40013800 	.word	0x40013800
 80048d8:	40021000 	.word	0x40021000
 80048dc:	40004400 	.word	0x40004400
 80048e0:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048e4:	f7fe ff6e 	bl	80037c4 <HAL_RCC_GetPCLK2Freq>
 80048e8:	61f8      	str	r0, [r7, #28]
        break;
 80048ea:	e010      	b.n	800490e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048ec:	4b4c      	ldr	r3, [pc, #304]	; (8004a20 <UART_SetConfig+0x454>)
 80048ee:	61fb      	str	r3, [r7, #28]
        break;
 80048f0:	e00d      	b.n	800490e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048f2:	f7fe feb9 	bl	8003668 <HAL_RCC_GetSysClockFreq>
 80048f6:	61f8      	str	r0, [r7, #28]
        break;
 80048f8:	e009      	b.n	800490e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048fe:	61fb      	str	r3, [r7, #28]
        break;
 8004900:	e005      	b.n	800490e <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8004902:	2300      	movs	r3, #0
 8004904:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800490c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d077      	beq.n	8004a04 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	005a      	lsls	r2, r3, #1
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	085b      	lsrs	r3, r3, #1
 800491e:	441a      	add	r2, r3
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	fbb2 f3f3 	udiv	r3, r2, r3
 8004928:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800492a:	69bb      	ldr	r3, [r7, #24]
 800492c:	2b0f      	cmp	r3, #15
 800492e:	d916      	bls.n	800495e <UART_SetConfig+0x392>
 8004930:	69bb      	ldr	r3, [r7, #24]
 8004932:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004936:	d212      	bcs.n	800495e <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004938:	69bb      	ldr	r3, [r7, #24]
 800493a:	b29b      	uxth	r3, r3
 800493c:	f023 030f 	bic.w	r3, r3, #15
 8004940:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	085b      	lsrs	r3, r3, #1
 8004946:	b29b      	uxth	r3, r3
 8004948:	f003 0307 	and.w	r3, r3, #7
 800494c:	b29a      	uxth	r2, r3
 800494e:	8afb      	ldrh	r3, [r7, #22]
 8004950:	4313      	orrs	r3, r2
 8004952:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	8afa      	ldrh	r2, [r7, #22]
 800495a:	60da      	str	r2, [r3, #12]
 800495c:	e052      	b.n	8004a04 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004964:	e04e      	b.n	8004a04 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004966:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800496a:	2b08      	cmp	r3, #8
 800496c:	d827      	bhi.n	80049be <UART_SetConfig+0x3f2>
 800496e:	a201      	add	r2, pc, #4	; (adr r2, 8004974 <UART_SetConfig+0x3a8>)
 8004970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004974:	08004999 	.word	0x08004999
 8004978:	080049a1 	.word	0x080049a1
 800497c:	080049a9 	.word	0x080049a9
 8004980:	080049bf 	.word	0x080049bf
 8004984:	080049af 	.word	0x080049af
 8004988:	080049bf 	.word	0x080049bf
 800498c:	080049bf 	.word	0x080049bf
 8004990:	080049bf 	.word	0x080049bf
 8004994:	080049b7 	.word	0x080049b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004998:	f7fe fefe 	bl	8003798 <HAL_RCC_GetPCLK1Freq>
 800499c:	61f8      	str	r0, [r7, #28]
        break;
 800499e:	e014      	b.n	80049ca <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049a0:	f7fe ff10 	bl	80037c4 <HAL_RCC_GetPCLK2Freq>
 80049a4:	61f8      	str	r0, [r7, #28]
        break;
 80049a6:	e010      	b.n	80049ca <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049a8:	4b1d      	ldr	r3, [pc, #116]	; (8004a20 <UART_SetConfig+0x454>)
 80049aa:	61fb      	str	r3, [r7, #28]
        break;
 80049ac:	e00d      	b.n	80049ca <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049ae:	f7fe fe5b 	bl	8003668 <HAL_RCC_GetSysClockFreq>
 80049b2:	61f8      	str	r0, [r7, #28]
        break;
 80049b4:	e009      	b.n	80049ca <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049ba:	61fb      	str	r3, [r7, #28]
        break;
 80049bc:	e005      	b.n	80049ca <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80049be:	2300      	movs	r3, #0
 80049c0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80049c8:	bf00      	nop
    }

    if (pclk != 0U)
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d019      	beq.n	8004a04 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	085a      	lsrs	r2, r3, #1
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	441a      	add	r2, r3
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	fbb2 f3f3 	udiv	r3, r2, r3
 80049e2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	2b0f      	cmp	r3, #15
 80049e8:	d909      	bls.n	80049fe <UART_SetConfig+0x432>
 80049ea:	69bb      	ldr	r3, [r7, #24]
 80049ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049f0:	d205      	bcs.n	80049fe <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	b29a      	uxth	r2, r3
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	60da      	str	r2, [r3, #12]
 80049fc:	e002      	b.n	8004a04 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2200      	movs	r2, #0
 8004a08:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004a10:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3728      	adds	r7, #40	; 0x28
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a1e:	bf00      	nop
 8004a20:	00f42400 	.word	0x00f42400

08004a24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a30:	f003 0308 	and.w	r3, r3, #8
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d00a      	beq.n	8004a4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	430a      	orrs	r2, r1
 8004a4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a52:	f003 0301 	and.w	r3, r3, #1
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d00a      	beq.n	8004a70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	430a      	orrs	r2, r1
 8004a6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a74:	f003 0302 	and.w	r3, r3, #2
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d00a      	beq.n	8004a92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	430a      	orrs	r2, r1
 8004a90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a96:	f003 0304 	and.w	r3, r3, #4
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d00a      	beq.n	8004ab4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	430a      	orrs	r2, r1
 8004ab2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab8:	f003 0310 	and.w	r3, r3, #16
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d00a      	beq.n	8004ad6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	430a      	orrs	r2, r1
 8004ad4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ada:	f003 0320 	and.w	r3, r3, #32
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d00a      	beq.n	8004af8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	430a      	orrs	r2, r1
 8004af6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d01a      	beq.n	8004b3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	430a      	orrs	r2, r1
 8004b18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b22:	d10a      	bne.n	8004b3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	430a      	orrs	r2, r1
 8004b38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d00a      	beq.n	8004b5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	430a      	orrs	r2, r1
 8004b5a:	605a      	str	r2, [r3, #4]
  }
}
 8004b5c:	bf00      	nop
 8004b5e:	370c      	adds	r7, #12
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr

08004b68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b098      	sub	sp, #96	; 0x60
 8004b6c:	af02      	add	r7, sp, #8
 8004b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b78:	f7fc f996 	bl	8000ea8 <HAL_GetTick>
 8004b7c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 0308 	and.w	r3, r3, #8
 8004b88:	2b08      	cmp	r3, #8
 8004b8a:	d12e      	bne.n	8004bea <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b90:	9300      	str	r3, [sp, #0]
 8004b92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b94:	2200      	movs	r2, #0
 8004b96:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f000 f88c 	bl	8004cb8 <UART_WaitOnFlagUntilTimeout>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d021      	beq.n	8004bea <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bae:	e853 3f00 	ldrex	r3, [r3]
 8004bb2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bba:	653b      	str	r3, [r7, #80]	; 0x50
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bc4:	647b      	str	r3, [r7, #68]	; 0x44
 8004bc6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004bca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004bcc:	e841 2300 	strex	r3, r2, [r1]
 8004bd0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004bd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d1e6      	bne.n	8004ba6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2220      	movs	r2, #32
 8004bdc:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e062      	b.n	8004cb0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 0304 	and.w	r3, r3, #4
 8004bf4:	2b04      	cmp	r3, #4
 8004bf6:	d149      	bne.n	8004c8c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bf8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004bfc:	9300      	str	r3, [sp, #0]
 8004bfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c00:	2200      	movs	r2, #0
 8004c02:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 f856 	bl	8004cb8 <UART_WaitOnFlagUntilTimeout>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d03c      	beq.n	8004c8c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1a:	e853 3f00 	ldrex	r3, [r3]
 8004c1e:	623b      	str	r3, [r7, #32]
   return(result);
 8004c20:	6a3b      	ldr	r3, [r7, #32]
 8004c22:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c30:	633b      	str	r3, [r7, #48]	; 0x30
 8004c32:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c34:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c38:	e841 2300 	strex	r3, r2, [r1]
 8004c3c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d1e6      	bne.n	8004c12 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	3308      	adds	r3, #8
 8004c4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	e853 3f00 	ldrex	r3, [r3]
 8004c52:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f023 0301 	bic.w	r3, r3, #1
 8004c5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	3308      	adds	r3, #8
 8004c62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c64:	61fa      	str	r2, [r7, #28]
 8004c66:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c68:	69b9      	ldr	r1, [r7, #24]
 8004c6a:	69fa      	ldr	r2, [r7, #28]
 8004c6c:	e841 2300 	strex	r3, r2, [r1]
 8004c70:	617b      	str	r3, [r7, #20]
   return(result);
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d1e5      	bne.n	8004c44 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2220      	movs	r2, #32
 8004c7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2200      	movs	r2, #0
 8004c84:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c88:	2303      	movs	r3, #3
 8004c8a:	e011      	b.n	8004cb0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2220      	movs	r2, #32
 8004c90:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2220      	movs	r2, #32
 8004c96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004cae:	2300      	movs	r3, #0
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3758      	adds	r7, #88	; 0x58
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}

08004cb8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b084      	sub	sp, #16
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	60f8      	str	r0, [r7, #12]
 8004cc0:	60b9      	str	r1, [r7, #8]
 8004cc2:	603b      	str	r3, [r7, #0]
 8004cc4:	4613      	mov	r3, r2
 8004cc6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cc8:	e049      	b.n	8004d5e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cd0:	d045      	beq.n	8004d5e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cd2:	f7fc f8e9 	bl	8000ea8 <HAL_GetTick>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	1ad3      	subs	r3, r2, r3
 8004cdc:	69ba      	ldr	r2, [r7, #24]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d302      	bcc.n	8004ce8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ce2:	69bb      	ldr	r3, [r7, #24]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d101      	bne.n	8004cec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004ce8:	2303      	movs	r3, #3
 8004cea:	e048      	b.n	8004d7e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 0304 	and.w	r3, r3, #4
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d031      	beq.n	8004d5e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	69db      	ldr	r3, [r3, #28]
 8004d00:	f003 0308 	and.w	r3, r3, #8
 8004d04:	2b08      	cmp	r3, #8
 8004d06:	d110      	bne.n	8004d2a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	2208      	movs	r2, #8
 8004d0e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d10:	68f8      	ldr	r0, [r7, #12]
 8004d12:	f000 f838 	bl	8004d86 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2208      	movs	r2, #8
 8004d1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2200      	movs	r2, #0
 8004d22:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	e029      	b.n	8004d7e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	69db      	ldr	r3, [r3, #28]
 8004d30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d38:	d111      	bne.n	8004d5e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d42:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d44:	68f8      	ldr	r0, [r7, #12]
 8004d46:	f000 f81e 	bl	8004d86 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2220      	movs	r2, #32
 8004d4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2200      	movs	r2, #0
 8004d56:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e00f      	b.n	8004d7e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	69da      	ldr	r2, [r3, #28]
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	4013      	ands	r3, r2
 8004d68:	68ba      	ldr	r2, [r7, #8]
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	bf0c      	ite	eq
 8004d6e:	2301      	moveq	r3, #1
 8004d70:	2300      	movne	r3, #0
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	461a      	mov	r2, r3
 8004d76:	79fb      	ldrb	r3, [r7, #7]
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d0a6      	beq.n	8004cca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3710      	adds	r7, #16
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d86:	b480      	push	{r7}
 8004d88:	b095      	sub	sp, #84	; 0x54
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d96:	e853 3f00 	ldrex	r3, [r3]
 8004d9a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d9e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004da2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	461a      	mov	r2, r3
 8004daa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dac:	643b      	str	r3, [r7, #64]	; 0x40
 8004dae:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004db0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004db2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004db4:	e841 2300 	strex	r3, r2, [r1]
 8004db8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d1e6      	bne.n	8004d8e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	3308      	adds	r3, #8
 8004dc6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc8:	6a3b      	ldr	r3, [r7, #32]
 8004dca:	e853 3f00 	ldrex	r3, [r3]
 8004dce:	61fb      	str	r3, [r7, #28]
   return(result);
 8004dd0:	69fb      	ldr	r3, [r7, #28]
 8004dd2:	f023 0301 	bic.w	r3, r3, #1
 8004dd6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	3308      	adds	r3, #8
 8004dde:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004de0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004de2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004de6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004de8:	e841 2300 	strex	r3, r2, [r1]
 8004dec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d1e5      	bne.n	8004dc0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d118      	bne.n	8004e2e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	e853 3f00 	ldrex	r3, [r3]
 8004e08:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	f023 0310 	bic.w	r3, r3, #16
 8004e10:	647b      	str	r3, [r7, #68]	; 0x44
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	461a      	mov	r2, r3
 8004e18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e1a:	61bb      	str	r3, [r7, #24]
 8004e1c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e1e:	6979      	ldr	r1, [r7, #20]
 8004e20:	69ba      	ldr	r2, [r7, #24]
 8004e22:	e841 2300 	strex	r3, r2, [r1]
 8004e26:	613b      	str	r3, [r7, #16]
   return(result);
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d1e6      	bne.n	8004dfc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2220      	movs	r2, #32
 8004e32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004e42:	bf00      	nop
 8004e44:	3754      	adds	r7, #84	; 0x54
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr
	...

08004e50 <siprintf>:
 8004e50:	b40e      	push	{r1, r2, r3}
 8004e52:	b500      	push	{lr}
 8004e54:	b09c      	sub	sp, #112	; 0x70
 8004e56:	ab1d      	add	r3, sp, #116	; 0x74
 8004e58:	9002      	str	r0, [sp, #8]
 8004e5a:	9006      	str	r0, [sp, #24]
 8004e5c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004e60:	4809      	ldr	r0, [pc, #36]	; (8004e88 <siprintf+0x38>)
 8004e62:	9107      	str	r1, [sp, #28]
 8004e64:	9104      	str	r1, [sp, #16]
 8004e66:	4909      	ldr	r1, [pc, #36]	; (8004e8c <siprintf+0x3c>)
 8004e68:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e6c:	9105      	str	r1, [sp, #20]
 8004e6e:	6800      	ldr	r0, [r0, #0]
 8004e70:	9301      	str	r3, [sp, #4]
 8004e72:	a902      	add	r1, sp, #8
 8004e74:	f000 f992 	bl	800519c <_svfiprintf_r>
 8004e78:	9b02      	ldr	r3, [sp, #8]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	701a      	strb	r2, [r3, #0]
 8004e7e:	b01c      	add	sp, #112	; 0x70
 8004e80:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e84:	b003      	add	sp, #12
 8004e86:	4770      	bx	lr
 8004e88:	20000058 	.word	0x20000058
 8004e8c:	ffff0208 	.word	0xffff0208

08004e90 <memset>:
 8004e90:	4402      	add	r2, r0
 8004e92:	4603      	mov	r3, r0
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d100      	bne.n	8004e9a <memset+0xa>
 8004e98:	4770      	bx	lr
 8004e9a:	f803 1b01 	strb.w	r1, [r3], #1
 8004e9e:	e7f9      	b.n	8004e94 <memset+0x4>

08004ea0 <__errno>:
 8004ea0:	4b01      	ldr	r3, [pc, #4]	; (8004ea8 <__errno+0x8>)
 8004ea2:	6818      	ldr	r0, [r3, #0]
 8004ea4:	4770      	bx	lr
 8004ea6:	bf00      	nop
 8004ea8:	20000058 	.word	0x20000058

08004eac <__libc_init_array>:
 8004eac:	b570      	push	{r4, r5, r6, lr}
 8004eae:	4d0d      	ldr	r5, [pc, #52]	; (8004ee4 <__libc_init_array+0x38>)
 8004eb0:	4c0d      	ldr	r4, [pc, #52]	; (8004ee8 <__libc_init_array+0x3c>)
 8004eb2:	1b64      	subs	r4, r4, r5
 8004eb4:	10a4      	asrs	r4, r4, #2
 8004eb6:	2600      	movs	r6, #0
 8004eb8:	42a6      	cmp	r6, r4
 8004eba:	d109      	bne.n	8004ed0 <__libc_init_array+0x24>
 8004ebc:	4d0b      	ldr	r5, [pc, #44]	; (8004eec <__libc_init_array+0x40>)
 8004ebe:	4c0c      	ldr	r4, [pc, #48]	; (8004ef0 <__libc_init_array+0x44>)
 8004ec0:	f000 fc6a 	bl	8005798 <_init>
 8004ec4:	1b64      	subs	r4, r4, r5
 8004ec6:	10a4      	asrs	r4, r4, #2
 8004ec8:	2600      	movs	r6, #0
 8004eca:	42a6      	cmp	r6, r4
 8004ecc:	d105      	bne.n	8004eda <__libc_init_array+0x2e>
 8004ece:	bd70      	pop	{r4, r5, r6, pc}
 8004ed0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ed4:	4798      	blx	r3
 8004ed6:	3601      	adds	r6, #1
 8004ed8:	e7ee      	b.n	8004eb8 <__libc_init_array+0xc>
 8004eda:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ede:	4798      	blx	r3
 8004ee0:	3601      	adds	r6, #1
 8004ee2:	e7f2      	b.n	8004eca <__libc_init_array+0x1e>
 8004ee4:	08005840 	.word	0x08005840
 8004ee8:	08005840 	.word	0x08005840
 8004eec:	08005840 	.word	0x08005840
 8004ef0:	08005844 	.word	0x08005844

08004ef4 <__retarget_lock_acquire_recursive>:
 8004ef4:	4770      	bx	lr

08004ef6 <__retarget_lock_release_recursive>:
 8004ef6:	4770      	bx	lr

08004ef8 <_free_r>:
 8004ef8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004efa:	2900      	cmp	r1, #0
 8004efc:	d044      	beq.n	8004f88 <_free_r+0x90>
 8004efe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f02:	9001      	str	r0, [sp, #4]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	f1a1 0404 	sub.w	r4, r1, #4
 8004f0a:	bfb8      	it	lt
 8004f0c:	18e4      	addlt	r4, r4, r3
 8004f0e:	f000 f8df 	bl	80050d0 <__malloc_lock>
 8004f12:	4a1e      	ldr	r2, [pc, #120]	; (8004f8c <_free_r+0x94>)
 8004f14:	9801      	ldr	r0, [sp, #4]
 8004f16:	6813      	ldr	r3, [r2, #0]
 8004f18:	b933      	cbnz	r3, 8004f28 <_free_r+0x30>
 8004f1a:	6063      	str	r3, [r4, #4]
 8004f1c:	6014      	str	r4, [r2, #0]
 8004f1e:	b003      	add	sp, #12
 8004f20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004f24:	f000 b8da 	b.w	80050dc <__malloc_unlock>
 8004f28:	42a3      	cmp	r3, r4
 8004f2a:	d908      	bls.n	8004f3e <_free_r+0x46>
 8004f2c:	6825      	ldr	r5, [r4, #0]
 8004f2e:	1961      	adds	r1, r4, r5
 8004f30:	428b      	cmp	r3, r1
 8004f32:	bf01      	itttt	eq
 8004f34:	6819      	ldreq	r1, [r3, #0]
 8004f36:	685b      	ldreq	r3, [r3, #4]
 8004f38:	1949      	addeq	r1, r1, r5
 8004f3a:	6021      	streq	r1, [r4, #0]
 8004f3c:	e7ed      	b.n	8004f1a <_free_r+0x22>
 8004f3e:	461a      	mov	r2, r3
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	b10b      	cbz	r3, 8004f48 <_free_r+0x50>
 8004f44:	42a3      	cmp	r3, r4
 8004f46:	d9fa      	bls.n	8004f3e <_free_r+0x46>
 8004f48:	6811      	ldr	r1, [r2, #0]
 8004f4a:	1855      	adds	r5, r2, r1
 8004f4c:	42a5      	cmp	r5, r4
 8004f4e:	d10b      	bne.n	8004f68 <_free_r+0x70>
 8004f50:	6824      	ldr	r4, [r4, #0]
 8004f52:	4421      	add	r1, r4
 8004f54:	1854      	adds	r4, r2, r1
 8004f56:	42a3      	cmp	r3, r4
 8004f58:	6011      	str	r1, [r2, #0]
 8004f5a:	d1e0      	bne.n	8004f1e <_free_r+0x26>
 8004f5c:	681c      	ldr	r4, [r3, #0]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	6053      	str	r3, [r2, #4]
 8004f62:	440c      	add	r4, r1
 8004f64:	6014      	str	r4, [r2, #0]
 8004f66:	e7da      	b.n	8004f1e <_free_r+0x26>
 8004f68:	d902      	bls.n	8004f70 <_free_r+0x78>
 8004f6a:	230c      	movs	r3, #12
 8004f6c:	6003      	str	r3, [r0, #0]
 8004f6e:	e7d6      	b.n	8004f1e <_free_r+0x26>
 8004f70:	6825      	ldr	r5, [r4, #0]
 8004f72:	1961      	adds	r1, r4, r5
 8004f74:	428b      	cmp	r3, r1
 8004f76:	bf04      	itt	eq
 8004f78:	6819      	ldreq	r1, [r3, #0]
 8004f7a:	685b      	ldreq	r3, [r3, #4]
 8004f7c:	6063      	str	r3, [r4, #4]
 8004f7e:	bf04      	itt	eq
 8004f80:	1949      	addeq	r1, r1, r5
 8004f82:	6021      	streq	r1, [r4, #0]
 8004f84:	6054      	str	r4, [r2, #4]
 8004f86:	e7ca      	b.n	8004f1e <_free_r+0x26>
 8004f88:	b003      	add	sp, #12
 8004f8a:	bd30      	pop	{r4, r5, pc}
 8004f8c:	2000030c 	.word	0x2000030c

08004f90 <sbrk_aligned>:
 8004f90:	b570      	push	{r4, r5, r6, lr}
 8004f92:	4e0e      	ldr	r6, [pc, #56]	; (8004fcc <sbrk_aligned+0x3c>)
 8004f94:	460c      	mov	r4, r1
 8004f96:	6831      	ldr	r1, [r6, #0]
 8004f98:	4605      	mov	r5, r0
 8004f9a:	b911      	cbnz	r1, 8004fa2 <sbrk_aligned+0x12>
 8004f9c:	f000 fba6 	bl	80056ec <_sbrk_r>
 8004fa0:	6030      	str	r0, [r6, #0]
 8004fa2:	4621      	mov	r1, r4
 8004fa4:	4628      	mov	r0, r5
 8004fa6:	f000 fba1 	bl	80056ec <_sbrk_r>
 8004faa:	1c43      	adds	r3, r0, #1
 8004fac:	d00a      	beq.n	8004fc4 <sbrk_aligned+0x34>
 8004fae:	1cc4      	adds	r4, r0, #3
 8004fb0:	f024 0403 	bic.w	r4, r4, #3
 8004fb4:	42a0      	cmp	r0, r4
 8004fb6:	d007      	beq.n	8004fc8 <sbrk_aligned+0x38>
 8004fb8:	1a21      	subs	r1, r4, r0
 8004fba:	4628      	mov	r0, r5
 8004fbc:	f000 fb96 	bl	80056ec <_sbrk_r>
 8004fc0:	3001      	adds	r0, #1
 8004fc2:	d101      	bne.n	8004fc8 <sbrk_aligned+0x38>
 8004fc4:	f04f 34ff 	mov.w	r4, #4294967295
 8004fc8:	4620      	mov	r0, r4
 8004fca:	bd70      	pop	{r4, r5, r6, pc}
 8004fcc:	20000310 	.word	0x20000310

08004fd0 <_malloc_r>:
 8004fd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fd4:	1ccd      	adds	r5, r1, #3
 8004fd6:	f025 0503 	bic.w	r5, r5, #3
 8004fda:	3508      	adds	r5, #8
 8004fdc:	2d0c      	cmp	r5, #12
 8004fde:	bf38      	it	cc
 8004fe0:	250c      	movcc	r5, #12
 8004fe2:	2d00      	cmp	r5, #0
 8004fe4:	4607      	mov	r7, r0
 8004fe6:	db01      	blt.n	8004fec <_malloc_r+0x1c>
 8004fe8:	42a9      	cmp	r1, r5
 8004fea:	d905      	bls.n	8004ff8 <_malloc_r+0x28>
 8004fec:	230c      	movs	r3, #12
 8004fee:	603b      	str	r3, [r7, #0]
 8004ff0:	2600      	movs	r6, #0
 8004ff2:	4630      	mov	r0, r6
 8004ff4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ff8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80050cc <_malloc_r+0xfc>
 8004ffc:	f000 f868 	bl	80050d0 <__malloc_lock>
 8005000:	f8d8 3000 	ldr.w	r3, [r8]
 8005004:	461c      	mov	r4, r3
 8005006:	bb5c      	cbnz	r4, 8005060 <_malloc_r+0x90>
 8005008:	4629      	mov	r1, r5
 800500a:	4638      	mov	r0, r7
 800500c:	f7ff ffc0 	bl	8004f90 <sbrk_aligned>
 8005010:	1c43      	adds	r3, r0, #1
 8005012:	4604      	mov	r4, r0
 8005014:	d155      	bne.n	80050c2 <_malloc_r+0xf2>
 8005016:	f8d8 4000 	ldr.w	r4, [r8]
 800501a:	4626      	mov	r6, r4
 800501c:	2e00      	cmp	r6, #0
 800501e:	d145      	bne.n	80050ac <_malloc_r+0xdc>
 8005020:	2c00      	cmp	r4, #0
 8005022:	d048      	beq.n	80050b6 <_malloc_r+0xe6>
 8005024:	6823      	ldr	r3, [r4, #0]
 8005026:	4631      	mov	r1, r6
 8005028:	4638      	mov	r0, r7
 800502a:	eb04 0903 	add.w	r9, r4, r3
 800502e:	f000 fb5d 	bl	80056ec <_sbrk_r>
 8005032:	4581      	cmp	r9, r0
 8005034:	d13f      	bne.n	80050b6 <_malloc_r+0xe6>
 8005036:	6821      	ldr	r1, [r4, #0]
 8005038:	1a6d      	subs	r5, r5, r1
 800503a:	4629      	mov	r1, r5
 800503c:	4638      	mov	r0, r7
 800503e:	f7ff ffa7 	bl	8004f90 <sbrk_aligned>
 8005042:	3001      	adds	r0, #1
 8005044:	d037      	beq.n	80050b6 <_malloc_r+0xe6>
 8005046:	6823      	ldr	r3, [r4, #0]
 8005048:	442b      	add	r3, r5
 800504a:	6023      	str	r3, [r4, #0]
 800504c:	f8d8 3000 	ldr.w	r3, [r8]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d038      	beq.n	80050c6 <_malloc_r+0xf6>
 8005054:	685a      	ldr	r2, [r3, #4]
 8005056:	42a2      	cmp	r2, r4
 8005058:	d12b      	bne.n	80050b2 <_malloc_r+0xe2>
 800505a:	2200      	movs	r2, #0
 800505c:	605a      	str	r2, [r3, #4]
 800505e:	e00f      	b.n	8005080 <_malloc_r+0xb0>
 8005060:	6822      	ldr	r2, [r4, #0]
 8005062:	1b52      	subs	r2, r2, r5
 8005064:	d41f      	bmi.n	80050a6 <_malloc_r+0xd6>
 8005066:	2a0b      	cmp	r2, #11
 8005068:	d917      	bls.n	800509a <_malloc_r+0xca>
 800506a:	1961      	adds	r1, r4, r5
 800506c:	42a3      	cmp	r3, r4
 800506e:	6025      	str	r5, [r4, #0]
 8005070:	bf18      	it	ne
 8005072:	6059      	strne	r1, [r3, #4]
 8005074:	6863      	ldr	r3, [r4, #4]
 8005076:	bf08      	it	eq
 8005078:	f8c8 1000 	streq.w	r1, [r8]
 800507c:	5162      	str	r2, [r4, r5]
 800507e:	604b      	str	r3, [r1, #4]
 8005080:	4638      	mov	r0, r7
 8005082:	f104 060b 	add.w	r6, r4, #11
 8005086:	f000 f829 	bl	80050dc <__malloc_unlock>
 800508a:	f026 0607 	bic.w	r6, r6, #7
 800508e:	1d23      	adds	r3, r4, #4
 8005090:	1af2      	subs	r2, r6, r3
 8005092:	d0ae      	beq.n	8004ff2 <_malloc_r+0x22>
 8005094:	1b9b      	subs	r3, r3, r6
 8005096:	50a3      	str	r3, [r4, r2]
 8005098:	e7ab      	b.n	8004ff2 <_malloc_r+0x22>
 800509a:	42a3      	cmp	r3, r4
 800509c:	6862      	ldr	r2, [r4, #4]
 800509e:	d1dd      	bne.n	800505c <_malloc_r+0x8c>
 80050a0:	f8c8 2000 	str.w	r2, [r8]
 80050a4:	e7ec      	b.n	8005080 <_malloc_r+0xb0>
 80050a6:	4623      	mov	r3, r4
 80050a8:	6864      	ldr	r4, [r4, #4]
 80050aa:	e7ac      	b.n	8005006 <_malloc_r+0x36>
 80050ac:	4634      	mov	r4, r6
 80050ae:	6876      	ldr	r6, [r6, #4]
 80050b0:	e7b4      	b.n	800501c <_malloc_r+0x4c>
 80050b2:	4613      	mov	r3, r2
 80050b4:	e7cc      	b.n	8005050 <_malloc_r+0x80>
 80050b6:	230c      	movs	r3, #12
 80050b8:	603b      	str	r3, [r7, #0]
 80050ba:	4638      	mov	r0, r7
 80050bc:	f000 f80e 	bl	80050dc <__malloc_unlock>
 80050c0:	e797      	b.n	8004ff2 <_malloc_r+0x22>
 80050c2:	6025      	str	r5, [r4, #0]
 80050c4:	e7dc      	b.n	8005080 <_malloc_r+0xb0>
 80050c6:	605b      	str	r3, [r3, #4]
 80050c8:	deff      	udf	#255	; 0xff
 80050ca:	bf00      	nop
 80050cc:	2000030c 	.word	0x2000030c

080050d0 <__malloc_lock>:
 80050d0:	4801      	ldr	r0, [pc, #4]	; (80050d8 <__malloc_lock+0x8>)
 80050d2:	f7ff bf0f 	b.w	8004ef4 <__retarget_lock_acquire_recursive>
 80050d6:	bf00      	nop
 80050d8:	20000308 	.word	0x20000308

080050dc <__malloc_unlock>:
 80050dc:	4801      	ldr	r0, [pc, #4]	; (80050e4 <__malloc_unlock+0x8>)
 80050de:	f7ff bf0a 	b.w	8004ef6 <__retarget_lock_release_recursive>
 80050e2:	bf00      	nop
 80050e4:	20000308 	.word	0x20000308

080050e8 <__ssputs_r>:
 80050e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050ec:	688e      	ldr	r6, [r1, #8]
 80050ee:	461f      	mov	r7, r3
 80050f0:	42be      	cmp	r6, r7
 80050f2:	680b      	ldr	r3, [r1, #0]
 80050f4:	4682      	mov	sl, r0
 80050f6:	460c      	mov	r4, r1
 80050f8:	4690      	mov	r8, r2
 80050fa:	d82c      	bhi.n	8005156 <__ssputs_r+0x6e>
 80050fc:	898a      	ldrh	r2, [r1, #12]
 80050fe:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005102:	d026      	beq.n	8005152 <__ssputs_r+0x6a>
 8005104:	6965      	ldr	r5, [r4, #20]
 8005106:	6909      	ldr	r1, [r1, #16]
 8005108:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800510c:	eba3 0901 	sub.w	r9, r3, r1
 8005110:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005114:	1c7b      	adds	r3, r7, #1
 8005116:	444b      	add	r3, r9
 8005118:	106d      	asrs	r5, r5, #1
 800511a:	429d      	cmp	r5, r3
 800511c:	bf38      	it	cc
 800511e:	461d      	movcc	r5, r3
 8005120:	0553      	lsls	r3, r2, #21
 8005122:	d527      	bpl.n	8005174 <__ssputs_r+0x8c>
 8005124:	4629      	mov	r1, r5
 8005126:	f7ff ff53 	bl	8004fd0 <_malloc_r>
 800512a:	4606      	mov	r6, r0
 800512c:	b360      	cbz	r0, 8005188 <__ssputs_r+0xa0>
 800512e:	6921      	ldr	r1, [r4, #16]
 8005130:	464a      	mov	r2, r9
 8005132:	f000 faeb 	bl	800570c <memcpy>
 8005136:	89a3      	ldrh	r3, [r4, #12]
 8005138:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800513c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005140:	81a3      	strh	r3, [r4, #12]
 8005142:	6126      	str	r6, [r4, #16]
 8005144:	6165      	str	r5, [r4, #20]
 8005146:	444e      	add	r6, r9
 8005148:	eba5 0509 	sub.w	r5, r5, r9
 800514c:	6026      	str	r6, [r4, #0]
 800514e:	60a5      	str	r5, [r4, #8]
 8005150:	463e      	mov	r6, r7
 8005152:	42be      	cmp	r6, r7
 8005154:	d900      	bls.n	8005158 <__ssputs_r+0x70>
 8005156:	463e      	mov	r6, r7
 8005158:	6820      	ldr	r0, [r4, #0]
 800515a:	4632      	mov	r2, r6
 800515c:	4641      	mov	r1, r8
 800515e:	f000 faab 	bl	80056b8 <memmove>
 8005162:	68a3      	ldr	r3, [r4, #8]
 8005164:	1b9b      	subs	r3, r3, r6
 8005166:	60a3      	str	r3, [r4, #8]
 8005168:	6823      	ldr	r3, [r4, #0]
 800516a:	4433      	add	r3, r6
 800516c:	6023      	str	r3, [r4, #0]
 800516e:	2000      	movs	r0, #0
 8005170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005174:	462a      	mov	r2, r5
 8005176:	f000 fad7 	bl	8005728 <_realloc_r>
 800517a:	4606      	mov	r6, r0
 800517c:	2800      	cmp	r0, #0
 800517e:	d1e0      	bne.n	8005142 <__ssputs_r+0x5a>
 8005180:	6921      	ldr	r1, [r4, #16]
 8005182:	4650      	mov	r0, sl
 8005184:	f7ff feb8 	bl	8004ef8 <_free_r>
 8005188:	230c      	movs	r3, #12
 800518a:	f8ca 3000 	str.w	r3, [sl]
 800518e:	89a3      	ldrh	r3, [r4, #12]
 8005190:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005194:	81a3      	strh	r3, [r4, #12]
 8005196:	f04f 30ff 	mov.w	r0, #4294967295
 800519a:	e7e9      	b.n	8005170 <__ssputs_r+0x88>

0800519c <_svfiprintf_r>:
 800519c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051a0:	4698      	mov	r8, r3
 80051a2:	898b      	ldrh	r3, [r1, #12]
 80051a4:	061b      	lsls	r3, r3, #24
 80051a6:	b09d      	sub	sp, #116	; 0x74
 80051a8:	4607      	mov	r7, r0
 80051aa:	460d      	mov	r5, r1
 80051ac:	4614      	mov	r4, r2
 80051ae:	d50e      	bpl.n	80051ce <_svfiprintf_r+0x32>
 80051b0:	690b      	ldr	r3, [r1, #16]
 80051b2:	b963      	cbnz	r3, 80051ce <_svfiprintf_r+0x32>
 80051b4:	2140      	movs	r1, #64	; 0x40
 80051b6:	f7ff ff0b 	bl	8004fd0 <_malloc_r>
 80051ba:	6028      	str	r0, [r5, #0]
 80051bc:	6128      	str	r0, [r5, #16]
 80051be:	b920      	cbnz	r0, 80051ca <_svfiprintf_r+0x2e>
 80051c0:	230c      	movs	r3, #12
 80051c2:	603b      	str	r3, [r7, #0]
 80051c4:	f04f 30ff 	mov.w	r0, #4294967295
 80051c8:	e0d0      	b.n	800536c <_svfiprintf_r+0x1d0>
 80051ca:	2340      	movs	r3, #64	; 0x40
 80051cc:	616b      	str	r3, [r5, #20]
 80051ce:	2300      	movs	r3, #0
 80051d0:	9309      	str	r3, [sp, #36]	; 0x24
 80051d2:	2320      	movs	r3, #32
 80051d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80051d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80051dc:	2330      	movs	r3, #48	; 0x30
 80051de:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005384 <_svfiprintf_r+0x1e8>
 80051e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80051e6:	f04f 0901 	mov.w	r9, #1
 80051ea:	4623      	mov	r3, r4
 80051ec:	469a      	mov	sl, r3
 80051ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80051f2:	b10a      	cbz	r2, 80051f8 <_svfiprintf_r+0x5c>
 80051f4:	2a25      	cmp	r2, #37	; 0x25
 80051f6:	d1f9      	bne.n	80051ec <_svfiprintf_r+0x50>
 80051f8:	ebba 0b04 	subs.w	fp, sl, r4
 80051fc:	d00b      	beq.n	8005216 <_svfiprintf_r+0x7a>
 80051fe:	465b      	mov	r3, fp
 8005200:	4622      	mov	r2, r4
 8005202:	4629      	mov	r1, r5
 8005204:	4638      	mov	r0, r7
 8005206:	f7ff ff6f 	bl	80050e8 <__ssputs_r>
 800520a:	3001      	adds	r0, #1
 800520c:	f000 80a9 	beq.w	8005362 <_svfiprintf_r+0x1c6>
 8005210:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005212:	445a      	add	r2, fp
 8005214:	9209      	str	r2, [sp, #36]	; 0x24
 8005216:	f89a 3000 	ldrb.w	r3, [sl]
 800521a:	2b00      	cmp	r3, #0
 800521c:	f000 80a1 	beq.w	8005362 <_svfiprintf_r+0x1c6>
 8005220:	2300      	movs	r3, #0
 8005222:	f04f 32ff 	mov.w	r2, #4294967295
 8005226:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800522a:	f10a 0a01 	add.w	sl, sl, #1
 800522e:	9304      	str	r3, [sp, #16]
 8005230:	9307      	str	r3, [sp, #28]
 8005232:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005236:	931a      	str	r3, [sp, #104]	; 0x68
 8005238:	4654      	mov	r4, sl
 800523a:	2205      	movs	r2, #5
 800523c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005240:	4850      	ldr	r0, [pc, #320]	; (8005384 <_svfiprintf_r+0x1e8>)
 8005242:	f7fa ffc5 	bl	80001d0 <memchr>
 8005246:	9a04      	ldr	r2, [sp, #16]
 8005248:	b9d8      	cbnz	r0, 8005282 <_svfiprintf_r+0xe6>
 800524a:	06d0      	lsls	r0, r2, #27
 800524c:	bf44      	itt	mi
 800524e:	2320      	movmi	r3, #32
 8005250:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005254:	0711      	lsls	r1, r2, #28
 8005256:	bf44      	itt	mi
 8005258:	232b      	movmi	r3, #43	; 0x2b
 800525a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800525e:	f89a 3000 	ldrb.w	r3, [sl]
 8005262:	2b2a      	cmp	r3, #42	; 0x2a
 8005264:	d015      	beq.n	8005292 <_svfiprintf_r+0xf6>
 8005266:	9a07      	ldr	r2, [sp, #28]
 8005268:	4654      	mov	r4, sl
 800526a:	2000      	movs	r0, #0
 800526c:	f04f 0c0a 	mov.w	ip, #10
 8005270:	4621      	mov	r1, r4
 8005272:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005276:	3b30      	subs	r3, #48	; 0x30
 8005278:	2b09      	cmp	r3, #9
 800527a:	d94d      	bls.n	8005318 <_svfiprintf_r+0x17c>
 800527c:	b1b0      	cbz	r0, 80052ac <_svfiprintf_r+0x110>
 800527e:	9207      	str	r2, [sp, #28]
 8005280:	e014      	b.n	80052ac <_svfiprintf_r+0x110>
 8005282:	eba0 0308 	sub.w	r3, r0, r8
 8005286:	fa09 f303 	lsl.w	r3, r9, r3
 800528a:	4313      	orrs	r3, r2
 800528c:	9304      	str	r3, [sp, #16]
 800528e:	46a2      	mov	sl, r4
 8005290:	e7d2      	b.n	8005238 <_svfiprintf_r+0x9c>
 8005292:	9b03      	ldr	r3, [sp, #12]
 8005294:	1d19      	adds	r1, r3, #4
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	9103      	str	r1, [sp, #12]
 800529a:	2b00      	cmp	r3, #0
 800529c:	bfbb      	ittet	lt
 800529e:	425b      	neglt	r3, r3
 80052a0:	f042 0202 	orrlt.w	r2, r2, #2
 80052a4:	9307      	strge	r3, [sp, #28]
 80052a6:	9307      	strlt	r3, [sp, #28]
 80052a8:	bfb8      	it	lt
 80052aa:	9204      	strlt	r2, [sp, #16]
 80052ac:	7823      	ldrb	r3, [r4, #0]
 80052ae:	2b2e      	cmp	r3, #46	; 0x2e
 80052b0:	d10c      	bne.n	80052cc <_svfiprintf_r+0x130>
 80052b2:	7863      	ldrb	r3, [r4, #1]
 80052b4:	2b2a      	cmp	r3, #42	; 0x2a
 80052b6:	d134      	bne.n	8005322 <_svfiprintf_r+0x186>
 80052b8:	9b03      	ldr	r3, [sp, #12]
 80052ba:	1d1a      	adds	r2, r3, #4
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	9203      	str	r2, [sp, #12]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	bfb8      	it	lt
 80052c4:	f04f 33ff 	movlt.w	r3, #4294967295
 80052c8:	3402      	adds	r4, #2
 80052ca:	9305      	str	r3, [sp, #20]
 80052cc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005394 <_svfiprintf_r+0x1f8>
 80052d0:	7821      	ldrb	r1, [r4, #0]
 80052d2:	2203      	movs	r2, #3
 80052d4:	4650      	mov	r0, sl
 80052d6:	f7fa ff7b 	bl	80001d0 <memchr>
 80052da:	b138      	cbz	r0, 80052ec <_svfiprintf_r+0x150>
 80052dc:	9b04      	ldr	r3, [sp, #16]
 80052de:	eba0 000a 	sub.w	r0, r0, sl
 80052e2:	2240      	movs	r2, #64	; 0x40
 80052e4:	4082      	lsls	r2, r0
 80052e6:	4313      	orrs	r3, r2
 80052e8:	3401      	adds	r4, #1
 80052ea:	9304      	str	r3, [sp, #16]
 80052ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052f0:	4825      	ldr	r0, [pc, #148]	; (8005388 <_svfiprintf_r+0x1ec>)
 80052f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80052f6:	2206      	movs	r2, #6
 80052f8:	f7fa ff6a 	bl	80001d0 <memchr>
 80052fc:	2800      	cmp	r0, #0
 80052fe:	d038      	beq.n	8005372 <_svfiprintf_r+0x1d6>
 8005300:	4b22      	ldr	r3, [pc, #136]	; (800538c <_svfiprintf_r+0x1f0>)
 8005302:	bb1b      	cbnz	r3, 800534c <_svfiprintf_r+0x1b0>
 8005304:	9b03      	ldr	r3, [sp, #12]
 8005306:	3307      	adds	r3, #7
 8005308:	f023 0307 	bic.w	r3, r3, #7
 800530c:	3308      	adds	r3, #8
 800530e:	9303      	str	r3, [sp, #12]
 8005310:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005312:	4433      	add	r3, r6
 8005314:	9309      	str	r3, [sp, #36]	; 0x24
 8005316:	e768      	b.n	80051ea <_svfiprintf_r+0x4e>
 8005318:	fb0c 3202 	mla	r2, ip, r2, r3
 800531c:	460c      	mov	r4, r1
 800531e:	2001      	movs	r0, #1
 8005320:	e7a6      	b.n	8005270 <_svfiprintf_r+0xd4>
 8005322:	2300      	movs	r3, #0
 8005324:	3401      	adds	r4, #1
 8005326:	9305      	str	r3, [sp, #20]
 8005328:	4619      	mov	r1, r3
 800532a:	f04f 0c0a 	mov.w	ip, #10
 800532e:	4620      	mov	r0, r4
 8005330:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005334:	3a30      	subs	r2, #48	; 0x30
 8005336:	2a09      	cmp	r2, #9
 8005338:	d903      	bls.n	8005342 <_svfiprintf_r+0x1a6>
 800533a:	2b00      	cmp	r3, #0
 800533c:	d0c6      	beq.n	80052cc <_svfiprintf_r+0x130>
 800533e:	9105      	str	r1, [sp, #20]
 8005340:	e7c4      	b.n	80052cc <_svfiprintf_r+0x130>
 8005342:	fb0c 2101 	mla	r1, ip, r1, r2
 8005346:	4604      	mov	r4, r0
 8005348:	2301      	movs	r3, #1
 800534a:	e7f0      	b.n	800532e <_svfiprintf_r+0x192>
 800534c:	ab03      	add	r3, sp, #12
 800534e:	9300      	str	r3, [sp, #0]
 8005350:	462a      	mov	r2, r5
 8005352:	4b0f      	ldr	r3, [pc, #60]	; (8005390 <_svfiprintf_r+0x1f4>)
 8005354:	a904      	add	r1, sp, #16
 8005356:	4638      	mov	r0, r7
 8005358:	f3af 8000 	nop.w
 800535c:	1c42      	adds	r2, r0, #1
 800535e:	4606      	mov	r6, r0
 8005360:	d1d6      	bne.n	8005310 <_svfiprintf_r+0x174>
 8005362:	89ab      	ldrh	r3, [r5, #12]
 8005364:	065b      	lsls	r3, r3, #25
 8005366:	f53f af2d 	bmi.w	80051c4 <_svfiprintf_r+0x28>
 800536a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800536c:	b01d      	add	sp, #116	; 0x74
 800536e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005372:	ab03      	add	r3, sp, #12
 8005374:	9300      	str	r3, [sp, #0]
 8005376:	462a      	mov	r2, r5
 8005378:	4b05      	ldr	r3, [pc, #20]	; (8005390 <_svfiprintf_r+0x1f4>)
 800537a:	a904      	add	r1, sp, #16
 800537c:	4638      	mov	r0, r7
 800537e:	f000 f879 	bl	8005474 <_printf_i>
 8005382:	e7eb      	b.n	800535c <_svfiprintf_r+0x1c0>
 8005384:	08005804 	.word	0x08005804
 8005388:	0800580e 	.word	0x0800580e
 800538c:	00000000 	.word	0x00000000
 8005390:	080050e9 	.word	0x080050e9
 8005394:	0800580a 	.word	0x0800580a

08005398 <_printf_common>:
 8005398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800539c:	4616      	mov	r6, r2
 800539e:	4699      	mov	r9, r3
 80053a0:	688a      	ldr	r2, [r1, #8]
 80053a2:	690b      	ldr	r3, [r1, #16]
 80053a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80053a8:	4293      	cmp	r3, r2
 80053aa:	bfb8      	it	lt
 80053ac:	4613      	movlt	r3, r2
 80053ae:	6033      	str	r3, [r6, #0]
 80053b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80053b4:	4607      	mov	r7, r0
 80053b6:	460c      	mov	r4, r1
 80053b8:	b10a      	cbz	r2, 80053be <_printf_common+0x26>
 80053ba:	3301      	adds	r3, #1
 80053bc:	6033      	str	r3, [r6, #0]
 80053be:	6823      	ldr	r3, [r4, #0]
 80053c0:	0699      	lsls	r1, r3, #26
 80053c2:	bf42      	ittt	mi
 80053c4:	6833      	ldrmi	r3, [r6, #0]
 80053c6:	3302      	addmi	r3, #2
 80053c8:	6033      	strmi	r3, [r6, #0]
 80053ca:	6825      	ldr	r5, [r4, #0]
 80053cc:	f015 0506 	ands.w	r5, r5, #6
 80053d0:	d106      	bne.n	80053e0 <_printf_common+0x48>
 80053d2:	f104 0a19 	add.w	sl, r4, #25
 80053d6:	68e3      	ldr	r3, [r4, #12]
 80053d8:	6832      	ldr	r2, [r6, #0]
 80053da:	1a9b      	subs	r3, r3, r2
 80053dc:	42ab      	cmp	r3, r5
 80053de:	dc26      	bgt.n	800542e <_printf_common+0x96>
 80053e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80053e4:	1e13      	subs	r3, r2, #0
 80053e6:	6822      	ldr	r2, [r4, #0]
 80053e8:	bf18      	it	ne
 80053ea:	2301      	movne	r3, #1
 80053ec:	0692      	lsls	r2, r2, #26
 80053ee:	d42b      	bmi.n	8005448 <_printf_common+0xb0>
 80053f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80053f4:	4649      	mov	r1, r9
 80053f6:	4638      	mov	r0, r7
 80053f8:	47c0      	blx	r8
 80053fa:	3001      	adds	r0, #1
 80053fc:	d01e      	beq.n	800543c <_printf_common+0xa4>
 80053fe:	6823      	ldr	r3, [r4, #0]
 8005400:	6922      	ldr	r2, [r4, #16]
 8005402:	f003 0306 	and.w	r3, r3, #6
 8005406:	2b04      	cmp	r3, #4
 8005408:	bf02      	ittt	eq
 800540a:	68e5      	ldreq	r5, [r4, #12]
 800540c:	6833      	ldreq	r3, [r6, #0]
 800540e:	1aed      	subeq	r5, r5, r3
 8005410:	68a3      	ldr	r3, [r4, #8]
 8005412:	bf0c      	ite	eq
 8005414:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005418:	2500      	movne	r5, #0
 800541a:	4293      	cmp	r3, r2
 800541c:	bfc4      	itt	gt
 800541e:	1a9b      	subgt	r3, r3, r2
 8005420:	18ed      	addgt	r5, r5, r3
 8005422:	2600      	movs	r6, #0
 8005424:	341a      	adds	r4, #26
 8005426:	42b5      	cmp	r5, r6
 8005428:	d11a      	bne.n	8005460 <_printf_common+0xc8>
 800542a:	2000      	movs	r0, #0
 800542c:	e008      	b.n	8005440 <_printf_common+0xa8>
 800542e:	2301      	movs	r3, #1
 8005430:	4652      	mov	r2, sl
 8005432:	4649      	mov	r1, r9
 8005434:	4638      	mov	r0, r7
 8005436:	47c0      	blx	r8
 8005438:	3001      	adds	r0, #1
 800543a:	d103      	bne.n	8005444 <_printf_common+0xac>
 800543c:	f04f 30ff 	mov.w	r0, #4294967295
 8005440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005444:	3501      	adds	r5, #1
 8005446:	e7c6      	b.n	80053d6 <_printf_common+0x3e>
 8005448:	18e1      	adds	r1, r4, r3
 800544a:	1c5a      	adds	r2, r3, #1
 800544c:	2030      	movs	r0, #48	; 0x30
 800544e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005452:	4422      	add	r2, r4
 8005454:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005458:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800545c:	3302      	adds	r3, #2
 800545e:	e7c7      	b.n	80053f0 <_printf_common+0x58>
 8005460:	2301      	movs	r3, #1
 8005462:	4622      	mov	r2, r4
 8005464:	4649      	mov	r1, r9
 8005466:	4638      	mov	r0, r7
 8005468:	47c0      	blx	r8
 800546a:	3001      	adds	r0, #1
 800546c:	d0e6      	beq.n	800543c <_printf_common+0xa4>
 800546e:	3601      	adds	r6, #1
 8005470:	e7d9      	b.n	8005426 <_printf_common+0x8e>
	...

08005474 <_printf_i>:
 8005474:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005478:	7e0f      	ldrb	r7, [r1, #24]
 800547a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800547c:	2f78      	cmp	r7, #120	; 0x78
 800547e:	4691      	mov	r9, r2
 8005480:	4680      	mov	r8, r0
 8005482:	460c      	mov	r4, r1
 8005484:	469a      	mov	sl, r3
 8005486:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800548a:	d807      	bhi.n	800549c <_printf_i+0x28>
 800548c:	2f62      	cmp	r7, #98	; 0x62
 800548e:	d80a      	bhi.n	80054a6 <_printf_i+0x32>
 8005490:	2f00      	cmp	r7, #0
 8005492:	f000 80d4 	beq.w	800563e <_printf_i+0x1ca>
 8005496:	2f58      	cmp	r7, #88	; 0x58
 8005498:	f000 80c0 	beq.w	800561c <_printf_i+0x1a8>
 800549c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80054a4:	e03a      	b.n	800551c <_printf_i+0xa8>
 80054a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80054aa:	2b15      	cmp	r3, #21
 80054ac:	d8f6      	bhi.n	800549c <_printf_i+0x28>
 80054ae:	a101      	add	r1, pc, #4	; (adr r1, 80054b4 <_printf_i+0x40>)
 80054b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80054b4:	0800550d 	.word	0x0800550d
 80054b8:	08005521 	.word	0x08005521
 80054bc:	0800549d 	.word	0x0800549d
 80054c0:	0800549d 	.word	0x0800549d
 80054c4:	0800549d 	.word	0x0800549d
 80054c8:	0800549d 	.word	0x0800549d
 80054cc:	08005521 	.word	0x08005521
 80054d0:	0800549d 	.word	0x0800549d
 80054d4:	0800549d 	.word	0x0800549d
 80054d8:	0800549d 	.word	0x0800549d
 80054dc:	0800549d 	.word	0x0800549d
 80054e0:	08005625 	.word	0x08005625
 80054e4:	0800554d 	.word	0x0800554d
 80054e8:	080055df 	.word	0x080055df
 80054ec:	0800549d 	.word	0x0800549d
 80054f0:	0800549d 	.word	0x0800549d
 80054f4:	08005647 	.word	0x08005647
 80054f8:	0800549d 	.word	0x0800549d
 80054fc:	0800554d 	.word	0x0800554d
 8005500:	0800549d 	.word	0x0800549d
 8005504:	0800549d 	.word	0x0800549d
 8005508:	080055e7 	.word	0x080055e7
 800550c:	682b      	ldr	r3, [r5, #0]
 800550e:	1d1a      	adds	r2, r3, #4
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	602a      	str	r2, [r5, #0]
 8005514:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005518:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800551c:	2301      	movs	r3, #1
 800551e:	e09f      	b.n	8005660 <_printf_i+0x1ec>
 8005520:	6820      	ldr	r0, [r4, #0]
 8005522:	682b      	ldr	r3, [r5, #0]
 8005524:	0607      	lsls	r7, r0, #24
 8005526:	f103 0104 	add.w	r1, r3, #4
 800552a:	6029      	str	r1, [r5, #0]
 800552c:	d501      	bpl.n	8005532 <_printf_i+0xbe>
 800552e:	681e      	ldr	r6, [r3, #0]
 8005530:	e003      	b.n	800553a <_printf_i+0xc6>
 8005532:	0646      	lsls	r6, r0, #25
 8005534:	d5fb      	bpl.n	800552e <_printf_i+0xba>
 8005536:	f9b3 6000 	ldrsh.w	r6, [r3]
 800553a:	2e00      	cmp	r6, #0
 800553c:	da03      	bge.n	8005546 <_printf_i+0xd2>
 800553e:	232d      	movs	r3, #45	; 0x2d
 8005540:	4276      	negs	r6, r6
 8005542:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005546:	485a      	ldr	r0, [pc, #360]	; (80056b0 <_printf_i+0x23c>)
 8005548:	230a      	movs	r3, #10
 800554a:	e012      	b.n	8005572 <_printf_i+0xfe>
 800554c:	682b      	ldr	r3, [r5, #0]
 800554e:	6820      	ldr	r0, [r4, #0]
 8005550:	1d19      	adds	r1, r3, #4
 8005552:	6029      	str	r1, [r5, #0]
 8005554:	0605      	lsls	r5, r0, #24
 8005556:	d501      	bpl.n	800555c <_printf_i+0xe8>
 8005558:	681e      	ldr	r6, [r3, #0]
 800555a:	e002      	b.n	8005562 <_printf_i+0xee>
 800555c:	0641      	lsls	r1, r0, #25
 800555e:	d5fb      	bpl.n	8005558 <_printf_i+0xe4>
 8005560:	881e      	ldrh	r6, [r3, #0]
 8005562:	4853      	ldr	r0, [pc, #332]	; (80056b0 <_printf_i+0x23c>)
 8005564:	2f6f      	cmp	r7, #111	; 0x6f
 8005566:	bf0c      	ite	eq
 8005568:	2308      	moveq	r3, #8
 800556a:	230a      	movne	r3, #10
 800556c:	2100      	movs	r1, #0
 800556e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005572:	6865      	ldr	r5, [r4, #4]
 8005574:	60a5      	str	r5, [r4, #8]
 8005576:	2d00      	cmp	r5, #0
 8005578:	bfa2      	ittt	ge
 800557a:	6821      	ldrge	r1, [r4, #0]
 800557c:	f021 0104 	bicge.w	r1, r1, #4
 8005580:	6021      	strge	r1, [r4, #0]
 8005582:	b90e      	cbnz	r6, 8005588 <_printf_i+0x114>
 8005584:	2d00      	cmp	r5, #0
 8005586:	d04b      	beq.n	8005620 <_printf_i+0x1ac>
 8005588:	4615      	mov	r5, r2
 800558a:	fbb6 f1f3 	udiv	r1, r6, r3
 800558e:	fb03 6711 	mls	r7, r3, r1, r6
 8005592:	5dc7      	ldrb	r7, [r0, r7]
 8005594:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005598:	4637      	mov	r7, r6
 800559a:	42bb      	cmp	r3, r7
 800559c:	460e      	mov	r6, r1
 800559e:	d9f4      	bls.n	800558a <_printf_i+0x116>
 80055a0:	2b08      	cmp	r3, #8
 80055a2:	d10b      	bne.n	80055bc <_printf_i+0x148>
 80055a4:	6823      	ldr	r3, [r4, #0]
 80055a6:	07de      	lsls	r6, r3, #31
 80055a8:	d508      	bpl.n	80055bc <_printf_i+0x148>
 80055aa:	6923      	ldr	r3, [r4, #16]
 80055ac:	6861      	ldr	r1, [r4, #4]
 80055ae:	4299      	cmp	r1, r3
 80055b0:	bfde      	ittt	le
 80055b2:	2330      	movle	r3, #48	; 0x30
 80055b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80055b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80055bc:	1b52      	subs	r2, r2, r5
 80055be:	6122      	str	r2, [r4, #16]
 80055c0:	f8cd a000 	str.w	sl, [sp]
 80055c4:	464b      	mov	r3, r9
 80055c6:	aa03      	add	r2, sp, #12
 80055c8:	4621      	mov	r1, r4
 80055ca:	4640      	mov	r0, r8
 80055cc:	f7ff fee4 	bl	8005398 <_printf_common>
 80055d0:	3001      	adds	r0, #1
 80055d2:	d14a      	bne.n	800566a <_printf_i+0x1f6>
 80055d4:	f04f 30ff 	mov.w	r0, #4294967295
 80055d8:	b004      	add	sp, #16
 80055da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055de:	6823      	ldr	r3, [r4, #0]
 80055e0:	f043 0320 	orr.w	r3, r3, #32
 80055e4:	6023      	str	r3, [r4, #0]
 80055e6:	4833      	ldr	r0, [pc, #204]	; (80056b4 <_printf_i+0x240>)
 80055e8:	2778      	movs	r7, #120	; 0x78
 80055ea:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80055ee:	6823      	ldr	r3, [r4, #0]
 80055f0:	6829      	ldr	r1, [r5, #0]
 80055f2:	061f      	lsls	r7, r3, #24
 80055f4:	f851 6b04 	ldr.w	r6, [r1], #4
 80055f8:	d402      	bmi.n	8005600 <_printf_i+0x18c>
 80055fa:	065f      	lsls	r7, r3, #25
 80055fc:	bf48      	it	mi
 80055fe:	b2b6      	uxthmi	r6, r6
 8005600:	07df      	lsls	r7, r3, #31
 8005602:	bf48      	it	mi
 8005604:	f043 0320 	orrmi.w	r3, r3, #32
 8005608:	6029      	str	r1, [r5, #0]
 800560a:	bf48      	it	mi
 800560c:	6023      	strmi	r3, [r4, #0]
 800560e:	b91e      	cbnz	r6, 8005618 <_printf_i+0x1a4>
 8005610:	6823      	ldr	r3, [r4, #0]
 8005612:	f023 0320 	bic.w	r3, r3, #32
 8005616:	6023      	str	r3, [r4, #0]
 8005618:	2310      	movs	r3, #16
 800561a:	e7a7      	b.n	800556c <_printf_i+0xf8>
 800561c:	4824      	ldr	r0, [pc, #144]	; (80056b0 <_printf_i+0x23c>)
 800561e:	e7e4      	b.n	80055ea <_printf_i+0x176>
 8005620:	4615      	mov	r5, r2
 8005622:	e7bd      	b.n	80055a0 <_printf_i+0x12c>
 8005624:	682b      	ldr	r3, [r5, #0]
 8005626:	6826      	ldr	r6, [r4, #0]
 8005628:	6961      	ldr	r1, [r4, #20]
 800562a:	1d18      	adds	r0, r3, #4
 800562c:	6028      	str	r0, [r5, #0]
 800562e:	0635      	lsls	r5, r6, #24
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	d501      	bpl.n	8005638 <_printf_i+0x1c4>
 8005634:	6019      	str	r1, [r3, #0]
 8005636:	e002      	b.n	800563e <_printf_i+0x1ca>
 8005638:	0670      	lsls	r0, r6, #25
 800563a:	d5fb      	bpl.n	8005634 <_printf_i+0x1c0>
 800563c:	8019      	strh	r1, [r3, #0]
 800563e:	2300      	movs	r3, #0
 8005640:	6123      	str	r3, [r4, #16]
 8005642:	4615      	mov	r5, r2
 8005644:	e7bc      	b.n	80055c0 <_printf_i+0x14c>
 8005646:	682b      	ldr	r3, [r5, #0]
 8005648:	1d1a      	adds	r2, r3, #4
 800564a:	602a      	str	r2, [r5, #0]
 800564c:	681d      	ldr	r5, [r3, #0]
 800564e:	6862      	ldr	r2, [r4, #4]
 8005650:	2100      	movs	r1, #0
 8005652:	4628      	mov	r0, r5
 8005654:	f7fa fdbc 	bl	80001d0 <memchr>
 8005658:	b108      	cbz	r0, 800565e <_printf_i+0x1ea>
 800565a:	1b40      	subs	r0, r0, r5
 800565c:	6060      	str	r0, [r4, #4]
 800565e:	6863      	ldr	r3, [r4, #4]
 8005660:	6123      	str	r3, [r4, #16]
 8005662:	2300      	movs	r3, #0
 8005664:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005668:	e7aa      	b.n	80055c0 <_printf_i+0x14c>
 800566a:	6923      	ldr	r3, [r4, #16]
 800566c:	462a      	mov	r2, r5
 800566e:	4649      	mov	r1, r9
 8005670:	4640      	mov	r0, r8
 8005672:	47d0      	blx	sl
 8005674:	3001      	adds	r0, #1
 8005676:	d0ad      	beq.n	80055d4 <_printf_i+0x160>
 8005678:	6823      	ldr	r3, [r4, #0]
 800567a:	079b      	lsls	r3, r3, #30
 800567c:	d413      	bmi.n	80056a6 <_printf_i+0x232>
 800567e:	68e0      	ldr	r0, [r4, #12]
 8005680:	9b03      	ldr	r3, [sp, #12]
 8005682:	4298      	cmp	r0, r3
 8005684:	bfb8      	it	lt
 8005686:	4618      	movlt	r0, r3
 8005688:	e7a6      	b.n	80055d8 <_printf_i+0x164>
 800568a:	2301      	movs	r3, #1
 800568c:	4632      	mov	r2, r6
 800568e:	4649      	mov	r1, r9
 8005690:	4640      	mov	r0, r8
 8005692:	47d0      	blx	sl
 8005694:	3001      	adds	r0, #1
 8005696:	d09d      	beq.n	80055d4 <_printf_i+0x160>
 8005698:	3501      	adds	r5, #1
 800569a:	68e3      	ldr	r3, [r4, #12]
 800569c:	9903      	ldr	r1, [sp, #12]
 800569e:	1a5b      	subs	r3, r3, r1
 80056a0:	42ab      	cmp	r3, r5
 80056a2:	dcf2      	bgt.n	800568a <_printf_i+0x216>
 80056a4:	e7eb      	b.n	800567e <_printf_i+0x20a>
 80056a6:	2500      	movs	r5, #0
 80056a8:	f104 0619 	add.w	r6, r4, #25
 80056ac:	e7f5      	b.n	800569a <_printf_i+0x226>
 80056ae:	bf00      	nop
 80056b0:	08005815 	.word	0x08005815
 80056b4:	08005826 	.word	0x08005826

080056b8 <memmove>:
 80056b8:	4288      	cmp	r0, r1
 80056ba:	b510      	push	{r4, lr}
 80056bc:	eb01 0402 	add.w	r4, r1, r2
 80056c0:	d902      	bls.n	80056c8 <memmove+0x10>
 80056c2:	4284      	cmp	r4, r0
 80056c4:	4623      	mov	r3, r4
 80056c6:	d807      	bhi.n	80056d8 <memmove+0x20>
 80056c8:	1e43      	subs	r3, r0, #1
 80056ca:	42a1      	cmp	r1, r4
 80056cc:	d008      	beq.n	80056e0 <memmove+0x28>
 80056ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80056d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80056d6:	e7f8      	b.n	80056ca <memmove+0x12>
 80056d8:	4402      	add	r2, r0
 80056da:	4601      	mov	r1, r0
 80056dc:	428a      	cmp	r2, r1
 80056de:	d100      	bne.n	80056e2 <memmove+0x2a>
 80056e0:	bd10      	pop	{r4, pc}
 80056e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80056e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80056ea:	e7f7      	b.n	80056dc <memmove+0x24>

080056ec <_sbrk_r>:
 80056ec:	b538      	push	{r3, r4, r5, lr}
 80056ee:	4d06      	ldr	r5, [pc, #24]	; (8005708 <_sbrk_r+0x1c>)
 80056f0:	2300      	movs	r3, #0
 80056f2:	4604      	mov	r4, r0
 80056f4:	4608      	mov	r0, r1
 80056f6:	602b      	str	r3, [r5, #0]
 80056f8:	f7fb fafc 	bl	8000cf4 <_sbrk>
 80056fc:	1c43      	adds	r3, r0, #1
 80056fe:	d102      	bne.n	8005706 <_sbrk_r+0x1a>
 8005700:	682b      	ldr	r3, [r5, #0]
 8005702:	b103      	cbz	r3, 8005706 <_sbrk_r+0x1a>
 8005704:	6023      	str	r3, [r4, #0]
 8005706:	bd38      	pop	{r3, r4, r5, pc}
 8005708:	20000304 	.word	0x20000304

0800570c <memcpy>:
 800570c:	440a      	add	r2, r1
 800570e:	4291      	cmp	r1, r2
 8005710:	f100 33ff 	add.w	r3, r0, #4294967295
 8005714:	d100      	bne.n	8005718 <memcpy+0xc>
 8005716:	4770      	bx	lr
 8005718:	b510      	push	{r4, lr}
 800571a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800571e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005722:	4291      	cmp	r1, r2
 8005724:	d1f9      	bne.n	800571a <memcpy+0xe>
 8005726:	bd10      	pop	{r4, pc}

08005728 <_realloc_r>:
 8005728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800572c:	4680      	mov	r8, r0
 800572e:	4614      	mov	r4, r2
 8005730:	460e      	mov	r6, r1
 8005732:	b921      	cbnz	r1, 800573e <_realloc_r+0x16>
 8005734:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005738:	4611      	mov	r1, r2
 800573a:	f7ff bc49 	b.w	8004fd0 <_malloc_r>
 800573e:	b92a      	cbnz	r2, 800574c <_realloc_r+0x24>
 8005740:	f7ff fbda 	bl	8004ef8 <_free_r>
 8005744:	4625      	mov	r5, r4
 8005746:	4628      	mov	r0, r5
 8005748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800574c:	f000 f81b 	bl	8005786 <_malloc_usable_size_r>
 8005750:	4284      	cmp	r4, r0
 8005752:	4607      	mov	r7, r0
 8005754:	d802      	bhi.n	800575c <_realloc_r+0x34>
 8005756:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800575a:	d812      	bhi.n	8005782 <_realloc_r+0x5a>
 800575c:	4621      	mov	r1, r4
 800575e:	4640      	mov	r0, r8
 8005760:	f7ff fc36 	bl	8004fd0 <_malloc_r>
 8005764:	4605      	mov	r5, r0
 8005766:	2800      	cmp	r0, #0
 8005768:	d0ed      	beq.n	8005746 <_realloc_r+0x1e>
 800576a:	42bc      	cmp	r4, r7
 800576c:	4622      	mov	r2, r4
 800576e:	4631      	mov	r1, r6
 8005770:	bf28      	it	cs
 8005772:	463a      	movcs	r2, r7
 8005774:	f7ff ffca 	bl	800570c <memcpy>
 8005778:	4631      	mov	r1, r6
 800577a:	4640      	mov	r0, r8
 800577c:	f7ff fbbc 	bl	8004ef8 <_free_r>
 8005780:	e7e1      	b.n	8005746 <_realloc_r+0x1e>
 8005782:	4635      	mov	r5, r6
 8005784:	e7df      	b.n	8005746 <_realloc_r+0x1e>

08005786 <_malloc_usable_size_r>:
 8005786:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800578a:	1f18      	subs	r0, r3, #4
 800578c:	2b00      	cmp	r3, #0
 800578e:	bfbc      	itt	lt
 8005790:	580b      	ldrlt	r3, [r1, r0]
 8005792:	18c0      	addlt	r0, r0, r3
 8005794:	4770      	bx	lr
	...

08005798 <_init>:
 8005798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800579a:	bf00      	nop
 800579c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800579e:	bc08      	pop	{r3}
 80057a0:	469e      	mov	lr, r3
 80057a2:	4770      	bx	lr

080057a4 <_fini>:
 80057a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057a6:	bf00      	nop
 80057a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057aa:	bc08      	pop	{r3}
 80057ac:	469e      	mov	lr, r3
 80057ae:	4770      	bx	lr
